#include "Precomp.h"
/* A MSTA parser generated from `nscparser.y' */

#define YYMSTA 1 /* MSTA parser identification. */


#line 32 "nscparser.y"

#include "Nsc.h"

#pragma warning (disable : 4244 4102 4127)

int yylex ();
void yyerror(char *s);

#ifndef __cplusplus
#error "Parser yacc output must be compiled as C++"
#endif

class CNscPStackEntry;
#define YYSTYPE CNscPStackEntry *

YYSTYPE NscBuildIdentifier (YYSTYPE p);
YYSTYPE NscBuildObjectConstant (int nOID);
YYSTYPE NscBuildVectorConstant (YYSTYPE px, YYSTYPE py, YYSTYPE pz);
YYSTYPE NscBuildCall (YYSTYPE pfn, YYSTYPE parglist);
YYSTYPE NscBuildArgExpList (YYSTYPE parglist, YYSTYPE parg);
YYSTYPE NscBuildElementAccess (YYSTYPE pStruct, YYSTYPE pElement);
YYSTYPE NscBuildPlusMinus (YYSTYPE pValue, int fPlus, int fPre);
YYSTYPE NscBuildUnaryOp (int nToken, YYSTYPE pValue);
YYSTYPE NscBuildBinaryOp (int nToken, YYSTYPE plhs, YYSTYPE prhs);
YYSTYPE NscBuildLogicalOp (int nToken, YYSTYPE plhs, YYSTYPE prhs);
YYSTYPE NscBuildConditional (YYSTYPE pSelect, YYSTYPE p1, YYSTYPE p2);
YYSTYPE NscBuildExpression (YYSTYPE pExpression, YYSTYPE pAssignment);
YYSTYPE NscBuildStatement (YYSTYPE pList, YYSTYPE pStatement, YYSTYPE pFence);
YYSTYPE NscBuildStatementFence ();
YYSTYPE NscBuildDeclarationList (YYSTYPE pList, YYSTYPE pDeclaration);
YYSTYPE NscBuildDeclaration (YYSTYPE pType, YYSTYPE pList);
YYSTYPE NscBuildStructDeclaratorList (YYSTYPE pList, YYSTYPE pDeclarator);
YYSTYPE NscBuildStructDeclaration (YYSTYPE pType, YYSTYPE pList);
YYSTYPE NscBuildStructDeclarationList (YYSTYPE pList, YYSTYPE pDeclaration);
YYSTYPE NscBuildStruct (YYSTYPE pId, YYSTYPE pList);
YYSTYPE NscBuildFunctionDef (YYSTYPE pPrototype, YYSTYPE pStatement);
YYSTYPE NscBuildFunctionPrototype (YYSTYPE pPrototype);
YYSTYPE NscBuildFunctionDeclarator (YYSTYPE pType, YYSTYPE pId, YYSTYPE pList);
YYSTYPE NscBuildParameterList (YYSTYPE pList, YYSTYPE pParameter);
YYSTYPE NscBuildParameter (YYSTYPE pType, YYSTYPE pId, YYSTYPE pInit);
YYSTYPE NscBuildTranslation (YYSTYPE pList, YYSTYPE pTranslation);
YYSTYPE NscBuildType (int nType, YYSTYPE pId);
YYSTYPE NscBuild5Block (int nType, YYSTYPE pPrev, int nAddFence, YYSTYPE pInit, 
	YYSTYPE pCond, YYSTYPE pInc, YYSTYPE pTrue, YYSTYPE pFalse);
YYSTYPE NscBuildBreakContinue (int nToken);
YYSTYPE NscBuildReturn (YYSTYPE pReturn);
YYSTYPE NscBuildCase (int nToken, YYSTYPE pCase);
YYSTYPE NscBuildBeginDeclaration (YYSTYPE pId);
YYSTYPE NscBuildEndDeclaration (YYSTYPE pId, YYSTYPE pInit);
YYSTYPE NscBuildMakeConstType (YYSTYPE pType);
YYSTYPE NscBuildBlankStatement ();
YYSTYPE NscBuildMarkLine (int nIndex, YYSTYPE pStatement);
void NscBuildSaveLine (int nIndex);
void NscBuildCopyLine (int nDest, int nSource);
bool NscBuildSyntaxError (int nToken, YYSTYPE yylval);


#line 65 "nscparser.cpp"
#ifndef  YYSTYPE
#define  YYSTYPE  int
#endif

#define IDENTIFIER 257
#define INTEGER_CONST 258
#define FLOAT_CONST 259
#define STRING_CONST 260
#define ADDEQ 261
#define SUBEQ 262
#define MULEQ 263
#define DIVEQ 264
#define MODEQ 265
#define XOREQ 266
#define ANDEQ 267
#define OREQ 268
#define SL 269
#define SR 270
#define USR 271
#define SLEQ 272
#define SREQ 273
#define USREQ 274
#define EQ 275
#define NOTEQ 276
#define LTEQ 277
#define GTEQ 278
#define ANDAND 279
#define OROR 280
#define PLUSPLUS 281
#define MINUSMINUS 282
#define FLOAT_TYPE 283
#define INT_TYPE 284
#define OBJECT_TYPE 285
#define STRING_TYPE 286
#define VOID_TYPE 287
#define STRUCT_TYPE 288
#define VECTOR_TYPE 289
#define ENGINE_TYPE 290
#define ACTION_TYPE 291
#define OBJECT_SELF_CONST 292
#define OBJECT_INVALID_CONST 293
#define BREAK 294
#define CASE 295
#define CONTINUE 296
#define DEFAULT 297
#define DO 298
#define ELSE 299
#define FOR 300
#define IF 301
#define RETURN 302
#define SWITCH 303
#define WHILE 304
#define NWCONST 305

class yyparser{
  int yyexpand_states_stack (int **start, int **end, int **top);
  int yyexpand_attributes_stack (YYSTYPE **start, YYSTYPE **end, YYSTYPE **top);

public:
  YYSTYPE  yylval;

  int yychar;

  int yydebug;

  virtual int yylex (void) = 0;
  virtual void yyerror (const char *message) = 0;
  int yyparse (void);
  yyparser (void) {}
  virtual ~yyparser (void)  {}
};

#ifndef  YYDEBUG
#define  YYDEBUG 0
#endif

/* Max code of all tokens. */
#define YYLAST_TOKEN_CODE 305

/* Undefined internal code for tokens. */
#define YYNO_TOKEN_INTERNAL_CODE 75

/* Code for token `error'. */
#define YYERRCODE 256

/* Token class of token `error'. */
#define YYERRCLASS 49

/* Base of empty action vector. */
#define YYNO_ACTION_BASE -76

/* An element of action check vector. */
#define YYNO_STATE 280

/* Final state of the parser. */
#define YYFINAL 278

/* An element of action vector and default action vector. */
#define YYNO_ACTION 0

/* An element of action vector (first pop-shift-action). */
#define YY1POP_SHIFT_ACTION 280

/* An element of action vector (first reduce). */
#define YY1REDUCE 315

/* Number of different reduce actions. */
#define YYNREDUCES 145

/* An element of action vector (the first look ahead table number). */
#define YY1LOOK_AHEAD_TABLE_VALUE 460

/* Base of the look ahead tables value.  The order number of the
   look ahead table is action look ahead table value + this value. */
#define YYLOOK_AHEAD_TABLE_BASE -180

/* Vector for translating external token codes to internal codes. */
static const unsigned short yytranslate[] = {
   74,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    59,    75,    75,    75,    62,    65,    75,
   50,    51,    60,    56,    54,    57,    55,    61,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    69,    71,
   63,    70,    64,    68,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    52,    75,    53,    66,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    73,    67,    72,    58,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   75,    75,    75,    75,    75,    75,    49,     0,     1,     2,
    3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
   13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
   23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
   33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
   43,    44,    45,    46,    47,    48};

/* Comb vector for actions. */
static const unsigned short yyaction[] = {
    0,     0,     0,     0,     0,   267,     0,     0,   254,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    14,    13,    15,    16,
   12,     9,    18,    19,    17,    14,    13,    15,    16,    12,
    9,    18,    19,    17,   240,     0,     0,     0,   309,     3,
    0,     0,     0,     0,     0,     0,     0,   309,     0,     0,
    0,     0,     0,     0,     0,   129,     0,     0,   130,     0,
    0,     0,     0,     0,     0,     0,     0,     0,    22,   244,
   24,     0,     0,   278,    14,    13,    15,    16,    12,     9,
   18,    19,    17,     0,     0,   293,   296,   292,   297,    46,
   95,    45,    51,    40,   294,    47,   309,    53,     0,     0,
    0,    88,     0,     0,   142,   143,   144,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
   25,    24,    14,    13,    15,    16,    12,     9,    18,    19,
   17,   160,   161,   293,   296,   292,   297,    46,    91,    45,
   51,    40,   294,    47,   309,    53,    79,    80,    81,    82,
  166,   167,    87,   152,   153,   154,   261,     0,     0,     0,
    0,     0,     0,     0,     0,   176,     0,    29,   250,    24,
   72,    73,   289,     0,   158,   159,     0,     0,     0,     0,
    0,    83,    84,     0,   230,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,   235,    85,     0,    86,     0,
    0,     0,    74,    75,    76,    77,   218,    14,    13,    15,
   16,    12,     9,    18,    19,    17,   184,   233,   293,   296,
  292,   297,    46,     0,    45,    51,    40,   294,    47,   309,
   53,   104,   105,   101,   102,   103,   110,   109,   111,   152,
  153,   154,   106,   107,   108,     0,     0,     0,     0,     0,
    0,     0,    29,     0,    24,    14,    13,    15,    16,    12,
    9,    18,    19,    17,     0,     0,   293,   296,   292,   297,
   46,   199,    45,    51,    40,   294,    47,   309,    53,   203,
  125,   141,     0,     0,     0,     0,     0,     0,     0,   152,
  153,   154,   255,     0,     0,     0,     0,   100,     0,     0,
   29,     0,    24,    14,    13,    15,    16,    12,     9,    18,
   19,    17,   298,   178,   293,   296,   292,   297,    46,     0,
   45,    51,    40,   294,    47,   309,    53,    79,    80,    81,
   82,     0,     0,   148,   149,     0,     0,   139,   140,     0,
    0,     0,    94,     0,     0,     0,     0,     0,    29,   174,
   24,    72,    73,     0,     0,     0,     0,     0,   179,     0,
    0,     0,    83,    84,     0,     0,     0,     0,   138,     0,
    0,     0,     0,     0,     0,     0,     0,    85,     0,    86,
    0,     0,     0,    74,    75,    76,    77,   248,    14,    13,
   15,    16,    12,     9,    18,    19,    17,     0,   204,   293,
  296,   292,   297,    46,   247,    45,    51,    40,   294,    47,
  309,    53,     0,     0,     0,     0,     0,     0,   245,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,   197,     0,    24,    14,    13,    15,    16,
   12,     9,    18,    19,    17,     0,     0,   293,   296,   292,
  297,    46,   170,    45,    51,    40,   294,    47,   309,    53,
   89,    90,    92,    93,   231,    56,   142,   143,   144,   152,
  153,   154,     0,     0,     0,     0,     0,     0,     0,     0,
    0,   197,     0,    24,    14,    13,    15,    16,    12,     9,
   18,    19,    17,   191,   264,   293,   296,   292,   297,    46,
  268,    45,    51,    40,   294,    47,   309,    53,    79,    80,
   81,    82,   142,   143,   144,     0,     0,   274,     0,     0,
    0,    79,    80,    81,    82,     0,     0,     0,     0,    29,
    0,    24,    72,    73,   273,     0,     0,     0,     0,     0,
    0,     0,     0,    83,    84,    72,    73,     0,     0,     0,
   79,    80,    81,    82,     0,     0,    83,    84,    85,   174,
   86,     0,   124,     0,    74,    75,    76,    77,     0,     0,
  172,    85,     0,    86,    72,    73,     0,    74,    75,    76,
   77,   152,   153,   154,   262,    83,    84,    79,    80,    81,
   82,   311,     0,     0,     0,     0,     0,     0,     0,     0,
   85,     0,    86,     0,     0,     0,    74,    75,    76,    77,
    0,    72,    73,     0,     0,     0,    79,    80,    81,    82,
    0,     0,    83,    84,     0,     0,     0,     0,     0,    79,
   80,    81,    82,     0,     0,     0,     0,    85,     0,    86,
   72,    73,     0,    74,    75,    76,    77,     0,     0,     0,
    0,    83,    84,    72,    73,     0,     0,     0,    79,    80,
   81,    82,     0,     0,    83,    84,    85,     0,    86,   160,
  161,     0,    74,    75,    76,    77,     0,     0,     0,    85,
    0,    86,    72,    73,     0,    74,    75,    76,    77,     0,
    0,     0,     0,    83,    84,    79,    80,    81,    82,    14,
   13,    15,    16,    12,     9,    18,    19,    17,    85,     0,
   86,     0,   158,   159,    74,    75,    76,    77,     0,    72,
   73,     0,     0,     0,    79,    80,    81,    82,     0,     0,
   83,    84,     0,     0,     0,     0,     0,    79,    80,    81,
   82,   148,   149,     0,     0,    85,     0,    86,    72,    73,
    0,    74,    75,    76,    77,     0,     0,     0,     0,    83,
   84,    72,    73,   170,     0,     0,    79,    80,    81,    82,
    0,     0,    83,    84,    85,     0,    86,     0,     0,     0,
   74,    75,    76,    77,     0,     0,     0,    85,     0,    86,
   72,    73,     0,    74,    75,    76,    77,     0,     0,     0,
    0,    83,    84,    79,    80,    81,    82,     0,     0,     0,
    0,   228,     0,     0,     0,     0,    85,     0,    86,     0,
    0,     0,    74,    75,    76,    77,     0,    72,    73,     0,
    0,     0,    79,    80,    81,    82,     0,     0,    83,    84,
    0,     0,     0,     0,     0,    79,    80,    81,    82,     0,
    0,     0,     0,    85,     0,    86,    72,    73,     0,    74,
   75,    76,    77,     0,     0,     0,     0,    83,    84,    72,
   73,     0,     0,     0,    79,    80,    81,    82,     0,     0,
   83,    84,    85,     0,    86,     0,     0,     0,    74,    75,
   76,    77,     0,     0,     0,    85,     0,    86,    72,    73,
    0,    74,    75,    76,    77,     0,     0,     0,     0,    83,
   84,    79,    80,    81,    82,     0,     0,     0,     0,     0,
    0,     0,     0,     0,    85,     0,    86,     0,     0,     0,
   74,    75,    76,    77,     0,    72,    73,     0,     0,     0,
   79,    80,    81,    82,     0,     0,    83,    84,   312,     0,
    0,     0,     0,    79,    80,    81,    82,     0,     0,     0,
    0,    85,     0,    86,    72,    73,     0,    74,    75,    76,
   77,     0,     0,     0,     0,    83,    84,    72,    73,     0,
    0,     0,    79,    80,    81,    82,     0,     0,    83,    84,
   85,     0,    86,     0,     0,     0,    74,    75,    76,    77,
    0,     0,     0,    85,     0,    86,    72,    73,     0,    74,
   75,    76,    77,     0,     0,     0,     0,    83,    84,    79,
   80,    81,    82,    14,    13,    15,    16,    12,     9,    18,
   19,    17,    85,     0,    86,     0,     0,     0,    74,    75,
   76,    77,   193,    72,    73,   309,     0,     0,    79,    80,
   81,    82,     0,     0,    83,    84,     0,     0,   202,     0,
    0,    79,    80,    81,    82,     0,     0,     0,     0,    85,
    0,    86,    72,    73,     0,    74,    75,    76,    77,     0,
    0,     0,     0,    83,    84,    72,    73,   148,   149,     0,
   79,    80,    81,    82,     0,     0,    83,    84,    85,     0,
   86,     0,     0,     0,    74,    75,    76,    77,     0,     0,
    0,    85,   127,    86,    72,    73,     0,    74,    75,    76,
   77,     0,     0,     0,     0,    83,    84,    79,    80,    81,
   82,     0,     0,     0,   209,     0,     0,     0,     0,     0,
   85,     0,    86,     0,     0,     0,    74,    75,    76,    77,
    0,    72,    73,     0,     0,     0,    79,    80,    81,    82,
    0,     0,    83,    84,     0,     0,     0,     0,     0,    79,
   80,    81,    82,     0,     0,     0,     0,    85,     0,    86,
   72,    73,     0,    74,    75,    76,    77,     0,     0,     0,
    0,    83,    84,    72,    73,     0,     0,     0,    79,    80,
   81,    82,   166,   167,    83,    84,    85,     0,    86,     0,
    0,   237,    74,    75,    76,    77,     0,     0,     0,    85,
    0,    86,    72,    73,     0,    74,    75,    76,    77,   148,
  149,     0,     0,    83,    84,    79,    80,    81,    82,     0,
    0,     0,     0,     0,     0,     0,     0,     0,    85,     0,
   86,     0,   160,   161,    74,    75,    76,    77,     0,    72,
   73,     0,     0,     0,    79,    80,    81,    82,     0,     0,
   83,    84,     0,     0,     0,     0,     0,    79,    80,    81,
   82,     0,     0,     0,     0,    85,     0,    86,    72,    73,
    0,    74,    75,    76,    77,   158,   159,     0,     0,    83,
   84,    72,    73,     0,     0,     0,    79,    80,    81,    82,
    0,     0,    83,    84,    85,   206,    86,     0,     0,     0,
   74,    75,    76,    77,     0,     0,     0,    85,   176,    86,
   72,    73,     0,    74,    75,    76,    77,     0,     0,     0,
    0,    83,    84,    79,    80,    81,    82,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    85,     0,    86,     0,
    0,     0,    74,    75,    76,    77,     0,    72,    73,     0,
    0,     0,    79,    80,    81,    82,     0,     0,    83,    84,
    0,     0,     0,     0,     0,    79,    80,    81,    82,     0,
    0,     0,   172,    85,     0,    86,    72,    73,     0,    74,
   75,    76,    77,     0,     0,     0,     0,    83,    84,    72,
   73,   212,     0,     0,    79,    80,    81,    82,     0,   224,
   83,    84,    85,     0,    86,     0,     0,     0,    74,    75,
   76,    77,     0,     0,     0,    85,     0,    86,    72,    73,
    0,    74,    75,    76,    77,     0,     0,     0,     0,    83,
   84,    79,    80,    81,    82,   239,     0,     0,     0,     0,
    0,     0,     0,     0,    85,   186,    86,     0,     0,     0,
   74,    75,    76,    77,     0,    72,    73,     0,     0,     0,
   79,    80,    81,    82,     0,     0,    83,    84,     0,     0,
    0,     0,     0,    79,    80,    81,    82,     0,     0,     0,
    0,    85,   244,    86,    72,    73,     0,    74,    75,    76,
   77,     0,     0,     0,   221,    83,    84,    72,    73,   189,
    0,     0,    79,    80,    81,    82,     0,     0,    83,    84,
   85,     0,    86,     0,     0,     0,    74,    75,    76,    77,
    0,     0,     0,    85,     0,    86,    72,    73,     0,    74,
   75,    76,    77,     0,     0,     0,     0,    83,    84,    79,
   80,    81,    82,     0,     0,     0,     0,     0,     0,     0,
    0,     0,    85,     0,    86,     0,     0,     0,    74,    75,
   76,    77,   277,    72,    73,     0,     0,     0,    79,    80,
   81,    82,     0,     0,    83,    84,     0,     0,     0,     0,
    0,    79,    80,    81,    82,     0,     0,     0,     0,    85,
    0,    86,    72,    73,     0,    74,    75,    76,    77,     0,
    0,     0,     0,    83,    84,    72,    73,     0,     0,     0,
   79,    80,    81,    82,   215,     0,    83,    84,    85,     0,
   86,     0,   181,     0,    74,    75,    76,    77,     0,     0,
    0,    85,     0,    86,    72,    73,     0,    74,    75,    76,
   77,     0,     0,     0,     0,    83,    84,    79,    80,    81,
   82,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   85,     0,    86,     0,     0,     0,    74,    75,    76,    77,
  266,    72,    73,     0,     0,     0,    79,    80,    81,    82,
    0,     0,    83,    84,     0,     0,     0,     0,     0,    79,
   80,    81,    82,     0,     0,     0,     0,    85,     0,    86,
   72,    73,     0,    74,    75,    76,    77,     0,     0,     0,
    0,    83,    84,    72,    73,     0,     0,     0,    79,    80,
   81,    82,     0,     0,    83,    84,    85,     0,    86,     0,
    0,     0,    74,    75,    76,    77,     0,     0,     0,    85,
    0,    86,    72,    73,     0,    74,    75,    76,    77,     0,
    0,     0,     0,    83,    84,    79,    80,    81,    82,     0,
    0,     0,     0,     0,     0,     0,     0,     0,    85,     0,
   86,     0,     0,     0,    74,    75,    76,    77,     0,    72,
   73,     0,     0,     0,    79,    80,    81,    82,     0,     0,
   83,    84,     0,    14,    13,    15,    16,    12,     9,    18,
   19,    17,     0,     0,     0,    85,     0,    86,    72,    73,
    0,    74,    75,    76,    77,   309,     0,     0,   257,    83,
   84,    79,    80,    81,    82,     0,   216,     0,     0,     0,
    0,     0,     0,     0,    85,     0,    86,     0,     0,     0,
   74,    75,    76,    77,     0,    72,    73,     0,     0,     0,
   79,    80,    81,    82,     0,   207,    83,    84,     0,     0,
    0,     0,     0,    79,    80,    81,    82,     0,     0,     0,
    0,    85,   213,    86,    72,    73,     0,    74,    75,    76,
   77,     0,     0,     0,     0,    83,    84,    72,    73,     0,
    0,     0,    79,    80,    81,    82,     0,     0,    83,    84,
   85,   210,    86,   302,     0,     0,    74,    75,    76,    77,
    0,     0,     0,    85,   222,    86,    72,    73,     0,    74,
   75,    76,    77,     0,     0,     0,     0,    83,    84,    79,
   80,    81,    82,    14,    13,    15,    16,    12,     9,    18,
   19,    17,    85,   219,    86,     0,     0,     0,    74,    75,
   76,    77,     0,    72,    73,   309,     0,     0,    79,    80,
   81,    82,     0,     0,    83,    84,     0,     0,     0,     0,
    0,    79,    80,    81,    82,     0,     0,     0,     0,    85,
    0,    86,    72,    73,     0,    74,    75,    76,    77,     0,
    0,     0,     0,    83,    84,    72,    73,    14,    13,    15,
   16,    12,     9,    18,    19,    17,    83,    84,    85,     0,
   86,     0,     0,     0,    74,    75,    76,    77,     0,   309,
    0,    85,     0,    86,     0,     0,     0,    74,    75,    76,
   77,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,   275,     0,     0};

/* Check vector for actions. */
static const unsigned short yyacheck[] = {
  280,   280,   280,   280,   280,     8,   280,   280,    10,   280,
  280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
  280,   280,   280,   280,   280,   280,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1,     1,     1,     1,     1,
    1,     1,     1,     1,    38,   280,   280,   280,     0,     0,
  280,   280,   280,   280,   280,   280,   280,     1,   280,   280,
  280,   280,   280,   280,   280,   126,   280,   280,   126,   280,
  280,   280,   280,   280,   280,   280,   280,   280,    20,    37,
   20,   280,   280,     1,    23,    23,    23,    23,    23,    23,
   23,    23,    23,   280,   280,    23,    23,    23,    23,    23,
   94,    23,    23,    23,    23,    23,    23,    23,   280,   280,
  280,    86,   280,   280,    69,    69,    69,   280,   280,   280,
  280,   280,   280,   280,   280,   280,   280,   280,   280,    23,
   23,    23,    26,    26,    26,    26,    26,    26,    26,    26,
   26,    66,    66,    26,    26,    26,    26,    26,    90,    26,
   26,    26,    26,    26,    26,    26,    39,    39,    39,    39,
   65,    65,    86,   162,   162,   162,   260,   280,   280,   280,
  280,   280,   280,   280,   280,    61,   280,    26,    26,    26,
   39,    39,    47,   280,    66,    66,   280,   280,   280,   280,
  280,    39,    39,   280,   229,   280,   280,   280,   280,   280,
  280,   280,   280,   280,   280,   234,    39,   280,    39,   280,
  280,   280,    39,    39,    39,    39,   217,    41,    41,    41,
   41,    41,    41,    41,    41,    41,    58,    39,    41,    41,
   41,    41,    41,   280,    41,    41,    41,    41,    41,    41,
   41,    99,    99,    99,    99,    99,    99,    99,    99,   163,
  163,   163,    99,    99,    99,   280,   280,   280,   280,   280,
  280,   280,    41,   280,    41,    42,    42,    42,    42,    42,
   42,    42,    42,    42,   280,   280,    42,    42,    42,    42,
   42,   198,    42,    42,    42,    42,    42,    42,    42,    45,
   79,   138,   280,   280,   280,   280,   280,   280,   280,    67,
   67,    67,   254,   280,   280,   280,   280,    99,   280,   280,
   42,   280,    42,    43,    43,    43,    43,    43,    43,    43,
   43,    43,    51,    60,    43,    43,    43,    43,    43,   280,
   43,    43,    43,    43,    43,    43,    43,    44,    44,    44,
   44,   280,   280,    68,    68,   280,   280,    71,    71,   280,
  280,   280,    93,   280,   280,   280,   280,   280,    43,    62,
   43,    44,    44,   280,   280,   280,   280,   280,    60,   280,
  280,   280,    44,    44,   280,   280,   280,   280,    71,   280,
  280,   280,   280,   280,   280,   280,   280,    44,   280,    44,
  280,   280,   280,    44,    44,    44,    44,   241,    48,    48,
   48,    48,    48,    48,    48,    48,    48,   280,    44,    48,
   48,    48,    48,    48,   241,    48,    48,    48,    48,    48,
   48,    48,   280,   280,   280,   280,   280,   280,   243,   280,
  280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
  280,   280,   280,    48,   280,    48,    49,    49,    49,    49,
   49,    49,    49,    49,    49,   280,   280,    49,    49,    49,
   49,    49,    64,    49,    49,    49,    49,    49,    49,    49,
   88,    88,    91,    91,   230,    55,   150,   150,   150,   164,
  164,   164,   280,   280,   280,   280,   280,   280,   280,   280,
  280,    49,   280,    49,    50,    50,    50,    50,    50,    50,
   50,    50,    50,   190,   258,    50,    50,    50,    50,    50,
  267,    50,    50,    50,    50,    50,    50,    50,    52,    52,
   52,    52,   151,   151,   151,   280,   280,   272,   280,   280,
  280,    57,    57,    57,    57,   280,   280,   280,   280,    50,
  280,    50,    52,    52,   272,   280,   280,   280,   280,   280,
  280,   280,   280,    52,    52,    57,    57,   280,   280,   280,
   72,    72,    72,    72,   280,   280,    57,    57,    52,   177,
   52,   280,    96,   280,    52,    52,    52,    52,   280,   280,
   63,    57,   280,    57,    72,    72,   280,    57,    57,    57,
   57,   165,   165,   165,   261,    72,    72,    73,    73,    73,
   73,   271,   280,   280,   280,   280,   280,   280,   280,   280,
   72,   280,    72,   280,   280,   280,    72,    72,    72,    72,
  280,    73,    73,   280,   280,   280,    74,    74,    74,    74,
  280,   280,    73,    73,   280,   280,   280,   280,   280,    75,
   75,    75,    75,   280,   280,   280,   280,    73,   280,    73,
   74,    74,   280,    73,    73,    73,    73,   280,   280,   280,
  280,    74,    74,    75,    75,   280,   280,   280,    76,    76,
   76,    76,   280,   280,    75,    75,    74,   280,    74,   168,
  168,   280,    74,    74,    74,    74,   280,   280,   280,    75,
  280,    75,    76,    76,   280,    75,    75,    75,    75,   280,
  280,   280,   280,    76,    76,    77,    77,    77,    77,   252,
  252,   252,   252,   252,   252,   252,   252,   252,    76,   280,
   76,   280,   168,   168,    76,    76,    76,    76,   280,    77,
   77,   280,   280,   280,    85,    85,    85,    85,   280,   280,
   77,    77,   280,   280,   280,   280,   280,   100,   100,   100,
  100,   156,   156,   280,   280,    77,   280,    77,    85,    85,
  280,    77,    77,    77,    77,   280,   280,   280,   280,    85,
   85,   100,   100,   173,   280,   280,   101,   101,   101,   101,
  280,   280,   100,   100,    85,   280,    85,   280,   280,   280,
   85,    85,    85,    85,   280,   280,   280,   100,   280,   100,
  101,   101,   280,   100,   100,   100,   100,   280,   280,   280,
  280,   101,   101,   102,   102,   102,   102,   280,   280,   280,
  280,   227,   280,   280,   280,   280,   101,   280,   101,   280,
  280,   280,   101,   101,   101,   101,   280,   102,   102,   280,
  280,   280,   103,   103,   103,   103,   280,   280,   102,   102,
  280,   280,   280,   280,   280,   104,   104,   104,   104,   280,
  280,   280,   280,   102,   280,   102,   103,   103,   280,   102,
  102,   102,   102,   280,   280,   280,   280,   103,   103,   104,
  104,   280,   280,   280,   105,   105,   105,   105,   280,   280,
  104,   104,   103,   280,   103,   280,   280,   280,   103,   103,
  103,   103,   280,   280,   280,   104,   280,   104,   105,   105,
  280,   104,   104,   104,   104,   280,   280,   280,   280,   105,
  105,   106,   106,   106,   106,   280,   280,   280,   280,   280,
  280,   280,   280,   280,   105,   280,   105,   280,   280,   280,
  105,   105,   105,   105,   280,   106,   106,   280,   280,   280,
  107,   107,   107,   107,   280,   280,   106,   106,   274,   280,
  280,   280,   280,   108,   108,   108,   108,   280,   280,   280,
  280,   106,   280,   106,   107,   107,   280,   106,   106,   106,
  106,   280,   280,   280,   280,   107,   107,   108,   108,   280,
  280,   280,   109,   109,   109,   109,   280,   280,   108,   108,
  107,   280,   107,   280,   280,   280,   107,   107,   107,   107,
  280,   280,   280,   108,   280,   108,   109,   109,   280,   108,
  108,   108,   108,   280,   280,   280,   280,   109,   109,   110,
  110,   110,   110,   264,   264,   264,   264,   264,   264,   264,
  264,   264,   109,   280,   109,   280,   280,   280,   109,   109,
  109,   109,   192,   110,   110,   264,   280,   280,   111,   111,
  111,   111,   280,   280,   110,   110,   280,   280,   201,   280,
  280,   125,   125,   125,   125,   280,   280,   280,   280,   110,
  280,   110,   111,   111,   280,   110,   110,   110,   110,   280,
  280,   280,   280,   111,   111,   125,   125,   155,   155,   280,
  130,   130,   130,   130,   280,   280,   125,   125,   111,   280,
  111,   280,   280,   280,   111,   111,   111,   111,   280,   280,
  280,   125,   125,   125,   130,   130,   280,   125,   125,   125,
  125,   280,   280,   280,   280,   130,   130,   142,   142,   142,
  142,   280,   280,   280,   208,   280,   280,   280,   280,   280,
  130,   280,   130,   280,   280,   280,   130,   130,   130,   130,
  280,   142,   142,   280,   280,   280,   143,   143,   143,   143,
  280,   280,   142,   142,   280,   280,   280,   280,   280,   144,
  144,   144,   144,   280,   280,   280,   280,   142,   280,   142,
  143,   143,   280,   142,   142,   142,   142,   280,   280,   280,
  280,   143,   143,   144,   144,   280,   280,   280,   148,   148,
  148,   148,   171,   171,   144,   144,   143,   280,   143,   280,
  280,   236,   143,   143,   143,   143,   280,   280,   280,   144,
  280,   144,   148,   148,   280,   144,   144,   144,   144,   157,
  157,   280,   280,   148,   148,   149,   149,   149,   149,   280,
  280,   280,   280,   280,   280,   280,   280,   280,   148,   280,
  148,   280,   169,   169,   148,   148,   148,   148,   280,   149,
  149,   280,   280,   280,   152,   152,   152,   152,   280,   280,
  149,   149,   280,   280,   280,   280,   280,   153,   153,   153,
  153,   280,   280,   280,   280,   149,   280,   149,   152,   152,
  280,   149,   149,   149,   149,   169,   169,   280,   280,   152,
  152,   153,   153,   280,   280,   280,   154,   154,   154,   154,
  280,   280,   153,   153,   152,   205,   152,   280,   280,   280,
  152,   152,   152,   152,   280,   280,   280,   153,   183,   153,
  154,   154,   280,   153,   153,   153,   153,   280,   280,   280,
  280,   154,   154,   158,   158,   158,   158,   280,   280,   280,
  280,   280,   280,   280,   280,   280,   154,   280,   154,   280,
  280,   280,   154,   154,   154,   154,   280,   158,   158,   280,
  280,   280,   159,   159,   159,   159,   280,   280,   158,   158,
  280,   280,   280,   280,   280,   160,   160,   160,   160,   280,
  280,   280,   175,   158,   280,   158,   159,   159,   280,   158,
  158,   158,   158,   280,   280,   280,   280,   159,   159,   160,
  160,   211,   280,   280,   161,   161,   161,   161,   280,   223,
  160,   160,   159,   280,   159,   280,   280,   280,   159,   159,
  159,   159,   280,   280,   280,   160,   280,   160,   161,   161,
  280,   160,   160,   160,   160,   280,   280,   280,   280,   161,
  161,   166,   166,   166,   166,   238,   280,   280,   280,   280,
  280,   280,   280,   280,   161,   185,   161,   280,   280,   280,
  161,   161,   161,   161,   280,   166,   166,   280,   280,   280,
  167,   167,   167,   167,   280,   280,   166,   166,   280,   280,
  280,   280,   280,   170,   170,   170,   170,   280,   280,   280,
  280,   166,   248,   166,   167,   167,   280,   166,   166,   166,
  166,   280,   280,   280,   220,   167,   167,   170,   170,   188,
  280,   280,   172,   172,   172,   172,   280,   280,   170,   170,
  167,   280,   167,   280,   280,   280,   167,   167,   167,   167,
  280,   280,   280,   170,   280,   170,   172,   172,   280,   170,
  170,   170,   170,   280,   280,   280,   280,   172,   172,   174,
  174,   174,   174,   280,   280,   280,   280,   280,   280,   280,
  280,   280,   172,   280,   172,   280,   280,   280,   172,   172,
  172,   172,   275,   174,   174,   280,   280,   280,   176,   176,
  176,   176,   280,   280,   174,   174,   280,   280,   280,   280,
  280,   178,   178,   178,   178,   280,   280,   280,   280,   174,
  280,   174,   176,   176,   280,   174,   174,   174,   174,   280,
  280,   280,   280,   176,   176,   178,   178,   280,   280,   280,
  179,   179,   179,   179,   214,   280,   178,   178,   176,   280,
  176,   280,   180,   280,   176,   176,   176,   176,   280,   280,
  280,   178,   280,   178,   179,   179,   280,   178,   178,   178,
  178,   280,   280,   280,   280,   179,   179,   181,   181,   181,
  181,   280,   280,   280,   280,   280,   280,   280,   280,   280,
  179,   280,   179,   280,   280,   280,   179,   179,   179,   179,
  256,   181,   181,   280,   280,   280,   187,   187,   187,   187,
  280,   280,   181,   181,   280,   280,   280,   280,   280,   191,
  191,   191,   191,   280,   280,   280,   280,   181,   280,   181,
  187,   187,   280,   181,   181,   181,   181,   280,   280,   280,
  280,   187,   187,   191,   191,   280,   280,   280,   200,   200,
  200,   200,   280,   280,   191,   191,   187,   280,   187,   280,
  280,   280,   187,   187,   187,   187,   280,   280,   280,   191,
  280,   191,   200,   200,   280,   191,   191,   191,   191,   280,
  280,   280,   280,   200,   200,   204,   204,   204,   204,   280,
  280,   280,   280,   280,   280,   280,   280,   280,   200,   280,
  200,   280,   280,   280,   200,   200,   200,   200,   280,   204,
  204,   280,   280,   280,   206,   206,   206,   206,   280,   280,
  204,   204,   280,   255,   255,   255,   255,   255,   255,   255,
  255,   255,   280,   280,   280,   204,   280,   204,   206,   206,
  280,   204,   204,   204,   204,   255,   280,   280,   255,   206,
  206,   207,   207,   207,   207,   280,   204,   280,   280,   280,
  280,   280,   280,   280,   206,   280,   206,   280,   280,   280,
  206,   206,   206,   206,   280,   207,   207,   280,   280,   280,
  209,   209,   209,   209,   280,   206,   207,   207,   280,   280,
  280,   280,   280,   216,   216,   216,   216,   280,   280,   280,
  280,   207,   207,   207,   209,   209,   280,   207,   207,   207,
  207,   280,   280,   280,   280,   209,   209,   216,   216,   280,
  280,   280,   218,   218,   218,   218,   280,   280,   216,   216,
  209,   209,   209,   226,   280,   280,   209,   209,   209,   209,
  280,   280,   280,   216,   216,   216,   218,   218,   280,   216,
  216,   216,   216,   280,   280,   280,   280,   218,   218,   228,
  228,   228,   228,   268,   268,   268,   268,   268,   268,   268,
  268,   268,   218,   218,   218,   280,   280,   280,   218,   218,
  218,   218,   280,   228,   228,   268,   280,   280,   245,   245,
  245,   245,   280,   280,   228,   228,   280,   280,   280,   280,
  280,   262,   262,   262,   262,   280,   280,   280,   280,   228,
  280,   228,   245,   245,   280,   228,   228,   228,   228,   280,
  280,   280,   280,   245,   245,   262,   262,   269,   269,   269,
  269,   269,   269,   269,   269,   269,   262,   262,   245,   280,
  245,   280,   280,   280,   245,   245,   245,   245,   280,   269,
  280,   262,   280,   262,   280,   280,   280,   262,   262,   262,
  262,   280,   280,   280,   280,   280,   280,   280,   280,   280,
  280,   280,   280,   269,   280,   280};

/* Base vector for actions. */
static const short yyabase[] = {
    0,     9,   -76,   -76,   -76,   -76,   -76,   -76,     5,   -76,
    8,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
    7,   -76,   -76,    58,   -76,   -76,   106,   -76,   -76,   -76,
  -76,   -76,   -76,   -76,   -76,   -76,   -76,    79,    44,   156,
  -76,   191,   239,   287,   337,   239,   -76,   132,   372,   420,
  468,   272,   518,   -76,   -76,   406,   -76,   531,   157,   -76,
  300,   153,   292,   514,   397,   142,   121,   287,   287,    54,
  -76,   323,   560,   597,   626,   639,   668,   705,   -76,   240,
  -76,   -76,   -76,   -76,   -76,   734,   109,   -76,   417,   -76,
  146,   419,   -76,   350,    47,   -76,   521,   -76,   -76,   237,
  747,   776,   813,   842,   855,   884,   921,   950,   963,   992,
 1029,  1058,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   -76,
  -76,   -76,   -76,   -76,   -76,  1071,    14,   -76,   -76,   -76,
 1100,   -76,   -76,   -76,   -76,   -76,   -76,   -76,   291,   -76,
  -76,   -76,  1137,  1166,  1179,   -76,   -76,   -76,  1208,  1245,
  416,   462,  1274,  1287,  1316,  1041,   695,  1183,  1353,  1382,
 1395,  1424,   151,   237,   467,   579,  1461,  1490,   659,  1242,
 1503,  1194,  1532,   708,  1569,  1336,  1598,   502,  1611,  1640,
 1583,  1677,   -76,  1316,   -76,  1404,   -76,  1706,  1478,   -76,
  453,  1719,  1001,   -76,   -76,   -76,   -76,   -76,   239,   -76,
 1748,  1017,   -76,   -76,  1785,  1254,  1814,  1851,  1073,  1880,
  -76,  1370,   -76,   -76,  1593,   -76,  1893,   145,  1922,   -76,
 1473,   -76,   -76,  1378,   -76,   -76,  1886,   771,  1959,   143,
  403,   -76,   -76,   -76,   134,   -76,  1150,   -76,  1394,   -76,
  -76,   343,   -76,   358,   -76,  1988,   -76,   -76,  1512,   -76,
  -76,   -76,   683,   -76,   252,  1797,  1649,   -76,   450,   -76,
  166,   524,  2001,   -76,  1007,   -76,   -76,   437,  1937,  2001,
  -76,   601,   473,   -76,   958,  1521,   -76,   -76,   -76,   -76,
};

/* Default vector for actions. */
static const unsigned short yyadefault[] = {
  280,     0,   281,   282,   315,   316,   317,   318,     0,   319,
    0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    0,   329,   330,   283,   331,   332,   284,   285,   333,   334,
  335,   336,   337,   338,   339,   340,   341,     0,     0,     0,
  342,   286,   287,   288,     0,     0,   343,     0,   290,   291,
  295,     0,     0,   344,   345,     0,   346,     0,     0,   299,
  347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
  357,   358,     0,     0,     0,     0,     0,     0,   359,   360,
  361,   362,   363,   364,   365,     0,     0,   366,     0,   367,
    0,     0,   368,     0,     0,   369,     0,   370,   371,   372,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,   373,   374,   375,   376,   377,   378,   379,   380,
  381,   382,   383,   384,   385,     0,     0,   386,   300,   387,
    0,   301,   388,   389,   390,   391,   392,   393,     0,   394,
  395,   396,     0,     0,     0,   397,   398,   399,     0,     0,
  400,   401,     0,     0,     0,   402,   403,   404,     0,     0,
    0,     0,   405,   406,   407,   408,     0,     0,   409,   410,
    0,   411,     0,   412,     0,   413,     0,   414,     0,     0,
    0,     0,   415,   416,   417,     0,   418,     0,     0,   419,
    0,     0,     0,   420,   421,   422,   423,   424,   425,   426,
    0,     0,   427,   428,     0,     0,     0,     0,     0,     0,
  429,     0,   430,   431,     0,   432,     0,     0,     0,   433,
    0,   434,   435,     0,   436,   437,     0,     0,     0,     0,
    0,   438,   439,   440,     0,   441,     0,   442,     0,   443,
  444,     0,   445,   446,   447,     0,   448,   449,     0,   450,
  451,   303,     0,   452,   304,     0,     0,   453,   305,   306,
    0,   454,     0,   455,   307,   308,   456,   457,     0,     0,
  310,     0,     0,   458,     0,     0,   313,   459,     0,   314,
};

/* Comb vector for gotos. */
static const unsigned short yygoto[] = {
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,    10,     0,
   11,     8,     0,     0,     0,    10,     0,    11,     8,     0,
   21,     6,     0,     0,     0,    78,     0,    71,     6,    23,
   70,    69,    68,    67,    66,    65,   173,     0,     0,     0,
    0,     0,     0,     0,     0,     4,    20,     5,   241,   242,
    0,     7,     4,    20,     5,     0,     2,    37,     7,    11,
   38,    27,    28,   279,    30,    31,    32,    33,    34,    35,
   36,    54,     0,     0,    23,     0,     0,    48,    49,    50,
    0,     0,    41,    42,     0,    43,    44,     0,     0,    37,
   39,    11,    38,   251,    28,     0,    30,    31,    32,    33,
   34,    35,    36,    54,     0,     0,    23,     0,     0,    48,
   49,    50,     0,     0,    41,    42,     0,    43,    44,   241,
  242,   243,    39,    78,   234,    71,     0,    97,    99,    69,
   68,    67,    66,    65,    64,    63,    62,    61,    60,    98,
   37,     0,    11,    38,   232,    28,     0,    30,    31,    32,
   33,    34,    35,    36,    54,   253,    38,    23,     0,     0,
   48,    49,    50,     0,     0,    41,    42,     0,    43,    44,
    0,     0,    37,    39,    11,    38,   226,    28,     0,    30,
   31,    32,    33,    34,    35,    36,    54,     0,     0,    23,
    0,     0,    48,    49,    50,     0,     0,    41,    42,     0,
   43,    44,     0,     0,    37,    39,    11,    38,   225,    28,
    0,    30,    31,    32,    33,    34,    35,    36,    54,     0,
    0,    23,     0,     0,    48,    49,    50,     0,     0,    41,
   42,     0,    43,    44,    78,   205,    71,    39,    97,    99,
   69,    68,    67,    66,    65,    64,    63,    62,    61,    60,
   98,    37,     0,    11,    38,     0,   196,   198,    30,    31,
   32,    33,    34,    35,    36,    54,     0,     0,    23,     0,
    0,    48,    49,    50,     0,     0,    41,    42,     0,    43,
   44,     0,     0,    37,    39,    11,    38,     0,   196,   195,
   30,    31,    32,    33,    34,    35,    36,    54,     0,     0,
   23,     0,     0,    48,    49,    50,     0,     0,    41,    42,
    0,    43,    44,     0,     0,    37,    39,    11,    38,   194,
   28,     0,    30,    31,    32,    33,    34,    35,    36,    54,
    0,     0,    23,     0,     0,    48,    49,    50,     0,     0,
   41,    42,     0,    43,    44,    78,   185,    71,    39,    97,
   99,    69,    68,    67,    66,    65,    64,    63,    62,    61,
   60,    98,    78,     0,    71,     0,     0,    70,    69,    68,
   67,    66,    65,    64,    63,    62,    61,    60,    59,    78,
   78,    71,    71,     0,   137,   136,    78,    78,    71,    71,
    0,   135,   134,    78,    78,    71,    71,     0,   133,   132,
   78,    96,    71,     0,    97,    99,    69,    68,    67,    66,
   65,    64,    63,    62,    61,    60,    98,    78,     0,    71,
    0,   123,    99,    69,    68,    67,    66,    65,    64,    63,
   62,    61,    60,    98,    78,     0,    71,     0,   122,    99,
   69,    68,    67,    66,    65,    64,    63,    62,    61,    60,
   98,    78,     0,    71,     0,   121,    99,    69,    68,    67,
   66,    65,    64,    63,    62,    61,    60,    98,    78,     0,
   71,     0,   120,    99,    69,    68,    67,    66,    65,    64,
   63,    62,    61,    60,    98,    78,     0,    71,     0,   119,
   99,    69,    68,    67,    66,    65,    64,    63,    62,    61,
   60,    98,    78,     0,    71,     0,   118,    99,    69,    68,
   67,    66,    65,    64,    63,    62,    61,    60,    98,    78,
    0,    71,     0,   117,    99,    69,    68,    67,    66,    65,
   64,    63,    62,    61,    60,    98,    78,     0,    71,     0,
  116,    99,    69,    68,    67,    66,    65,    64,    63,    62,
   61,    60,    98,    78,     0,    71,     0,   115,    99,    69,
   68,    67,    66,    65,    64,    63,    62,    61,    60,    98,
   78,     0,    71,     0,   114,    99,    69,    68,    67,    66,
   65,    64,    63,    62,    61,    60,    98,    78,     0,    71,
    0,   113,    99,    69,    68,    67,    66,    65,    64,    63,
   62,    61,    60,    98,    78,     0,    71,     0,   112,    99,
   69,    68,    67,    66,    65,    64,    63,    62,    61,    60,
   98,    78,     0,    71,     0,   128,    99,    69,    68,    67,
   66,    65,    64,    63,    62,    61,    60,    98,    78,     0,
   71,     0,   131,    99,    69,    68,    67,    66,    65,    64,
   63,    62,    61,    60,    98,    78,    78,    71,    71,     0,
  147,   146,    78,    78,    71,    71,     0,   145,    70,   151,
   78,     0,    71,   249,   243,    70,   150,    78,   271,    71,
   11,    38,    70,    69,   157,    78,     0,    71,     0,     0,
   70,    69,   156,    78,     0,    71,     0,     0,    70,    69,
  155,    78,     0,    71,     0,     0,    70,    69,    68,   165,
   78,     0,    71,     0,     0,    70,    69,    68,   164,    78,
    0,    71,     0,   276,    70,    69,    68,   163,    78,     0,
   71,     0,     0,    70,    69,    68,   162,    78,     0,    71,
    0,     0,    70,    69,    68,    67,   169,    78,     0,    71,
    0,     0,    70,    69,    68,    67,   168,    78,     0,    71,
    0,     0,    70,    69,    68,    67,    66,   171,    78,     0,
   71,     0,     0,    70,    69,    68,    67,    66,    65,    64,
  175,    78,     0,    71,     0,     0,    70,    69,    68,    67,
   66,    65,    64,    63,   177,    78,     0,    71,     0,     0,
   70,    69,    68,    67,    66,    65,    64,    63,    62,   183,
   78,   180,    71,     0,    97,    99,    69,    68,    67,    66,
   65,    64,    63,    62,    61,    60,    98,    78,     0,    71,
    0,     0,    70,    69,    68,    67,    66,    65,    64,    63,
   62,    61,    60,   182,    78,   188,    71,     0,    97,    99,
   69,    68,    67,    66,    65,    64,    63,    62,    61,    60,
   98,    78,   192,    71,     0,    97,    99,    69,    68,    67,
   66,    65,    64,    63,    62,    61,    60,    98,    78,   201,
   71,     0,    97,    99,    69,    68,    67,    66,    65,    64,
   63,    62,    61,    60,    98,    78,   217,    71,     0,    97,
   99,    69,    68,    67,    66,    65,    64,    63,    62,    61,
   60,    98,    78,   208,    71,     0,    97,    99,    69,    68,
   67,    66,    65,    64,    63,    62,    61,    60,    98,    78,
  214,    71,     0,    97,    99,    69,    68,    67,    66,    65,
   64,    63,    62,    61,    60,    98,    78,   211,    71,     0,
   97,    99,    69,    68,    67,    66,    65,    64,    63,    62,
   61,    60,    98,    78,   223,    71,     0,    97,    99,    69,
   68,    67,    66,    65,    64,    63,    62,    61,    60,    98,
   78,   220,    71,     0,    97,    99,    69,    68,    67,    66,
   65,    64,    63,    62,    61,    60,    98,    78,   229,    71,
    0,    97,    99,    69,    68,    67,    66,    65,    64,    63,
   62,    61,    60,    98,    78,     0,    71,     0,   246,    99,
   69,    68,    67,    66,    65,    64,    63,    62,    61,    60,
   98,   260,     0,    11,    38,    78,     0,    71,     0,   263,
   99,    69,    68,    67,    66,    65,    64,    63,    62,    61,
   60,    98,   260,     0,    11,    38,   271,     0,    11,    38,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,   259,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,   265,     0,     0,     0,     0,     0,
    0,   270};

/* Base vector for gotos. */
static const unsigned short yygbase[] = {
    0,     7,     0,     0,     0,     0,     0,     0,     0,     0,
    6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4,     0,     0,    49,     0,     0,    81,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,    77,     0,   133,
    0,   132,   164,   196,   244,     0,     0,     0,   243,   275,
  307,     0,   355,     0,     0,     0,     0,   372,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,   389,   390,   396,   397,   403,   404,     0,     0,
    0,     0,     0,     0,     0,   410,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  427,   444,   461,   478,   495,   512,   529,   546,   563,   580,
  597,   614,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,   631,     0,     0,     0,     0,
  648,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,   665,   666,   672,     0,     0,     0,   673,   680,
    0,     0,   687,   695,   703,     0,     0,     0,   711,   720,
  729,   738,     0,     0,     0,     0,   747,   757,     0,     0,
  767,     0,    35,     0,   778,     0,   791,     0,   805,   820,
    0,   837,     0,     0,     0,     0,     0,   854,     0,     0,
    0,   871,     0,     0,     0,     0,     0,     0,     0,     0,
  888,     0,     0,     0,   905,     0,   922,   939,     0,   956,
    0,     0,     0,     0,     0,     0,   973,     0,   990,     0,
    0,     0,     0,     0,     0,     0,     0,     0,  1007,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,  1024,     0,     0,   630,     0,
    0,     0,   145,     0,     0,  1023,     0,     0,     0,     0,
    0,     0,  1045,     0,  1044,     0,     0,     0,  1048,   670,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
};

/* Flags of pushed LR-sets. */
static const unsigned char yypushed[] = {
    1,     1,     0,     1,     0,     0,     0,     0,     0,     0,
    1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1,     0,     0,     1,     0,     0,     1,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     1,     0,     1,
    0,     1,     1,     1,     1,     0,     0,     0,     1,     1,
    1,     0,     1,     1,     0,     0,     0,     1,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1,     1,     1,     1,     1,     1,     0,     0,
    0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
    1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     1,     1,     1,     0,     0,     0,     1,     1,
    0,     0,     1,     1,     1,     0,     0,     0,     1,     1,
    1,     1,     0,     0,     0,     0,     1,     1,     0,     0,
    1,     0,     1,     0,     1,     0,     1,     0,     1,     1,
    0,     1,     0,     0,     0,     0,     0,     1,     0,     0,
    0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
    1,     0,     0,     0,     1,     0,     1,     1,     0,     1,
    0,     0,     0,     0,     0,     0,     1,     0,     1,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     1,     0,     0,     1,     0,
    0,     0,     1,     0,     0,     1,     0,     0,     0,     0,
    1,     0,     1,     0,     1,     0,     0,     0,     1,     1,
    0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
};

/* Comb vector for popping attributes during error recovery. */
static const signed char yynattr_pop[] = {
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     0,     0,     0,     0,     1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,     0,     0,    -1,    -1,     0,
   -1,    -1,    -1,    -1,     0,     0,     1,    -1,     1,     1,
   -1,    -1,     0,    -1,     0,     0,     0,     0,    -1,    -1,
    0,     0,     0,     0,     1,     1,     1,     0,     1,    -1,
    0,     1,     1,     1,    -1,     0,     0,     0,     0,     0,
    0,    -1,     0,     0,     0,     0,     0,     0,     0,     0,
   -1,    -1,     0,     0,     0,     1,     1,    -1,    -1,     0,
    0,     0,    -1,    -1,     0,    -1,    -1,    -1,    -1,     0,
    0,     0,    -1,    -1,     0,    -1,     1,    -1,    -1,     0,
    0,     0,     0,     1,    -1,     0,     0,     0,     0,     0,
    0,     0,     0,    -1,    -1,     0,     0,     0,     0,    -1,
    0,     0,     0,     0,     0,    -1,    -1,     0,     0,     0,
    0,     0,     0,     1,     1,    -1,    -1,     0,     0,     0,
    1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,     0,
    1,    -1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,
    1,    -1,     1,     1,     0,     0,     0,    -1,     1,     1,
    1,     0,     0,     0,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,    -1,     1,     1,     1,     0,    -1,
   -1,     0,    -1,    -1,     0,     0,    -1,    -1,     0,    -1,
   -1,     1,    -1,    -1,     1,     1,    -1,    -1,     1,     0,
    0,     0,    -1,     0,     0,     0,     0,     0,     0,     1,
    1,     1,     0,     1,     1,     1,     1,     1,     1,    -1,
    1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,
   -1,     0,     0,    -1,    -1,    -1,     0,     1,    -1,     0,
   -1,     1,     1,    -1,    -1,    -1,     0,     1,     0,     0,
    1,     1,     0,     0,     1,    -1,    -1,    -1,     0,    -1,
   -1,    -1,     0,     0,    -1,     1,     1,     1,    -1,     1,
    1,     1,     1,     1,     1,    -1,     1,     1,     1,    -1,
    0,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    0,    -1,     0,     0,    -1,    -1,     0,     0,     1,    -1,
   -1,     0,     0,    -1,     0,    -1,     0,     0,    -1,    -1,
   -1,     0,     1,     0,     0,     1,     1,     0,     0,     1,
   -1,    -1,    -1,     0,    -1,    -1,    -1,     0,     0,    -1,
    1,     1,     1,    -1,     1,     1,     1,     1,     1,     1,
   -1,     1,     1,     1,     1,     0,    -1,    -1,     0,    -1,
    1,    -1,    -1,     1,    -1,     1,    -1,     0,     1,    -1,
    1,     0,     0,     1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,    -1,    -1,     1,     1,     1,     1,     1,
    1,     0,    -1,    -1,     0,     1,     1,     1,    -1,    -1,
   -1,     0,    -1,    -1,     0,     0,    -1,    -1,     0,     0,
    0,     0,     1,     1,    -1,    -1,     0,     0,     0,     0,
    0,     0,    -1,     0,     0,     0,     0,     0,     0,    -1,
    0,     0,     0,     1,    -1,    -1,     1,     1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
    1,     1,     1,     1,    -1,     1,     1,     1,     1,     1,
    1,    -1,     1,     1,     1,     1,     1,     1,     0,    -1,
   -1,     0,     1,     1,     1,    -1,    -1,    -1,     0,    -1,
   -1,     0,     0,    -1,    -1,     0,     0,     0,     0,    -1,
   -1,    -1,    -1,     0,     0,     0,     0,     0,     0,    -1,
    0,     0,     0,     0,     0,     0,    -1,     0,     0,     0,
    0,    -1,    -1,     0,     1,     1,    -1,     1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,     1,     0,     0,
    0,     0,     1,     1,     1,     0,     0,     0,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,    -1,     1,     1,
    1,     1,    -1,    -1,    -1,     0,    -1,    -1,     0,     0,
   -1,    -1,     0,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,     1,     0,     0,     0,    -1,     0,     0,     0,
    0,     0,     0,    -1,     0,     0,     0,     1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,     1,
    1,     1,     1,     1,     1,    -1,     1,     1,     1,    -1,
    0,     0,    -1,     0,     0,     0,    -1,    -1,     0,    -1,
   -1,    -1,     0,    -1,    -1,     0,     0,     0,     0,     0,
    0,     0,    -1,     0,     0,     0,     0,     0,     0,    -1,
    0,     0,     0,     0,     0,     0,    -1,    -1,     1,    -1,
    0,     0,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     0,     1,    -1,     0,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,    -1,    -1,    -1,     1,     0,
    0,     0,    -1,    -1,    -1,    -1,     0,     0,     0,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     0,    -1,    -1,     0,     1,
   -1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     0,     0,     0,    -1,    -1,    -1,    -1,
    0,     0,     0,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,     1,    -1,     1,     1,    -1,    -1,     1,     1,     1,
    1,    -1,    -1,     1,     1,     1,     1,    -1,     1,    -1,
    1,     1,     1,    -1,    -1,     1,     1,     1,    -1,     1,
    1,     1,    -1,     1,    -1,    -1,     1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
    1,    -1,     1,    -1,    -1,     1,     1,     1,     1,    -1,
   -1,     1,     1,    -1,    -1,    -1,    -1,     1,    -1,     1,
   -1,     1,    -1,    -1,     1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,     1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,     1,     1,    -1,
    1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,     1,    -1,     1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,
    1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,     1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,    -1,     1,
   -1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,     1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,
    1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,     1,
    1,    -1,     1,     1,     1,    -1,     1,    -1,     1,    -1,
   -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,     1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,    -1,    -1,     1,    -1,     1,
   -1,     1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,
    1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,
    1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,
   -1,     1,     1,    -1,     1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,
    1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,     0,     0,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,
   -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,    -1,     1,    -1,     1,     0,     1,     1,     0,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,
   -1,     1,    -1,    -1,     0,     0,     0,    -1,    -1,    -1,
   -1,     0,     0,     0,     1,    -1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,     1,     0,     1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,     1,    -1,    -1,    -1,     1,     1,
    1,     1,    -1,     1,    -1,    -1,    -1,    -1,     0,    -1,
    1,     1,     1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     0,     0,     0,     0,     0,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,     0,
    0,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,     0,
   -1,     0,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
    0,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,     0,    -1,     0,     0,    -1,     0,    -1,
   -1,    -1,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     0,     0,     0,     0,
    0,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
    0,     0,    -1,    -1,     0,    -1,     0,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,     0,    -1,    -1,    -1,    -1,
   -1,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,     0,    -1,
    0,     0,    -1,     0,    -1,    -1,    -1,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     2,     2,    -1,    -1,     0,
   -1,     0,     0,     0,     0,     0,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,     0,
    0,     1,    -1,    -1,    -1,     0,     0,    -1,    -1,     0,
   -1,     0,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
    0,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,     0,    -1,     0,     0,    -1,     0,    -1,
   -1,    -1,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     0,     0,     0,     0,
    0,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    2,     0,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    -1,     2,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,     0,     0,    -1,    -1,    -1,     1,
    0,     0,    -1,    -1,     0,    -1,     0,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,     0,    -1,    -1,    -1,    -1,
   -1,     0,    -1,     1,    -1,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,     0,    -1,
    0,     0,    -1,     0,    -1,    -1,    -1,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,     0,     0,     0,     0,     0,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,     0,    -1,    -1,     0,    -1,    -1,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,    -1,    -1,    -1,    -1,     0,     0,
    0,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,     0,
    0,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,     0,
   -1,     0,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
    0,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,     0,    -1,     0,     0,    -1,     0,    -1,
   -1,    -1,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     0,     0,     0,     0,
    0,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
    0,     0,    -1,    -1,     0,    -1,     0,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,     0,    -1,    -1,    -1,    -1,
   -1,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,     0,     1,
    0,     0,    -1,     0,    -1,    -1,    -1,    -1,     1,    -1,
    0,    -1,     0,     1,     0,    -1,    -1,    -1,    -1,     1,
   -1,     1,     0,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,     1,     1,     1,     1,     1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,
   -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     1,
    1,     1,     1,     1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,    -1,     1,     1,     1,     1,     1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,    -1,     1,     1,
    1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,     1,     1,     1,     1,     1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     0,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,     1,    -1,    -1,     1,     1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,
   -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
    1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,
    1,    -1,     1,     1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,     1,     1,     1,     1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,
   -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,    -1,     0,    -1,     1,    -1,     1,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,    -1,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     0,     0,     0,     0,
    0,     0,     0,    -1,    -1,    -1,     1,    -1,    -1,     0,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,     1,     0,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,    -1,    -1,     0,     0,     0,    -1,
    1,    -1,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
    0,     0,    -1,    -1,     0,    -1,     0,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,     0,    -1,    -1,    -1,    -1,
   -1,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,     0,    -1,
    0,     0,    -1,     0,    -1,    -1,    -1,    -1,     0,    -1,
    0,     1,     0,     0,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,
   -1,    -1,     1,     0,    -1,    -1,     0,    -1,    -1,     0,
   -1,     0,     0,     0,     0,     0,     0,    -1,    -1,    -1,
   -1,     0,     0,     0,     0,    -1,     0,    -1,     0,     0,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,     1,     0,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,     0,
    0,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,     0,
   -1,     0,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
    0,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,     0,    -1,     0,     0,    -1,     0,    -1,
   -1,    -1,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     0,     0,     0,     0,
    0,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
    0,     0,    -1,    -1,     0,    -1,     0,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,     0,    -1,    -1,    -1,    -1,
   -1,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,     0,    -1,
    0,     0,    -1,     0,    -1,    -1,    -1,    -1,     0,    -1,
    0,    -1,     0,     0,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     0,     0,     1,    -1,    -1,     0,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,     0,
   -1,     0,     0,     0,     0,     0,     0,    -1,    -1,    -1,
    1,     1,     1,    -1,     0,    -1,     0,     1,     1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,    -1,
   -1,     0,     0,     0,    -1,    -1,    -1,     0,     0,     0,
    0,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,     0,
   -1,     0,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
    0,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,     0,    -1,     0,     0,    -1,     0,    -1,
   -1,    -1,    -1,     0,    -1,     0,    -1,     0,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,    -1,    -1,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,     0,     0,     0,     0,
    0,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,    -1,    -1,    -1,    -1,
   -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,     0,
   -1,    -1,    -1,     1,     0,    -1,    -1,     1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,    -1,    -1,     0,     0,     0,    -1,
   -1,    -1,     0,     0,     0,     0,     1,     1,    -1,    -1,
    0,     0,    -1,    -1,     0,    -1,     0,    -1,     0,     1,
    0,    -1,     0,     0,    -1,     0,    -1,    -1,    -1,    -1,
   -1,     0,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,     0,    -1,
    0,     0,    -1,     0,    -1,    -1,    -1,    -1,     1,    -1,
    0,    -1,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     0,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
   -1,     1,     1,     1,     1,     1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,    -1,
   -1,     1,     1,     1,     1,    -1,    -1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,
   -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,     0,    -1,    -1,     0,    -1,    -1,    -1,     1,
   -1,     1,     1,     1,     1,     1,     1,    -1,    -1,    -1,
    0,     0,     0,    -1,     1,    -1,     1,     0,     0,     0,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,    -1,     1,    -1,     1,     1,    -1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,
   -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,
   -1,    -1,    -1,     2,    -1,     1,    -1,     1,     2,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     2,     1,    -1,    -1,
   -1,     2,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     2,     2,     2,     2,
    2,     2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     2,     2,     2,     2,     2,     2,
    2,     2,     2,     2,     2,     2,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
   -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     2,     2,     2,    -1,
   -1,    -1,     2,     2,    -1,    -1,     2,     2,     2,    -1,
   -1,    -1,     2,     2,     2,     2,    -1,    -1,    -1,    -1,
    2,     2,    -1,    -1,     2,    -1,     2,    -1,     2,    -1,
    2,    -1,     2,     2,    -1,     2,    -1,    -1,    -1,    -1,
   -1,     2,    -1,    -1,    -1,     2,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,     2,    -1,
    2,     2,    -1,     2,    -1,    -1,    -1,    -1,     2,    -1,
    2,    -1,     2,     2,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     2,     2,    -1,    -1,    -1,     2,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
   -1,     2,     2,     2,     2,     2,     2,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     2,    -1,     2,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     2,
    2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,    -1,     2,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     2,     2,     2,    -1,    -1,    -1,     2,     2,    -1,
   -1,     2,     2,     2,     1,    -1,    -1,     2,     2,     2,
    2,    -1,    -1,    -1,    -1,     2,     2,    -1,    -1,     2,
   -1,     2,    -1,     2,    -1,     2,    -1,     2,     2,     1,
    2,    -1,    -1,    -1,     1,    -1,     2,     1,    -1,    -1,
    2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
   -1,    -1,    -1,     2,    -1,     2,     2,    -1,     2,    -1,
   -1,    -1,    -1,     2,    -1,     2,    -1,     2,     2,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     2,     2,    -1,    -1,
   -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     2,    -1,     2,     2,     2,     2,
    2,     2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
   -1,     2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     2,     2,     2,     2,     2,     2,
    2,     2,     2,     2,     2,     2,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
   -1,    -1,    -1,    -1,     2,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     2,     2,     2,    -1,
   -1,    -1,     2,     2,    -1,    -1,     2,     2,     2,    -1,
   -1,    -1,     2,     2,     2,     2,    -1,    -1,    -1,    -1,
    2,     2,    -1,    -1,     2,    -1,     2,    -1,     2,    -1,
    2,    -1,     2,     2,    -1,     2,    -1,    -1,    -1,    -1,
   -1,     2,    -1,    -1,    -1,     2,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,     2,    -1,
    2,     2,    -1,     2,    -1,    -1,    -1,    -1,     3,    -1,
    2,    -1,     2,     3,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     3,     2,    -1,    -1,    -1,     3,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,
   -1,     3,     3,     3,     3,     3,     3,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     3,    -1,     2,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
    3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,     3,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     3,     3,     3,    -1,    -1,    -1,     3,     3,    -1,
   -1,     3,     3,     3,    -1,    -1,    -1,     3,     3,     3,
    3,     1,    -1,    -1,    -1,     3,     3,    -1,    -1,     3,
   -1,     3,    -1,     3,    -1,     3,    -1,     3,     3,    -1,
    3,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
    3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
   -1,    -1,    -1,     3,    -1,     3,     3,    -1,     3,    -1,
   -1,    -1,    -1,     3,    -1,     3,    -1,     3,     3,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     3,     3,    -1,    -1,
   -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     3,    -1,     3,     3,     3,     3,
    3,     3,    -1,    -1,    -1,     1,    -1,    -1,    -1,     3,
    1,     3,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,     3,     3,     3,     3,     3,     3,
    3,     3,     3,     3,     3,     3,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
   -1,     1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
   -1,     0,    -1,    -1,     0,    -1,     3,     3,     3,    -1,
   -1,    -1,     3,     3,    -1,    -1,     3,     3,     3,     0,
    0,     0,     3,     3,     3,     3,     0,     0,     0,    -1,
    3,     3,    -1,    -1,     3,    -1,     3,    -1,     3,     0,
    3,    -1,     3,     3,    -1,     3,    -1,    -1,    -1,    -1,
   -1,     3,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,     3,    -1,    -1,    -1,     3,    -1,
    3,     3,    -1,     3,     1,    -1,    -1,    -1,    -1,     1,
    3,    -1,     3,    -1,    -1,     1,    -1,     1,     1,    -1,
   -1,    -1,     3,     1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     3,
    1,    -1,     1,     1,    -1,     1,     1,    -1,    -1,    -1,
    1,     1,     1,    -1,     1,    -1,     3,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,
   -1,     1,     1,    -1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,     1,    -1,    -1,     1,    -1,     1,    -1,
   -1,    -1,    -1,     1,     1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
    1,     1,    -1,     1,     1,    -1,     1,     1,    -1,    -1,
   -1,     1,     1,     1,    -1,     1,    -1,     1,    -1,     1,
    1,    -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,     1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,    -1,     1,     1,    -1,     1,     1,    -1,    -1,    -1,
   -1,     1,     1,    -1,     1,    -1,    -1,     1,    -1,     1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,     1,     1,    -1,     1,     1,    -1,     1,     1,    -1,
   -1,    -1,     1,     1,     1,    -1,     1,    -1,     1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,     1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,     1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,     1,    -1,     1,     1,    -1,     1,     1,    -1,    -1,
   -1,    -1,     1,     1,    -1,     1,    -1,    -1,     1,    -1,
    1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,     1,     1,    -1,     1,     1,    -1,     1,     1,
   -1,    -1,    -1,     1,     1,     1,    -1,     1,    -1,     1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,     1,    -1,     1,     1,    -1,     1,     1,    -1,
   -1,    -1,    -1,     1,     1,    -1,     1,    -1,    -1,     1,
   -1,     1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,     1,     1,    -1,     1,     1,    -1,     1,
    1,    -1,    -1,     1,     1,     1,     1,    -1,     1,    -1,
    1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,
   -1,    -1,     1,    -1,    -1,     0,    -1,    -1,     0,    -1,
   -1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     0,     0,     0,    -1,    -1,    -1,    -1,
    0,     0,     0,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,     1,
   -1,    -1,    -1,    -1,     1,     1,    -1,     1,    -1,    -1,
    1,    -1,     1,     1,    -1,    -1,    -1,     1,     1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,     1,    -1,    -1,     1,     1,    -1,     1,     1,    -1,
    1,     1,     0,    -1,    -1,     1,     1,     1,    -1,     1,
   -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,
    1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,
    1,    -1,    -1,    -1,    -1,     1,     1,    -1,     1,    -1,
   -1,     1,    -1,     1,    -1,    -1,    -1,    -1,     1,     1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,     1,
   -1,     1,     1,    -1,    -1,    -1,     1,     1,     1,    -1,
    1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,    -1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,
   -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,     1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,
    1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,     1,
   -1,     1,     1,     1,    -1,    -1,    -1,     1,    -1,    -1,
    1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,     0,    -1,    -1,     0,    -1,    -1,    -1,     1,    -1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,     0,
    0,     0,    -1,     1,    -1,     1,     0,     0,     0,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     2,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,     1,     1,    -1,    -1,    -1,     1,     1,    -1,    -1,
    1,     1,     1,    -1,    -1,    -1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,    -1,
    1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,    -1,
   -1,     1,     1,    -1,     1,     1,     1,     1,    -1,    -1,
   -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,
    1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,
   -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,     1,    -1,     1,
    1,    -1,     1,    -1,     1,    -1,    -1,     1,    -1,     1,
   -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,     1,     1,    -1,    -1,     1,     1,    -1,    -1,
    1,     1,     1,    -1,    -1,    -1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,    -1,
    1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,     1,     1,     1,     1,     1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,     1,    -1,    -1,
   -1,     1,     1,    -1,    -1,     1,     1,     1,    -1,    -1,
   -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,
    1,     1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,
   -1,     1,     1,    -1,     1,    -1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,    -1,     1,    -1,     1,
    1,    -1,     1,    -1,    -1,    -1,    -1,     2,    -1,     1,
   -1,     1,     2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2,     1,    -1,    -1,    -1,     2,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    2,     2,     2,     2,     2,     2,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     2,    -1,     1,     0,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     2,     2,
    2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     2,    -1,    -1,    -1,    -1,     2,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2,     2,     2,    -1,    -1,    -1,     2,     2,    -1,    -1,
    2,     2,     2,    -1,    -1,    -1,     2,     2,     2,     2,
   -1,    -1,    -1,    -1,     2,     2,    -1,    -1,     2,    -1,
    2,    -1,     2,    -1,     2,    -1,     2,     2,    -1,     2,
   -1,     1,    -1,     1,    -1,     2,    -1,    -1,     1,     2,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     2,    -1,
   -1,     1,     2,    -1,     2,     2,    -1,     2,    -1,    -1,
   -1,    -1,    -1,    -1,     2,    -1,     2,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     2,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     2,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,     1,    -1,    -1,     1,     1,     1,    -1,
   -1,    -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,     1,     1,     1,    -1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,     1,
    1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
   -1,    -1,     1,     1,     1,    -1,    -1,    -1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,
    1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,
   -1,     1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,     1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,    -1,    -1,
   -1,    -1,     1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,     1,
    1,    -1,    -1,    -1,     1,     1,     1,     1,    -1,    -1,
   -1,    -1,     1,     1,    -1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     0,    -1,    -1,     1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,     1,     1,     1,    -1,    -1,
   -1,    -1,     1,     1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,    -1,    -1,    -1,
    1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,     1,
   -1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,     1,    -1,     1,     1,    -1,     1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
    1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,     1,    -1,    -1,    -1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,    -1,
    1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,     1,
   -1,     1,     1,    -1,     1,     1,    -1,     1,     1,    -1,
   -1,    -1,     1,     1,     1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,     2,    -1,    -1,    -1,     1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,
    1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,
   -1,     1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,     1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,     1,    -1,    -1,
   -1,    -1,     1,     1,    -1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
   -1,     1,     1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,     1,    -1,
    1,    -1,     1,    -1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,
   -1,     1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,     1,     1,     1,    -1,    -1,    -1,     1,
   -1,     1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,     1,    -1,    -1,
    1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,     1,
   -1,     1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,     1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,
    1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,
   -1,     1,    -1,     1,    -1,    -1,     1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,     1,    -1,     1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,     1,    -1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,     1,    -1,     1,    -1,    -1,     1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,    -1,
   -1,     1,     1,    -1,     1,     1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,     1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,     1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,    -1,    -1,    -1,    -1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,     1,    -1,     1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,    -1,
    1,     1,     1,     1,     1,     1,    -1,     1,    -1,    -1,
    1,     1,     1,     1,    -1,    -1,     1,     1,    -1,    -1,
   -1,    -1,     1,    -1,     1,    -1,     1,    -1,    -1,     1,
    1,    -1,     1,     1,    -1,     1,    -1,    -1,    -1,     1,
   -1,    -1,     1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,     1,    -1,     1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,     1,     1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,     1,    -1,     1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,     1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,    -1,    -1,     1,     1,    -1,     1,     1,
   -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,
    1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
    1,    -1,     1,     1,    -1,    -1,    -1,     1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,     1,     1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
   -1,    -1,    -1,    -1,     1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,     1,    -1,
    1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
    1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,     1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   -1,    -1,     1,    -1,     1,     1,    -1,     1,    -1,     1,
   -1,     1,    -1,    -1,     1,    -1,     1,     1,    -1,    -1,
   -1,     1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    1,    -1,    -1,    -1,     1,    -1,     1,     1,    -1,     1,
   -1,    -1,    -1,     1,    -1,    -1,     1,    -1,     1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
   -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   -1,    -1,     1};

/* Base vector for popping attributes during error recovery. */
static const unsigned short yynapop_base[] = {
    0,     0,     1,     2,     3,     5,     7,     9,    11,    13,
   15,    23,    34,    44,    78,    88,    99,   109,   143,   153,
   95,   140,    32,   157,   188,    57,    93,    45,   147,   192,
  198,   202,   274,   278,   339,   343,   377,   387,   408,   418,
  422,   450,   454,   464,   485,   495,   499,   527,   531,   541,
  562,   572,   576,   604,   608,   638,   642,   652,    66,   395,
  659,   691,   837,   983,  1129,  1275,  1421,  1567,  1713,  1859,
  675,  2034,  2209,  2384,  2559,  2734,  2909,  3084,  3259,  3434,
 3609,  3784,  3959,  4134,  4309,  4484,  4659,  4834,  5009,  5184,
 5359,  5534,  5709,  5884,  6059,  6234,  3706,  6276,  6405,  6447,
 6576,  6618,  6747,  6789,  6918,  6960,  7089,  7131,  7260,  7302,
 7431,  7473,  2120,  1370,  4999,  3366,  3202,  4245,  1493,  5760,
 5786,  4810,  4320,  1988,  1361,  7648,   913,  3179,  1832,  5683,
 4313,  4866,  5428,  4296,   755,  5090,   482,  4144,  7823,  7998,
 8173,  8348,  8494,  8640,  8786,  1697,  3278,  4121,  8932,  9078,
 8192,  1903,  9224,  9370,  9516,  1651,  3687,  8313,  9662,  9808,
 9954, 10100,  8704,  9906,  7875,  7391, 10246, 10392,  5727,  4414,
10538,  4782, 10684,  4541, 10716,  9460, 10862,  6383, 11008, 11040,
 7518,  8177,  6750, 10224,  1768,  2669,  6169,  2980,  3102,  8480,
 7202,  7688,  4806,  4099,  8481,  2625,  1555,  1924,     0,  7926,
 2053,  3158,  8957,  5399,  6482,  5548,   679,  2008,  8493,   142,
 6200,  9240,  2042,  7903,  8164,  8360,   367,  8929,  3247,  7124,
  235,  8787,  8688,  3714,  7873,  4667,  7285,  1527,   140,  2671,
 2695, 10601,  5974,  2126,  4531, 10672,   708,  4350,  6348,   762,
 4699,   549,  1816,  3439,  1019,  6421, 10096,  1106,  2810,  7065,
 9018,  1926,  9024,  4757, 10124,  9292,  9576,  8181,  1020,   713,
 7164,  5109,  7883,  6063,  7519,  3490,  7531,  3452,  2625,  3581,
 5629,  9882,  3378,  6474,  6902,  3943,   125,  2553,  3737,  2238,
};

#if YYDEBUG != 0
const char *yytname [] =
{  "end-of-file", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "'!'", 
  0, 0, 0, "'%'", "'&'", 0, "'('", "')'", "'*'", "'+'", "','", 
  "'-'", "'.'", "'/'", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "':'", 
  "';'", "'<'", "'='", "'>'", "'?'", 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "'['", 
  0, "']'", "'^'", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "'{'", "'|'", "'}'", 
  "'~'", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "error", "IDENTIFIER", 
  "INTEGER_CONST", "FLOAT_CONST", "STRING_CONST", "ADDEQ", "SUBEQ", 
  "MULEQ", "DIVEQ", "MODEQ", "XOREQ", "ANDEQ", "OREQ", "SL", 
  "SR", "USR", "SLEQ", "SREQ", "USREQ", "EQ", "NOTEQ", "LTEQ", 
  "GTEQ", "ANDAND", "OROR", "PLUSPLUS", "MINUSMINUS", "FLOAT_TYPE", 
  "INT_TYPE", "OBJECT_TYPE", "STRING_TYPE", "VOID_TYPE", "STRUCT_TYPE", 
  "VECTOR_TYPE", "ENGINE_TYPE", "ACTION_TYPE", "OBJECT_SELF_CONST", 
  "OBJECT_INVALID_CONST", "BREAK", "CASE", "CONTINUE", "DEFAULT", 
  "DO", "ELSE", "FOR", "IF", "RETURN", "SWITCH", "WHILE", "CONST"
  
};
#endif

#include <stdio.h>
#include <stdlib.h>

#ifndef  YYALLOC
/* Initial state & attribute stacks size (in elems). */
#define  YYALLOC(size)  ::malloc (size)
#endif

#ifndef  YYREALLOC
/* Initial state & attribute stacks size (in elems). */
#define  YYREALLOC(ptr, size) ::realloc (ptr, size)
#endif

#ifndef  YYFREE
/* Initial state & attribute stacks size (in elems). */
#define  YYFREE(ptr)  ::free (ptr)
#endif

#ifndef  YYSTACK_SIZE
/* Initial state & attribute stacks size (in elems). */
#define  YYSTACK_SIZE  500
#endif

#if  YYSTACK_SIZE <= 0
#undef  YYSTACK_SIZE
#define  YYSTACK_SIZE  50
#endif

#ifndef  YYMAX_STACK_SIZE
/* Max. state & attribute stacks size (in elems). */
#define  YYMAX_STACK_SIZE  5000
#endif

#if  YYMAX_STACK_SIZE <= 0
#undef  YYMAX_STACK_SIZE
#define  YYMAX_STACK_SIZE  100
#endif

#ifndef  YYMAX_STACK_EXPAND_SIZE
/* Expansion step of state & attr. stacks size (in elems). */
#define  YYMAX_STACK_EXPAND_SIZE  500
#endif

#if  YYMAX_STACK_EXPAND_SIZE <= 0
#undef  YYMAX_STACK_EXPAND_SIZE
#define  YYMAX_STACK_EXPAND_SIZE  10
#endif

#ifndef  YYERROR_MESSAGE
#define  YYERROR_MESSAGE "syntax error"
#endif

#define YYEMPTY  (-2)

#define YYEOF  0

#define yyclearin do {if (yychar != YYEMPTY) yyprev_char = yychar; yychar = YYEMPTY;} while (0)

#define YYABORT goto yyabort

#define YYACCEPT goto yyaccept

#ifndef  YYERR_RECOVERY_MATCHES
#define  YYERR_RECOVERY_MATCHES  3
#endif

#if  YYERR_RECOVERY_MATCHES <= 0
#undef  YYERR_RECOVERY_MATCHES
#define  YYERR_RECOVERY_MATCHES  1
#endif

#define YYERROR  goto yyerrlab

#define yyerrok  yyerr_status = (-1)

#define YYRECOVERING()  (yyerr_status > 0)

#define YYTOKEN_NAME(code)\
  ((code) < 0 || (code) > YYLAST_TOKEN_CODE || yytname [code] == 0\
   ? "illegal-code" : yytname [code])

int yyparser::yyexpand_states_stack (int **start, int **end, int **top)
{
  int size = *end - *start + 1;
  int new_size = size + YYMAX_STACK_EXPAND_SIZE;
  int *new_start;

#if YYDEBUG != 0
  if (yydebug)
    fprintf (stderr, "Expanding states stack (old size - %d, new size - %d)\n", size, new_size);
#endif
  if (new_size > YYMAX_STACK_SIZE)
    {
      yyerror ("states stack is overfull");
      return 1;
    }
  new_start = (int*) YYREALLOC (*start, new_size * sizeof (int));
  if (new_start == NULL)
    {
      yyerror ("no memory for states stack expansion");
      return 1;
    }
  *end = new_start + (new_size - 1);
  *top = *top + (new_start - *start);
  *start = new_start;
  return 0;
}

int yyparser::yyexpand_attributes_stack (YYSTYPE **start, YYSTYPE **end, YYSTYPE **top)
{
  int size = *end - *start + 1;
  int new_size = size + YYMAX_STACK_EXPAND_SIZE;
  YYSTYPE *new_start;

#if YYDEBUG != 0
  if (yydebug)
    fprintf (stderr, "Expanding attributes stack (old size - %d, new size - %d)\n", size, new_size);
#endif
  if (new_size > YYMAX_STACK_SIZE)
    {
      yyerror ("attributes stack is overfull");
      return 1;
    }
  new_start = (YYSTYPE*) YYREALLOC (*start, new_size * sizeof (YYSTYPE));
  if (new_start == NULL)
    {
      yyerror ("no memory for attributes stack expansion");
      return 1;
    }
  *end = new_start + (new_size - 1);
  *top = *top + (new_start - *start);
  *start = new_start;
  return 0;
}

int yyparser::yyparse (void)
{
  int yystate;
  int *yystates;
  YYSTYPE *yyattributes;
  int yynerrs;      /* fixed syntactic errors number */
  int yyprev_char;
  int yychar1;
  int yytemp;
  long int yyerr_status;  /* tokens number to shift before error messages enabled */
  YYSTYPE yyval;
  int *yystates_end;
  int *yystates_top;
  YYSTYPE *yyattributes_end;
  YYSTYPE *yyattributes_top;

  yyval = NULL;
  yystates = NULL;
  yyattributes = NULL;

#if YYDEBUG != 0
  if (yydebug)
    fprintf (stderr, "Starting parse\n");
#endif
  yystates = (int *) YYALLOC (YYSTACK_SIZE * sizeof (int));
  if (yystates == NULL)
    {
      yyerror ("no memory for states stack");
      YYABORT;
    }
  yyattributes = (YYSTYPE *) YYALLOC (YYSTACK_SIZE * sizeof (YYSTYPE));
  if (yyattributes == NULL)
    {
      yyerror ("no memory for attributes stack");
      YYABORT;
    }
  yystates_end = yystates + YYSTACK_SIZE - 1;
  yystates_top = yystates - 1;
  yyattributes_end = yyattributes + YYSTACK_SIZE - 1;
  yyattributes_top = yyattributes - 1;
  yynerrs = 0;
  yychar = YYEMPTY;
  yystate = 0; /* Start state */
  (*++yystates_top) = yystate;
  ++yyattributes_top;
  yyerr_status = (-1);
  for (;;)
    {
#if YYDEBUG != 0
      if (yydebug)
        fprintf (stderr, "Entering state %d\n", yystate);
#endif
      yytemp = yyabase [yystate];
      if (yytemp == YYNO_ACTION_BASE)
        yytemp = yyadefault [yystate];
      else
        {
          if (yychar == YYEMPTY)
            {
              yychar = yylex ();
#if YYDEBUG != 0
              if (yydebug)
                fprintf (stderr, "Reading a token %d (%s)\n",
                         yychar, YYTOKEN_NAME (yychar));
#endif
            }
#if YYDEBUG != 0
          if (yydebug)
            {
              fprintf (stderr, "Now input is at %d (%s)",
                       yychar, YYTOKEN_NAME (yychar));
              fprintf (stderr, "\n");
            }
#endif
          if (yychar <= 0)
            {
              yychar1 = yytranslate [0];
              yychar = YYEOF;  /* To prevent repeated reading EOF */
            }
          else if (yychar > YYLAST_TOKEN_CODE)
            YYABORT;
          else
            yychar1 = yytranslate [yychar];
          yytemp += yychar1;
          if (yyacheck [yytemp] != yystate)
            yytemp = yyadefault [yystate];
          else
            yytemp = yyaction [yytemp];
        }
      switch (yytemp)
        {
        case YYNO_ACTION:
          /* Here error processing and error recovery. */
          if (yyerr_status <= 0)
            {
              yyerror (YYERROR_MESSAGE);
yyerrlab:
              ++yynerrs;
              if (!yypushed [yystate])
                {
                  if (yystates_top >= yystates_end
                      && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
                    YYABORT;
                  (*++yystates_top) = yystate;
                }
            }
          if (yyerr_status < YYERR_RECOVERY_MATCHES)
            {
              yytemp = yyabase [yystate];
              yyerr_status = YYERR_RECOVERY_MATCHES;
              for (;;)
                {
                  if (yytemp != YYNO_ACTION_BASE
                      && yyacheck [yytemp + YYERRCLASS] == yystate
                      && yyaction [yytemp + YYERRCLASS] < 280/* after the last shift */)
                    {
                      /* shift on error */
#if YYDEBUG != 0
                      if (yydebug)
                        fprintf (stderr,
                                 "state %d, error shifting to state %d\n",
                                 yystate, yyaction [yytemp + YYERRCLASS]);
#endif
                      yystate = yyaction [yytemp + YYERRCLASS];
                      if (yypushed [yystate])
                        {
                         if (yystates_top >= yystates_end
                             && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
                           YYABORT;
                         (*++yystates_top) = yystate;
                         if (yyattributes_top >= yyattributes_end
                             && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
                           YYABORT;
                         (*++yyattributes_top) = yyval;
                        }
                      break;
                    }
                  if (yystates_top <= yystates)
                    YYABORT;
                  yystate = *--yystates_top;
                  yytemp = yyabase [yystate];
                  yyattributes_top
                    -= yynattr_pop [yynapop_base [yystates_top [1]]
                                    + *yystates_top];
                }
            }
          else
            {
              if (yychar == YYEOF)
                YYABORT;
#if YYDEBUG != 0
              if (yydebug)
                 fprintf
                   (stderr,
                    "state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, YYTOKEN_NAME (yychar));
#endif
              yyprev_char = yychar;
              yychar = YYEMPTY;
            }
          break;
        case YYFINAL:
          YYACCEPT;
          break;
        /* shifts */
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 22:
        case 24:
        case 25:
        case 29:
        case 40:
        case 45:
        case 46:
        case 47:
        case 51:
        case 56:
        case 83:
        case 84:
        case 86:
        case 87:
        case 89:
        case 90:
        case 92:
        case 93:
        case 95:
        case 124:
        case 127:
        case 129:
        case 138:
        case 139:
        case 140:
        case 184:
        case 186:
        case 189:
        case 193:
        case 197:
        case 199:
        case 202:
        case 203:
        case 210:
        case 212:
        case 213:
        case 215:
        case 219:
        case 221:
        case 222:
        case 224:
        case 230:
        case 231:
        case 233:
        case 235:
        case 237:
        case 239:
        case 247:
        case 250:
        case 257:
        case 266:
        case 273:
        case 274:
        case 275:
        case 277:
#if YYDEBUG != 0
          if (yydebug)
            fprintf (stderr, "Shifting token %d (%s)\n", yychar,
                     yytname[yychar]);
#endif

          yystate = yytemp;
          yyerr_status--;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          break;
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 85:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 125:
        case 130:
        case 142:
        case 143:
        case 144:
        case 148:
        case 149:
        case 152:
        case 153:
        case 154:
        case 158:
        case 159:
        case 160:
        case 161:
        case 166:
        case 167:
        case 170:
        case 172:
        case 174:
        case 176:
        case 178:
        case 179:
        case 181:
        case 191:
        case 204:
        case 206:
        case 207:
        case 209:
        case 216:
        case 218:
        case 228:
        case 245:
        case 262:
#if YYDEBUG != 0
          if (yydebug)
            fprintf (stderr, "Shifting token %d (%s)\n", yychar,
                     yytname[yychar]);
#endif

          yystate = yytemp;
          yyerr_status--;
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          (*++yystates_top) = yystate;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          break;
        case 19:
        case 79:
        case 80:
        case 81:
        case 82:
        case 88:
        case 91:
        case 94:
        case 141:
        case 240:
        case 244:
        case 254:
        case 261:
        case 267:
#if YYDEBUG != 0
          if (yydebug)
            fprintf (stderr, "Shifting token %d (%s)\n", yychar,
                     yytname[yychar]);
#endif

          yystate = yytemp;
          yyerr_status--;
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yylval;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          break;
        case 3:
        case 53:
        case 248:
        case 255:
        case 264:
        case 268:
#if YYDEBUG != 0
          if (yydebug)
            fprintf (stderr, "Shifting token %d (%s)\n", yychar,
                     yytname[yychar]);
#endif

          yystate = yytemp;
          yyerr_status--;
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          (*++yystates_top) = yystate;
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yylval;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          break;
        /* reduces */
        case 315:
          /*              external_declaration : function_definition .  (167) */
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 66];
          (*++yyattributes_top) = yyval;
          break;
        case 316:
          /*              external_declaration : function_prototype .  (168) */
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 66];
          (*++yyattributes_top) = yyval;
          break;
        case 317:
          /*              external_declaration : declaration .  (169) */
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 66];
          (*++yyattributes_top) = yyval;
          break;
        case 318:
          /*              external_declaration : struct_definition .  (170) */
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 66];
          (*++yyattributes_top) = yyval;
          break;
        case 319:
          /*              struct_type_start : STRUCT_TYPE .  (85) */

#line 513 "nscparser.y"
{ 
			NscBuildSaveLine (0); 
		}

#line 2600 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 21];
          break;
        case 320:
          /*              qualified_type_specifier : type_specifier .  (75) */

#line 466 "nscparser.y"
{
			yyval = yyattributes_top [0]; 
			NscBuildSaveLine (0); 
		}

#line 2612 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 18];
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 321:
          /*              type_specifier : VOID_TYPE .  (76) */

#line 474 "nscparser.y"
{
			yyval = NscBuildType (VOID_TYPE, NULL); 
		}

#line 2629 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 20];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 322:
          /*              type_specifier : INT_TYPE .  (77) */

#line 478 "nscparser.y"
{
			yyval = NscBuildType (INT_TYPE, NULL); 
		}

#line 2644 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 20];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 323:
          /*              type_specifier : FLOAT_TYPE .  (78) */

#line 482 "nscparser.y"
{
			yyval = NscBuildType (FLOAT_TYPE, NULL); 
		}

#line 2659 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 20];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 324:
          /*              type_specifier : OBJECT_TYPE .  (79) */

#line 486 "nscparser.y"
{ 
			yyval = NscBuildType (OBJECT_TYPE, NULL); 
		}

#line 2674 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 20];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 325:
          /*              type_specifier : STRING_TYPE .  (80) */

#line 490 "nscparser.y"
{ 
			yyval = NscBuildType (STRING_TYPE, NULL); 
		}

#line 2689 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 20];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 326:
          /*              type_specifier : ACTION_TYPE .  (81) */

#line 494 "nscparser.y"
{ 
			yyval = NscBuildType (ACTION_TYPE, NULL); 
		}

#line 2704 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 20];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 327:
          /*              type_specifier : VECTOR_TYPE .  (82) */

#line 498 "nscparser.y"
{ 
			yyval = NscBuildType (VECTOR_TYPE, NULL); 
		}

#line 2719 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 20];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 328:
          /*              type_specifier : ENGINE_TYPE .  (84) */

#line 506 "nscparser.y"
{
			yyval = NscBuildType (ENGINE_TYPE, yyattributes_top [0]); 
		}

#line 2734 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 20];
          (*++yyattributes_top) = yyval;
          break;
        case 329:
          /*              function_definition : function_declarator compound_statement .  (147) */

#line 868 "nscparser.y"
{
			yyval = NscBuildFunctionDef (yyattributes_top [-1], yyattributes_top [0]);
		}

#line 2747 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 55];
          (*++yyattributes_top) = yyval;
          break;
        case 330:
          /*              function_prototype : function_declarator ';'(59) .  (148) */

#line 875 "nscparser.y"
{
			yyval = NscBuildFunctionPrototype (yyattributes_top [0]); 
		}

#line 2761 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 57];
          (*++yyattributes_top) = yyval;
          break;
        case 331:
          /*              compound_statement_start : '{'(123) .  (104) */

#line 622 "nscparser.y"
{
			yyval = NscBuildStatementFence (); 
		}

#line 2775 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 35];
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          (*++yystates_top) = yystate;
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 332:
          /*              compound_statement : compound_statement_start '}'(125) .  (102) */

#line 611 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, NULL, yyattributes_top [0]); 
		}

#line 2794 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 26];
          (*++yyattributes_top) = yyval;
          break;
        case 333:
          /*              statement : non_blank_statement .  (86) */

#line 526 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 2808 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 22];
          (*++yyattributes_top) = yyval;
          break;
        case 334:
          /*              statement : ';'(59) .  (87) */

#line 530 "nscparser.y"
{ 
			NscBuildSaveLine (0); 
			yyval = NscBuildMarkLine (0, NscBuildStatement (NULL, NULL, NULL)); 
		}

#line 2822 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 22];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 335:
          /*              non_blank_statement : labeled_statement .  (90) */

#line 550 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, yyattributes_top [0], NULL); 
		}

#line 2837 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 23];
          (*++yyattributes_top) = yyval;
          break;
        case 336:
          /*              non_blank_statement : compound_statement .  (91) */

#line 554 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, yyattributes_top [0], NULL); 
		}

#line 2850 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 23];
          (*++yyattributes_top) = yyval;
          break;
        case 337:
          /*              non_blank_statement : expression_statement .  (92) */

#line 558 "nscparser.y"
{
			yyval = NscBuildMarkLine (0, NscBuildStatement (NULL, yyattributes_top [0], NULL));
		}

#line 2863 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 23];
          (*++yyattributes_top) = yyval;
          break;
        case 338:
          /*              non_blank_statement : selection_statement .  (93) */

#line 562 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, yyattributes_top [0], NULL);
		}

#line 2876 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 23];
          (*++yyattributes_top) = yyval;
          break;
        case 339:
          /*              non_blank_statement : iteration_statement .  (94) */

#line 566 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, yyattributes_top [0], NULL);
		}

#line 2889 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 23];
          (*++yyattributes_top) = yyval;
          break;
        case 340:
          /*              non_blank_statement : jump_statement .  (95) */

#line 570 "nscparser.y"
{
			yyval = NscBuildMarkLine (0, NscBuildStatement (NULL, yyattributes_top [0], NULL));
		}

#line 2902 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 23];
          (*++yyattributes_top) = yyval;
          break;
        case 341:
          /*              non_blank_statement : declaration .  (96) */

#line 574 "nscparser.y"
{
			yyval = NscBuildMarkLine (0, NscBuildStatement (NULL, yyattributes_top [0], NULL)); 
		}

#line 2915 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 23];
          (*++yyattributes_top) = yyval;
          break;
        case 342:
          /*              return_start : RETURN .  (140) */

#line 813 "nscparser.y"
{ 
			NscBuildSaveLine (0); 
		}

#line 2928 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 51];
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          (*++yystates_top) = yystate;
          break;
        case 343:
          /*              do_start : DO .  (133) */

#line 781 "nscparser.y"
{ 
			yyval = NscBuild5Block (DO, NULL, 1, NULL, NULL, NULL, NULL, NULL); 
		}

#line 2943 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 44];
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          (*++yystates_top) = yystate;
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 344:
          /*              expression_statement : error .  (109) */

#line 650 "nscparser.y"
{
			yyval = NULL;
			if (NscBuildSyntaxError (yychar, yylval))
				YYABORT;
			while (yychar != EOF && yychar != ';' && yychar != '{' && yychar != '}')
			{
				if (yylval != NULL)
					yylval; //FIXME
				yyclearin;
				yychar = yylex ();
			}
			if (yychar == ';')
				yyclearin;
		}

#line 2973 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 27];
          (*++yyattributes_top) = yyval;
          break;
        case 345:
          /*              labeled_statement : case_statement .  (97) */

#line 587 "nscparser.y"
{
			yyval = yyattributes_top [0]; 
		}

#line 2987 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 25];
          (*++yyattributes_top) = yyval;
          break;
        case 346:
          /*              case_statement : DEFAULT $3 ':'(58) .  (100) */

#line 598 "nscparser.y"
{
			yyval = NscBuildCase (DEFAULT, NULL); 
		}

#line 3000 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 32];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 347:
          /*              conditional_expression : logical_or_expression .  (56) */

#line 375 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3015 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 16];
          (*++yyattributes_top) = yyval;
          break;
        case 348:
          /*              logical_or_expression : logical_and_expression .  (54) */

#line 364 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3028 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 15];
          (*++yyattributes_top) = yyval;
          break;
        case 349:
          /*              logical_and_expression : inclusive_or_expression .  (52) */

#line 353 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3041 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 14];
          (*++yyattributes_top) = yyval;
          break;
        case 350:
          /*              inclusive_or_expression : exclusive_or_expression .  (50) */

#line 342 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3054 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 13];
          (*++yyattributes_top) = yyval;
          break;
        case 351:
          /*              exclusive_or_expression : and_expression .  (48) */

#line 331 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3067 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 12];
          (*++yyattributes_top) = yyval;
          break;
        case 352:
          /*              and_expression : equality_expression .  (46) */

#line 320 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3080 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 11];
          (*++yyattributes_top) = yyval;
          break;
        case 353:
          /*              equality_expression : relational_expression .  (43) */

#line 305 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3093 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 10];
          (*++yyattributes_top) = yyval;
          break;
        case 354:
          /*              relational_expression : shift_expression .  (38) */

#line 282 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3106 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 9];
          (*++yyattributes_top) = yyval;
          break;
        case 355:
          /*              shift_expression : additive_expression .  (34) */

#line 263 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3119 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 8];
          (*++yyattributes_top) = yyval;
          break;
        case 356:
          /*              additive_expression : multiplicative_expression .  (31) */

#line 248 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3132 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 7];
          (*++yyattributes_top) = yyval;
          break;
        case 357:
          /*              multiplicative_expression : unary_expression .  (27) */

#line 229 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3145 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 6];
          (*++yyattributes_top) = yyval;
          break;
        case 358:
          /*              unary_expression : postfix_expression .  (20) */

#line 198 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3158 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 5];
          (*++yyattributes_top) = yyval;
          break;
        case 359:
          /*              postfix_expression : primary_expression .  (12) */

#line 160 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3171 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 2];
          (*++yyattributes_top) = yyval;
          break;
        case 360:
          /*              primary_expression : IDENTIFIER .  (1) */

#line 114 "nscparser.y"
{ 
			yyval = NscBuildIdentifier (yyattributes_top [0]); 
		}

#line 3184 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 361:
          /*              primary_expression : INTEGER_CONST .  (2) */

#line 118 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3197 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 362:
          /*              primary_expression : FLOAT_CONST .  (3) */

#line 122 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3210 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 363:
          /*              primary_expression : STRING_CONST .  (4) */

#line 126 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3223 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 364:
          /*              primary_expression : OBJECT_SELF_CONST .  (5) */

#line 130 "nscparser.y"
{ 
			yyval = NscBuildObjectConstant (0); 
		}

#line 3236 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 0];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 365:
          /*              primary_expression : OBJECT_INVALID_CONST .  (6) */

#line 134 "nscparser.y"
{ 
			yyval = NscBuildObjectConstant (1); 
		}

#line 3251 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 0];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 366:
          /*              primary_expression : '['(91) ']'(93) .  (8) */

#line 141 "nscparser.y"
{ 
			yyval = NscBuildVectorConstant (NULL, NULL, NULL);
		}

#line 3266 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 0];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 367:
          /*              primary_expression : '['(91) FLOAT_CONST ']'(93) .  (9) */

#line 145 "nscparser.y"
{ 
			yyval = NscBuildVectorConstant (yyattributes_top [0], NULL, NULL); 
		}

#line 3281 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 368:
          /*              primary_expression : '['(91) FLOAT_CONST ','(44) FLOAT_CONST ']'(93) .  (10) */

#line 149 "nscparser.y"
{ 
			yyval = NscBuildVectorConstant (yyattributes_top [-1], yyattributes_top [0], NULL); 
		}

#line 3294 "nscparser.cpp"
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 369:
          /*              primary_expression : '['(91) FLOAT_CONST ','(44) FLOAT_CONST ','(44) FLOAT_CONST ']'(93) .  (11) */

#line 153 "nscparser.y"
{ 
			yyval = NscBuildVectorConstant (yyattributes_top [-2], yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3307 "nscparser.cpp"
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 370:
          /*              expression : assignment_expression .  (71) */

#line 441 "nscparser.y"
{
			yyval = NscBuildExpression (NULL, yyattributes_top [0]); 
		}

#line 3320 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 1];
          (*++yyattributes_top) = yyval;
          break;
        case 371:
          /*              assignment_expression : conditional_expression .  (58) */

#line 386 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3333 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 372:
          /*              multiplicative_expression : unary_expression .  (27) */

#line 229 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; 
		}

#line 3346 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 6];
          (*++yyattributes_top) = yyval;
          break;
        case 373:
          /*              assignment_expression : unary_expression OREQ assignment_expression .  (70) */

#line 434 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (OREQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3359 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 374:
          /*              assignment_expression : unary_expression XOREQ assignment_expression .  (69) */

#line 430 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (XOREQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3373 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 375:
          /*              assignment_expression : unary_expression ANDEQ assignment_expression .  (68) */

#line 426 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (ANDEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3387 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 376:
          /*              assignment_expression : unary_expression USREQ assignment_expression .  (67) */

#line 422 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (USREQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3401 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 377:
          /*              assignment_expression : unary_expression SREQ assignment_expression .  (66) */

#line 418 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (SREQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3415 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 378:
          /*              assignment_expression : unary_expression SLEQ assignment_expression .  (65) */

#line 414 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (SLEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3429 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 379:
          /*              assignment_expression : unary_expression SUBEQ assignment_expression .  (64) */

#line 410 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (SUBEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3443 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 380:
          /*              assignment_expression : unary_expression ADDEQ assignment_expression .  (63) */

#line 406 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (ADDEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3457 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 381:
          /*              assignment_expression : unary_expression MODEQ assignment_expression .  (62) */

#line 402 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (MODEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3471 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 382:
          /*              assignment_expression : unary_expression DIVEQ assignment_expression .  (61) */

#line 398 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (DIVEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3485 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 383:
          /*              assignment_expression : unary_expression MULEQ assignment_expression .  (60) */

#line 394 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (MULEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3499 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 384:
          /*              assignment_expression : unary_expression '='(61) assignment_expression .  (59) */

#line 390 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('=', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3513 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 4];
          (*++yyattributes_top) = yyval;
          break;
        case 385:
          /*              primary_expression : '('(40) expression ')'(41) .  (7) */

#line 138 "nscparser.y"
{ 
			yyval = yyattributes_top [0]; }

#line 3526 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 0];
          (*++yyattributes_top) = yyval;
          break;
        case 386:
          /*              postfix_expression : IDENTIFIER '('(40) ')'(41) .  (14) */

#line 168 "nscparser.y"
{ 
			yyval = NscBuildCall (yyattributes_top [0], NULL); 
		}

#line 3540 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 2];
          (*++yyattributes_top) = yyval;
          break;
        case 387:
          /*              postfix_expression : IDENTIFIER '('(40) argument_expression_list ')'(41) .  (13) */

#line 164 "nscparser.y"
{ 
			yyval = NscBuildCall (yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3554 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 2];
          (*++yyattributes_top) = yyval;
          break;
        case 388:
          /*              unary_expression : '!'(33) unary_expression .  (26) */

#line 222 "nscparser.y"
{ 
			yyval = NscBuildUnaryOp ('!', yyattributes_top [0]); 
		}

#line 3568 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 5];
          (*++yyattributes_top) = yyval;
          break;
        case 389:
          /*              unary_expression : '~'(126) unary_expression .  (25) */

#line 218 "nscparser.y"
{ 
			yyval = NscBuildUnaryOp ('~', yyattributes_top [0]); 
		}

#line 3582 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 5];
          (*++yyattributes_top) = yyval;
          break;
        case 390:
          /*              unary_expression : '-'(45) unary_expression .  (24) */

#line 214 "nscparser.y"
{ 
			yyval = NscBuildUnaryOp ('-', yyattributes_top [0]); 
		}

#line 3596 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 5];
          (*++yyattributes_top) = yyval;
          break;
        case 391:
          /*              unary_expression : '+'(43) unary_expression .  (23) */

#line 210 "nscparser.y"
{ 
			yyval = NscBuildUnaryOp ('+', yyattributes_top [0]);
		}

#line 3610 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 5];
          (*++yyattributes_top) = yyval;
          break;
        case 392:
          /*              unary_expression : MINUSMINUS unary_expression .  (22) */

#line 206 "nscparser.y"
{ 
			yyval = NscBuildPlusMinus (yyattributes_top [0], 0, 1); 
		}

#line 3624 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 5];
          (*++yyattributes_top) = yyval;
          break;
        case 393:
          /*              unary_expression : PLUSPLUS unary_expression .  (21) */

#line 202 "nscparser.y"
{ 
			yyval = NscBuildPlusMinus (yyattributes_top [0], 1, 1); 
		}

#line 3638 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 5];
          (*++yyattributes_top) = yyval;
          break;
        case 394:
          /*              postfix_expression : postfix_expression PLUSPLUS .  (16) */

#line 176 "nscparser.y"
{ 
			yyval = NscBuildPlusMinus (yyattributes_top [0], 1, 0); 
		}

#line 3652 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 2];
          (*++yyattributes_top) = yyval;
          break;
        case 395:
          /*              postfix_expression : postfix_expression MINUSMINUS .  (17) */

#line 180 "nscparser.y"
{ 
			yyval = NscBuildPlusMinus (yyattributes_top [0], 0, 0);
		}

#line 3665 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 2];
          (*++yyattributes_top) = yyval;
          break;
        case 396:
          /*              postfix_expression : postfix_expression '.'(46) IDENTIFIER .  (15) */

#line 172 "nscparser.y"
{ 
			yyval = NscBuildElementAccess (yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3678 "nscparser.cpp"
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 2];
          (*++yyattributes_top) = yyval;
          break;
        case 397:
          /*              multiplicative_expression : multiplicative_expression '%'(37) unary_expression .  (30) */

#line 241 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('%', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3691 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 6];
          (*++yyattributes_top) = yyval;
          break;
        case 398:
          /*              multiplicative_expression : multiplicative_expression '/'(47) unary_expression .  (29) */

#line 237 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('/', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3705 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 6];
          (*++yyattributes_top) = yyval;
          break;
        case 399:
          /*              multiplicative_expression : multiplicative_expression '*'(42) unary_expression .  (28) */

#line 233 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('*', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3719 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 6];
          (*++yyattributes_top) = yyval;
          break;
        case 400:
          /*              additive_expression : additive_expression '-'(45) multiplicative_expression .  (33) */

#line 256 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('-', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3733 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 7];
          (*++yyattributes_top) = yyval;
          break;
        case 401:
          /*              additive_expression : additive_expression '+'(43) multiplicative_expression .  (32) */

#line 252 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('+', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3747 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 7];
          (*++yyattributes_top) = yyval;
          break;
        case 402:
          /*              shift_expression : shift_expression USR additive_expression .  (37) */

#line 275 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (USR, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3761 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 8];
          (*++yyattributes_top) = yyval;
          break;
        case 403:
          /*              shift_expression : shift_expression SR additive_expression .  (36) */

#line 271 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (SR, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3775 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 8];
          (*++yyattributes_top) = yyval;
          break;
        case 404:
          /*              shift_expression : shift_expression SL additive_expression .  (35) */

#line 267 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (SL, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3789 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 8];
          (*++yyattributes_top) = yyval;
          break;
        case 405:
          /*              relational_expression : relational_expression GTEQ shift_expression .  (42) */

#line 298 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (GTEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3803 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 9];
          (*++yyattributes_top) = yyval;
          break;
        case 406:
          /*              relational_expression : relational_expression LTEQ shift_expression .  (41) */

#line 294 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (LTEQ, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3817 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 9];
          (*++yyattributes_top) = yyval;
          break;
        case 407:
          /*              relational_expression : relational_expression '>'(62) shift_expression .  (40) */

#line 290 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('>', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3831 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 9];
          (*++yyattributes_top) = yyval;
          break;
        case 408:
          /*              relational_expression : relational_expression '<'(60) shift_expression .  (39) */

#line 286 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('<', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3845 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 9];
          (*++yyattributes_top) = yyval;
          break;
        case 409:
          /*              equality_expression : equality_expression NOTEQ relational_expression .  (45) */

#line 313 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (NOTEQ, yyattributes_top [-1], yyattributes_top [0]);
		}

#line 3859 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 10];
          (*++yyattributes_top) = yyval;
          break;
        case 410:
          /*              equality_expression : equality_expression EQ relational_expression .  (44) */

#line 309 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp (EQ, yyattributes_top [-1], yyattributes_top [0]);
		}

#line 3873 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 10];
          (*++yyattributes_top) = yyval;
          break;
        case 411:
          /*              and_expression : and_expression '&'(38) equality_expression .  (47) */

#line 324 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('&', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3887 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 11];
          (*++yyattributes_top) = yyval;
          break;
        case 412:
          /*              exclusive_or_expression : exclusive_or_expression '^'(94) and_expression .  (49) */

#line 335 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('^', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3901 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 12];
          (*++yyattributes_top) = yyval;
          break;
        case 413:
          /*              inclusive_or_expression : inclusive_or_expression '|'(124) exclusive_or_expression .  (51) */

#line 346 "nscparser.y"
{ 
			yyval = NscBuildBinaryOp ('|', yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3915 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 13];
          (*++yyattributes_top) = yyval;
          break;
        case 414:
          /*              logical_and_expression : logical_and_expression ANDAND inclusive_or_expression .  (53) */

#line 357 "nscparser.y"
{ 
			yyval = NscBuildLogicalOp (ANDAND, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3929 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 14];
          (*++yyattributes_top) = yyval;
          break;
        case 415:
          /*              conditional_expression : logical_or_expression '?'(63) expression ':'(58) conditional_expression .  (57) */

#line 379 "nscparser.y"
{ 
			yyval = NscBuildConditional (yyattributes_top [-2], yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3943 "nscparser.cpp"
          yystates_top -= 2;
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 16];
          (*++yyattributes_top) = yyval;
          break;
        case 416:
          /*              logical_or_expression : logical_or_expression OROR logical_and_expression .  (55) */

#line 368 "nscparser.y"
{ 
			yyval = NscBuildLogicalOp (OROR, yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 3957 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 15];
          (*++yyattributes_top) = yyval;
          break;
        case 417:
          /*              case_statement : CASE $2 constant_expression ':'(58) .  (98) */

#line 594 "nscparser.y"
{ 
			yyval = NscBuildCase (CASE, yyattributes_top [0]); 
		}

#line 3971 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 32];
          (*++yyattributes_top) = yyval;
          break;
        case 418:
          /*              expression_statement : $4 expression ';'(59) .  (107) */

#line 646 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, yyattributes_top [0], NULL); 
		}

#line 3985 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 27];
          (*++yyattributes_top) = yyval;
          break;
        case 419:
          /*              if_start : IF '('(40) $5 expression ')'(41) .  (114) */

#line 697 "nscparser.y"
{ 
			yyval = NscBuild5Block (IF, NULL, 1, NULL, yyattributes_top [0], NULL, NULL, NULL); 
		}

#line 3999 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 38];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 420:
          /*              switch_start : SWITCH $6 '('(40) expression ')'(41) .  (116) */

#line 704 "nscparser.y"
{
			yyval = NscBuild5Block (SWITCH, NULL, 1, NULL, yyattributes_top [0], NULL, NULL, NULL); 
		}

#line 4014 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 40];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 421:
          /*              selection_statement : switch_start statement .  (112) */

#line 682 "nscparser.y"
{
			yyval = NscBuild5Block (SWITCH, yyattributes_top [-1], 0, NULL, NULL, NULL, yyattributes_top [0], NULL); 
		}

#line 4029 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 28];
          (*++yyattributes_top) = yyval;
          break;
        case 422:
          /*              selection_statement : if_else_start statement_blank_error .  (111) */

#line 678 "nscparser.y"
{
			yyval = NscBuild5Block (IF, yyattributes_top [-1], 0, NULL, NULL, NULL, NULL, yyattributes_top [0]);
		}

#line 4043 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 28];
          (*++yyattributes_top) = yyval;
          break;
        case 423:
          /*              statement_blank_error : non_blank_statement .  (88) */

#line 538 "nscparser.y"
{
			yyval = yyattributes_top [0]; 
		}

#line 4057 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 24];
          (*++yyattributes_top) = yyval;
          break;
        case 424:
          /*              statement_blank_error : ';'(59) .  (89) */

#line 542 "nscparser.y"
{
			NscBuildSaveLine (0); 
			yyval = NscBuildMarkLine (0, NscBuildBlankStatement ()); 
		}

#line 4071 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 24];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 425:
          /*              selection_statement : if_start statement_blank_error .  (110) */

#line 674 "nscparser.y"
{ 
			yyval = NscBuild5Block (IF, yyattributes_top [-1], 0, NULL, NULL, NULL, yyattributes_top [0], NULL); 
		}

#line 4086 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 28];
          (*++yyattributes_top) = yyval;
          break;
        case 426:
          /*              if_else_start : if_start statement_blank_error ELSE .  (113) */

#line 689 "nscparser.y"
{
			NscBuildSaveLine (0); 
			yyval = NscBuild5Block (IF, yyattributes_top [-1], 1, NULL, NULL, NULL, yyattributes_top [0], NULL); 
		}

#line 4101 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 39];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 427:
          /*              while_start : WHILE '('(40) $8 expression ')'(41) .  (131) */

#line 774 "nscparser.y"
{ 
			yyval = NscBuild5Block (WHILE, NULL, 1, NULL, yyattributes_top [0], NULL, NULL, NULL); 
		}

#line 4116 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 43];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 428:
          /*              for_start_start : FOR '('(40) .  (130) */

#line 767 "nscparser.y"
{
			NscBuildSaveLine (0); 
		}

#line 4131 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 47];
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          (*++yystates_top) = yystate;
          break;
        case 429:
          /*              for_start : for_start_start expression ';'(59) expression ';'(59) ')'(41) .  (125) */

#line 744 "nscparser.y"
{
			yyval = NscBuild5Block (FOR, NULL, 1, yyattributes_top [-1], yyattributes_top [0], NULL, NULL, NULL); 
		}

#line 4146 "nscparser.cpp"
          yystates_top -= 3;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 430:
          /*              for_start : for_start_start expression ';'(59) expression ';'(59) expression ')'(41) .  (129) */

#line 760 "nscparser.y"
{
			yyval = NscBuild5Block (FOR, NULL, 1, yyattributes_top [-2], yyattributes_top [-1], yyattributes_top [0], NULL, NULL); 
		}

#line 4161 "nscparser.cpp"
          yystates_top -= 3;
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 431:
          /*              for_start : for_start_start expression ';'(59) ';'(59) ')'(41) .  (123) */

#line 736 "nscparser.y"
{ 
			yyval = NscBuild5Block (FOR, NULL, 1, yyattributes_top [0], NULL, NULL, NULL, NULL); 
		}

#line 4176 "nscparser.cpp"
          yystates_top -= 3;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 432:
          /*              for_start : for_start_start expression ';'(59) ';'(59) expression ')'(41) .  (127) */

#line 752 "nscparser.y"
{
			yyval = NscBuild5Block (FOR, NULL, 1, yyattributes_top [-1], NULL, yyattributes_top [0], NULL, NULL); 
		}

#line 4191 "nscparser.cpp"
          yystates_top -= 3;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 433:
          /*              for_start : for_start_start ';'(59) expression ';'(59) ')'(41) .  (124) */

#line 740 "nscparser.y"
{ 
			yyval = NscBuild5Block (FOR, NULL, 1, NULL, yyattributes_top [0], NULL, NULL, NULL);
		}

#line 4206 "nscparser.cpp"
          yystates_top -= 3;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 434:
          /*              for_start : for_start_start ';'(59) expression ';'(59) expression ')'(41) .  (128) */

#line 756 "nscparser.y"
{
			yyval = NscBuild5Block (FOR, NULL, 1, NULL, yyattributes_top [-1], yyattributes_top [0], NULL, NULL); 
		}

#line 4221 "nscparser.cpp"
          yystates_top -= 3;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 435:
          /*              for_start : for_start_start ';'(59) ';'(59) ')'(41) .  (122) */

#line 732 "nscparser.y"
{
			yyval = NscBuild5Block (FOR, NULL, 1, NULL, NULL, NULL, NULL, NULL); 
		}

#line 4236 "nscparser.cpp"
          yystates_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 436:
          /*              for_start : for_start_start ';'(59) ';'(59) expression ')'(41) .  (126) */

#line 748 "nscparser.y"
{
			yyval = NscBuild5Block (FOR, NULL, 1, NULL, NULL, yyattributes_top [0], NULL, NULL); 
		}

#line 4253 "nscparser.cpp"
          yystates_top -= 3;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 46];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 437:
          /*              iteration_statement : for_start statement .  (121) */

#line 725 "nscparser.y"
{
			yyval = NscBuild5Block (FOR, yyattributes_top [-1], 0, NULL, NULL, NULL, yyattributes_top [0], NULL); 
		}

#line 4268 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 29];
          (*++yyattributes_top) = yyval;
          break;
        case 438:
          /*              iteration_statement : do_start statement WHILE $7 '('(40) expression ')'(41) ';'(59) .  (119) */

#line 721 "nscparser.y"
{
			yyval = NscBuild5Block (DO, yyattributes_top [-2], 0, NULL, yyattributes_top [0], NULL, yyattributes_top [-1], NULL); 
		}

#line 4282 "nscparser.cpp"
          yystates_top -= 2;
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 29];
          (*++yyattributes_top) = yyval;
          break;
        case 439:
          /*              iteration_statement : while_start statement .  (118) */

#line 717 "nscparser.y"
{
			yyval = NscBuild5Block (WHILE, yyattributes_top [-1], 0, NULL, NULL, NULL, yyattributes_top [0], NULL); 
		}

#line 4296 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 29];
          (*++yyattributes_top) = yyval;
          break;
        case 440:
          /*              jump_statement : return_start ';'(59) .  (138) */

#line 802 "nscparser.y"
{
			yyval = NscBuildReturn (NULL); 
		}

#line 4310 "nscparser.cpp"
          yystates_top--;
          yystate = yygoto [yygbase [*yystates_top] + 30];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 441:
          /*              jump_statement : return_start expression ';'(59) .  (139) */

#line 806 "nscparser.y"
{
			yyval = NscBuildReturn (yyattributes_top [0]); 
		}

#line 4326 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 30];
          (*++yyattributes_top) = yyval;
          break;
        case 442:
          /*              jump_statement : BREAK $10 ';'(59) .  (136) */

#line 798 "nscparser.y"
{
			yyval = NscBuildBreakContinue (BREAK); 
		}

#line 4340 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 30];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 443:
          /*              jump_statement : CONTINUE $9 ';'(59) .  (134) */

#line 794 "nscparser.y"
{
			yyval = NscBuildBreakContinue (CONTINUE);
		}

#line 4355 "nscparser.cpp"
          yystate = yygoto [yygbase [*yystates_top] + 30];
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yyval;
          break;
        case 444:
          /*              type_specifier : struct_type_start IDENTIFIER .  (83) */

#line 502 "nscparser.y"
{ 
			yyval = NscBuildType (STRUCT_TYPE, yyattributes_top [0]); 
		}

#line 4370 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 20];
          (*++yyattributes_top) = yyval;
          break;
        case 445:
          /*              init_declarator_list : init_declarator .  (142) */

#line 833 "nscparser.y"
{
			yyval = NscBuildDeclarationList (NULL, yyattributes_top [0]); 
		}

#line 4383 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 52];
          (*++yyattributes_top) = yyval;
          break;
        case 446:
          /*              init_declarator : init_declarator_identifier .  (144) */

#line 844 "nscparser.y"
{
			yyval = NscBuildEndDeclaration (yyattributes_top [0], NULL);
		}

#line 4396 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 53];
          (*++yyattributes_top) = yyval;
          break;
        case 447:
          /*              init_declarator_identifier : IDENTIFIER .  (146) */

#line 855 "nscparser.y"
{
			yyval = NscBuildBeginDeclaration (yyattributes_top [0]);
		}

#line 4409 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 54];
          (*++yyattributes_top) = yyval;
          break;
        case 448:
          /*              init_declarator : init_declarator_identifier '='(61) assignment_expression .  (145) */

#line 848 "nscparser.y"
{
			yyval = NscBuildEndDeclaration (yyattributes_top [-1], yyattributes_top [0]);
		}

#line 4422 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 53];
          (*++yyattributes_top) = yyval;
          break;
        case 449:
          /*              declaration : qualified_type_specifier init_declarator_list ';'(59) .  (141) */

#line 826 "nscparser.y"
{
			yyval = NscBuildDeclaration (yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 4436 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 31];
          (*++yyattributes_top) = yyval;
          break;
        case 450:
          /*              init_declarator_list : init_declarator_list ','(44) init_declarator .  (143) */

#line 837 "nscparser.y"
{
			yyval = NscBuildDeclarationList (yyattributes_top [-2], yyattributes_top [0]); 
		}

#line 4450 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 52];
          (*++yyattributes_top) = yyval;
          break;
        case 451:
          /*              compound_statement : compound_statement_start statement_list '}'(125) .  (103) */

#line 615 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, yyattributes_top [0], yyattributes_top [-1]); 
		}

#line 4464 "nscparser.cpp"
          yystates_top -= 2;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 26];
          (*++yyattributes_top) = yyval;
          break;
        case 452:
          /*              qualified_type_specifier : CONST $1 type_specifier .  (73) */

#line 461 "nscparser.y"
{ 
			yyval = NscBuildMakeConstType (yyattributes_top [0]); 
			NscBuildCopyLine (0, 1); 
		}

#line 4479 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 18];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 453:
          /*              function_declarator : qualified_type_specifier IDENTIFIER '('(40) ')'(41) .  (150) */

#line 886 "nscparser.y"
{
			yyval = NscBuildFunctionDeclarator (yyattributes_top [-2], yyattributes_top [-1], NULL); 
		}

#line 4494 "nscparser.cpp"
          yystates_top -= 2;
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 56];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 454:
          /*              function_parameter_declaration : qualified_type_specifier IDENTIFIER .  (155) */

#line 909 "nscparser.y"
{
			yyval = NscBuildParameter (yyattributes_top [-1], yyattributes_top [0], NULL);
		}

#line 4509 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 60];
          (*++yyattributes_top) = yyval;
          break;
        case 455:
          /*              function_parameter_declaration : qualified_type_specifier IDENTIFIER '='(61) assignment_expression .  (156) */

#line 913 "nscparser.y"
{
			yyval = NscBuildParameter (yyattributes_top [-2], yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 4523 "nscparser.cpp"
          yystates_top -= 2;
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 60];
          (*++yyattributes_top) = yyval;
          break;
        case 456:
          /*              function_declarator : qualified_type_specifier IDENTIFIER '('(40) function_parameter_type_list ')'(41) .  (149) */

#line 882 "nscparser.y"
{
			yyval = NscBuildFunctionDeclarator (yyattributes_top [-3], yyattributes_top [-2], yyattributes_top [0]);
		}

#line 4537 "nscparser.cpp"
          yystates_top -= 2;
          yyattributes_top -= 4;
          yystate = yygoto [yygbase [*yystates_top] + 56];
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 457:
          /*              type_specifier : struct_type_start IDENTIFIER .  (83) */

#line 502 "nscparser.y"
{ 
			yyval = NscBuildType (STRUCT_TYPE, yyattributes_top [0]); 
		}

#line 4552 "nscparser.cpp"
          yyattributes_top--;
          yystate = yygoto [yygbase [*yystates_top] + 20];
          (*++yyattributes_top) = yyval;
          break;
        case 458:
          /*              struct_declaration : qualified_type_specifier struct_declarator_list ';'(59) .  (160) */

#line 944 "nscparser.y"
{
			yyval = NscBuildStructDeclaration (yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 4565 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = yygoto [yygbase [*yystates_top] + 63];
          (*++yyattributes_top) = yyval;
          break;
        case 459:
          /*              struct_definition : struct_type_start IDENTIFIER '{'(123) struct_declaration_list '}'(125) ';'(59) .  (157) */

#line 926 "nscparser.y"
{
			yyval = NscBuildStruct (yyattributes_top [-2], yyattributes_top [0]);
		}

#line 4579 "nscparser.cpp"
          yystates_top -= 2;
          yyattributes_top -= 3;
          yystate = yygoto [yygbase [*yystates_top] + 61];
          (*++yyattributes_top) = yyval;
          break;
        /* regular arcs */
        case 280:
          /* 
             $accept : . translation_unit $end  (0)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          yystate = 1;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 281:
          /* 
             translation_unit : external_declaration .  (164)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 969 "nscparser.y"
{
			yyval = NscBuildTranslation (NULL, yyattributes_top [0]);
		}

#line 4615 "nscparser.cpp"
          yyattributes_top--;
          yystate = 1;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 282:
          /* 
             translation_unit : error .  (166)

           */

#line 977 "nscparser.y"
{
			yyval = NULL;
			if (NscBuildSyntaxError (yychar, yylval))
				YYABORT;
			while (yychar != EOF && yychar != ';' && yychar != '{' && yychar != '}')
			{
				if (yylval != NULL)
					yylval; //FIXME
				yyclearin;
				yychar = yylex ();
			}
			yyclearin;
		}

#line 4642 "nscparser.cpp"
          yystates_top--;
          yyattributes_top--;
          yystate = 1;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 283:
          /* 
             compound_statement : compound_statement_start . '}'(125)  (102)
             compound_statement : compound_statement_start . statement_list '}'(125)  (103)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4662 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 284:
          /* 
             compound_statement : compound_statement_start statement_list . '}'(125)  (103)
             statement_list : statement_list . statement  (106)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4679 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 285:
          /* 
             statement_list : statement .  (105)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 629 "nscparser.y"
{
			yyval = NscBuildStatement (NULL, yyattributes_top [0], NULL); 
		}

#line 4697 "nscparser.cpp"
          yyattributes_top--;
          yystate = 26;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 286:
          /* 
             iteration_statement : while_start . statement  (118)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4715 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 287:
          /* 
             iteration_statement : do_start . statement WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4731 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 288:
          /* 
             iteration_statement : for_start . statement  (121)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4747 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 289:
          /* '('(40):
             while_start : WHILE . '('(40) $8 expression ')'(41)  (131)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 773 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4766 "nscparser.cpp"
          yystate = 200;
          (*++yystates_top) = yystate;
          break;
        case 290:
          /* 
             selection_statement : if_start . statement_blank_error  (110)
             if_else_start : if_start . statement_blank_error ELSE  (113)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4783 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 291:
          /* 
             selection_statement : if_else_start . statement_blank_error  (111)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4799 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 292:
          /* CONTINUE:
             selection_statement : switch_start . statement  (112)

             or
             compound_statement : compound_statement_start . '}'(125)  (102)
             compound_statement : compound_statement_start . statement_list '}'(125)  (103)

             or
             compound_statement : compound_statement_start statement_list . '}'(125)  (103)
             statement_list : statement_list . statement  (106)

             or
             iteration_statement : while_start . statement  (118)

             or
             iteration_statement : do_start . statement WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

             or
             iteration_statement : for_start . statement  (121)

             or
             selection_statement : if_start . statement_blank_error  (110)
             if_else_start : if_start . statement_blank_error ELSE  (113)

             or
             selection_statement : if_else_start . statement_blank_error  (111)

           */
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 793 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4839 "nscparser.cpp"
          yystate = 238;
          break;
        case 293:
          /* BREAK:
             selection_statement : switch_start . statement  (112)

             or
             compound_statement : compound_statement_start . '}'(125)  (102)
             compound_statement : compound_statement_start . statement_list '}'(125)  (103)

             or
             compound_statement : compound_statement_start statement_list . '}'(125)  (103)
             statement_list : statement_list . statement  (106)

             or
             iteration_statement : while_start . statement  (118)

             or
             iteration_statement : do_start . statement WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

             or
             iteration_statement : for_start . statement  (121)

             or
             selection_statement : if_start . statement_blank_error  (110)
             if_else_start : if_start . statement_blank_error ELSE  (113)

             or
             selection_statement : if_else_start . statement_blank_error  (111)

           */
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 797 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4878 "nscparser.cpp"
          yystate = 236;
          break;
        case 294:
          /* SWITCH:
             selection_statement : switch_start . statement  (112)

             or
             compound_statement : compound_statement_start . '}'(125)  (102)
             compound_statement : compound_statement_start . statement_list '}'(125)  (103)

             or
             compound_statement : compound_statement_start statement_list . '}'(125)  (103)
             statement_list : statement_list . statement  (106)

             or
             iteration_statement : while_start . statement  (118)

             or
             iteration_statement : do_start . statement WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

             or
             iteration_statement : for_start . statement  (121)

             or
             selection_statement : if_start . statement_blank_error  (110)
             if_else_start : if_start . statement_blank_error ELSE  (113)

             or
             selection_statement : if_else_start . statement_blank_error  (111)

           */
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 703 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4917 "nscparser.cpp"
          yystate = 190;
          break;
        case 295:
          /* 
             selection_statement : switch_start . statement  (112)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 645 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4932 "nscparser.cpp"
          yystate = 52;
          (*++yystates_top) = yystate;
          break;
        case 296:
          /* CASE:
             selection_statement : switch_start . statement  (112)

             or
             compound_statement : compound_statement_start . '}'(125)  (102)
             compound_statement : compound_statement_start . statement_list '}'(125)  (103)

             or
             compound_statement : compound_statement_start statement_list . '}'(125)  (103)
             statement_list : statement_list . statement  (106)

             or
             iteration_statement : while_start . statement  (118)

             or
             iteration_statement : do_start . statement WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

             or
             iteration_statement : for_start . statement  (121)

             or
             selection_statement : if_start . statement_blank_error  (110)
             if_else_start : if_start . statement_blank_error ELSE  (113)

             or
             selection_statement : if_else_start . statement_blank_error  (111)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 593 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 4975 "nscparser.cpp"
          yystate = 57;
          (*++yystates_top) = yystate;
          break;
        case 297:
          /* DEFAULT:
             selection_statement : switch_start . statement  (112)

             or
             compound_statement : compound_statement_start . '}'(125)  (102)
             compound_statement : compound_statement_start . statement_list '}'(125)  (103)

             or
             compound_statement : compound_statement_start statement_list . '}'(125)  (103)
             statement_list : statement_list . statement  (106)

             or
             iteration_statement : while_start . statement  (118)

             or
             iteration_statement : do_start . statement WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

             or
             iteration_statement : for_start . statement  (121)

             or
             selection_statement : if_start . statement_blank_error  (110)
             if_else_start : if_start . statement_blank_error ELSE  (113)

             or
             selection_statement : if_else_start . statement_blank_error  (111)

           */
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 597 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 5015 "nscparser.cpp"
          yystate = 55;
          break;
        case 298:
          /* '('(40):
             if_start : IF . '('(40) $5 expression ')'(41)  (114)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 696 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 5033 "nscparser.cpp"
          yystate = 187;
          (*++yystates_top) = yystate;
          break;
        case 299:
          /* 
             constant_expression : conditional_expression .  (72)

           */

#line 448 "nscparser.y"
{
			yyval = yyattributes_top [0];
		}

#line 5048 "nscparser.cpp"
          yyattributes_top--;
          yystate = 58;
          (*++yyattributes_top) = yyval;
          break;
        case 300:
          /* 
             argument_expression_list : assignment_expression .  (18)

           */

#line 187 "nscparser.y"
{ 
			yyval = NscBuildArgExpList (NULL, yyattributes_top [0]); 
		}

#line 5064 "nscparser.cpp"
          yyattributes_top--;
          yystate = 126;
          (*++yyattributes_top) = yyval;
          break;
        case 301:
          /* 
             argument_expression_list : argument_expression_list ','(44) assignment_expression .  (19)

           */

#line 191 "nscparser.y"
{ 
			yyval = NscBuildArgExpList (yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 5080 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = 126;
          (*++yyattributes_top) = yyval;
          break;
        case 302:
          /* WHILE:
             iteration_statement : do_start statement . WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

           */
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 720 "nscparser.y"
{ NscBuildSaveLine (0); }

#line 5098 "nscparser.cpp"
          yystate = 227;
          break;
        case 303:
          /* 
             statement_list : statement_list statement .  (106)

           */

#line 633 "nscparser.y"
{ 
			yyval = NscBuildStatement (yyattributes_top [-1], yyattributes_top [0], NULL); 
		}

#line 5112 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = 26;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 304:
          /* 
             function_declarator : qualified_type_specifier IDENTIFIER . '('(40) function_parameter_type_list ')'(41)  (149)
             function_declarator : qualified_type_specifier IDENTIFIER . '('(40) ')'(41)  (150)
             init_declarator_identifier : IDENTIFIER .  (146)

           */

#line 855 "nscparser.y"
{
			yyval = NscBuildBeginDeclaration (yyattributes_top [0]);
		}

#line 5132 "nscparser.cpp"
          yyattributes_top--;
          yystate = 243;
          (*++yyattributes_top) = yyval;
          break;
        case 305:
          /* 
             function_parameter_type_list : function_parameter_list .  (151)
             function_parameter_type_list : function_parameter_list . ','(44)  (152)
             function_parameter_list : function_parameter_list . ','(44) function_parameter_declaration  (154)

           */
          yyattributes_top--;
          yystate = 256;
          (*++yyattributes_top) = yyval;
          break;
        case 306:
          /* 
             function_parameter_list : function_parameter_declaration .  (153)

           */

#line 898 "nscparser.y"
{
			yyval = NscBuildParameterList (NULL, yyattributes_top [0]);
		}

#line 5159 "nscparser.cpp"
          yyattributes_top--;
          yystate = 258;
          (*++yyattributes_top) = yyval;
          break;
        case 307:
          /* 
             function_parameter_type_list : function_parameter_list ','(44) .  (152)
             function_parameter_list : function_parameter_list ','(44) . function_parameter_declaration  (154)

           */
          yystates_top--;
          yyattributes_top -= 2;
          yystate = 256;
          (*++yyattributes_top) = yyval;
          break;
        case 308:
          /* 
             function_parameter_list : function_parameter_list ','(44) function_parameter_declaration .  (154)

           */

#line 902 "nscparser.y"
{
			yyval = NscBuildParameterList (yyattributes_top [-2], yyattributes_top [0]);
		}

#line 5186 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 3;
          yystate = 258;
          (*++yyattributes_top) = yyval;
          break;
        case 309:
          /* CONST:
             struct_definition : struct_type_start IDENTIFIER '{'(123) struct_declaration_list . '}'(125) ';'(59)  (157)
             struct_declaration_list : struct_declaration_list . struct_declaration  (159)

             or
             $accept : . translation_unit $end  (0)

             or
             $accept : translation_unit . $end  (0)
             translation_unit : translation_unit . external_declaration  (165)

             or
             compound_statement : compound_statement_start . '}'(125)  (102)
             compound_statement : compound_statement_start . statement_list '}'(125)  (103)

             or
             compound_statement : compound_statement_start statement_list . '}'(125)  (103)
             statement_list : statement_list . statement  (106)

             or
             iteration_statement : while_start . statement  (118)

             or
             iteration_statement : do_start . statement WHILE $7 '('(40) expression ')'(41) ';'(59)  (119)

             or
             iteration_statement : for_start . statement  (121)

             or
             selection_statement : if_start . statement_blank_error  (110)
             if_else_start : if_start . statement_blank_error ELSE  (113)

             or
             selection_statement : if_else_start . statement_blank_error  (111)

             or
             selection_statement : switch_start . statement  (112)

             or
             function_declarator : qualified_type_specifier IDENTIFIER '('(40) . function_parameter_type_list ')'(41)  (149)
             function_declarator : qualified_type_specifier IDENTIFIER '('(40) . ')'(41)  (150)

             or
             function_parameter_type_list : function_parameter_list ','(44) .  (152)
             function_parameter_list : function_parameter_list ','(44) . function_parameter_declaration  (154)

             or
             struct_definition : struct_type_start IDENTIFIER '{'(123) . struct_declaration_list '}'(125) ';'(59)  (157)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 460 "nscparser.y"
{ NscBuildSaveLine (1); }

#line 5256 "nscparser.cpp"
          yystate = 252;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 310:
          /* 
             struct_declaration_list : struct_declaration .  (158)

           */
          if (yystates_top >= yystates_end
              && yyexpand_states_stack(&yystates, &yystates_end, &yystates_top))
            YYABORT;

#line 933 "nscparser.y"
{
			yyval = NscBuildStructDeclarationList (NULL, yyattributes_top [0]);
		}

#line 5275 "nscparser.cpp"
          yyattributes_top--;
          yystate = 269;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 311:
          /* IDENTIFIER:
             struct_declaration : qualified_type_specifier . struct_declarator_list ';'(59)  (160)

           */
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yylval;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 951 "nscparser.y"
{
			yyval = NscBuildStructDeclaratorList (NULL, yyattributes_top [0]); 
		}

#line 5299 "nscparser.cpp"
          yyattributes_top--;
          yystate = 272;
          (*++yyattributes_top) = yyval;
          break;
        case 312:
          /* IDENTIFIER:
             struct_declarator_list : struct_declarator_list ','(44) . IDENTIFIER  (162)

           */
          if (yyattributes_top >= yyattributes_end
              && yyexpand_attributes_stack(&yyattributes, &yyattributes_end, &yyattributes_top))
            YYABORT;
          (*++yyattributes_top) = yylval;
          yyprev_char = yychar;
          yychar = YYEMPTY;
          yyerr_status--;

#line 955 "nscparser.y"
{
			yyval = NscBuildStructDeclaratorList (yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 5322 "nscparser.cpp"
          yyattributes_top -= 2;
          yystate = 272;
          (*++yyattributes_top) = yyval;
          break;
        case 313:
          /* 
             struct_declaration_list : struct_declaration_list struct_declaration .  (159)

           */

#line 937 "nscparser.y"
{
			yyval = NscBuildStructDeclarationList (yyattributes_top [-1], yyattributes_top [0]); 
		}

#line 5338 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = 269;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        case 314:
          /* 
             translation_unit : translation_unit external_declaration .  (165)

           */

#line 973 "nscparser.y"
{
			yyval = NscBuildTranslation (yyattributes_top [-1], yyattributes_top [0]);
		}

#line 5356 "nscparser.cpp"
          yystates_top--;
          yyattributes_top -= 2;
          yystate = 1;
          (*++yystates_top) = yystate;
          (*++yyattributes_top) = yyval;
          break;
        default:
          abort ();
        }
    }

yyaccept:
  if (yystates != NULL)
    YYFREE (yystates);
  if (yyattributes != NULL)
    YYFREE (yyattributes);
  return 0;

yyabort:
  if (yystates != NULL)
    YYFREE (yystates);
  if (yyattributes != NULL)
    YYFREE (yyattributes);
  return 1;

}



#line 999 "nscparser.y"




#line 5391 "nscparser.cpp"
