NWNScriptLib design notes:
--------------------------

The NWScriptVM object encapsulates a complete, compiled NWScript execution
environment.  In order to use the NWScriptVM, it is important to understnad
several design principles.

The script VM is single threaded, but reentrant.  (That is, multiple recursive
entries into the script VM are permitted.)  Each script called by the script VM
takes the form of a call to a script program (represents by a NWScriptReader
object).

Script execution nominally begins with a call to NWScriptVM::ExecuteScript,
which transfers control to the entry point symbol of the script program that
has been provided.  Normally, an entry point has the following prototype in
NWScript:

void main();
int StartingConditional();

The script VM supports both 'main' and 'StartingConditional' prototypes.  The
latter may return an integer value, whereas the former has no return value,
although the script VM will return zero to the caller if the script was of
the 'main' sort.  Generally, a programmatic call to a script already knows
a-priori whether it is a 'StartingConditional' (i.e. whether it returns a valid
return value).

Additionally, the script VM supports the NWN2-specific extension of NWScript
that allows parameterized script entry point symbols (i.e. entry point symbols
that are passed parameters by the programmatic caller of the core
NWScriptVM::ExecuteScript API).

Script parameters are always passed to ExecuteScript as string values, but they
will internally be dynamically converted to the appropriate type when
referenced by the script itself.

The following formatting conventions must be observed for script parameters
that are passed in to ExecuteScript:

- Strings are passed as-is.
- Integers are passed as base 10 signed integral values (i.e. formatted as %d).
- Floats are passed as base 10 floating point values (i.e. formatted as %g).
- Object IDs are passed as base 10 signed interval values (i.e. formatted as
  %d).

Engine structures cannot be passed as script parameters in the current version
of the script VM.

Unlike the default script VM in NWN2, the NWNScriptLib does not require the
user of a the script VM to compile parameterized scripts on each exeuction in
order to determine the types of arguments.  Dynamic typing is implemented for
script entry point parameters in order to eliminate this requirement.

An attempt to call a script entry point with a mismatched number of parameters
will result in an invalid type error within the script VM and will result in
the script call chain being terminated (with control returned to the user).


While the script execution environment already supports the intrinsic
mathematical operators supported by the compiled NWScript instruction set, most
useful work involves exposing customized functionality to the scripting
environment.

Custom functionality may be exposed through two different extension points,
both of which are fully supported by the script VM:

- A user of the script VM may expose functions to the script environment by
  implementing a series of "action handlers".  An action is a function that has
  been prototyped in the nwscript.nss file, and it is implemented in native
  code by the user of the script VM.  The user's action handler dispatcher is
  invoked (INWScriptActions::OnExecuteAction) when the script makes a call to
  any script action.

  It is up to the user of the NWNScriptLib to implement any and all desired
  script action handlers.  The first function prototype in nwscript.nss
  corresponds to action ordinal 0, the second correspond to action ordinal 1,
  and so on and soforth.

  The script VM itself is agnostic to the specifics of each action's
  implementation or prototype, as is the script compiler.  (It is possible to
  create a completely new action set for use in a custom program using a custom
  written nwscript.nss file with the script compiler, plus a custom written
  INWScriptActions interface implementation in conjuction with the NWScriptVM.)

  Action handlers are required to adhere to the following rules for argument
  and return value passing:

  1. All arguments are passed on the stack, with the first argument being the
     first parameter, and so on and so forth.  The action handler must remove
     all arguments from the stack before executing a return sequence.

     The exception to this rule involves script situation arguments, which are
     typed as "action" in the NWScript compiler.  These arguments are not
     passed on the stack, and there may be at most one per action handler call.

     The rules for action handlers are described in the documentation for
     "script situations", located below.

  2. If an action handler returns a value to the script environment, it must
     push the return value onto the script stack after all arguments have been
     removed from the stack.  Note that adding or removing a return value thus
     changes the fundamental calling convention of a particular action handler
     from the script compiler's perspective.

  Action handlers may access the script stack for these purposes by calling
  the NWScriptStack::StackPush* and NWScriptStack::StackPop* APIs with the
  NWScriptStack instance passed in to INWScriptActions::OnExecuteAction.


- Additionally, a user of the script VM may expose "engine structures" to the
  script environment.  An "engine structure" is simply a reference to an opaque
  structure that is meaningful only to engine action handlers (although the
  script environment may copy references, compare engine structures with the
  aid of EngineStructure::CompareEngineStructure, as well as pass engine
  structure references to action handlers).

  An engine structure is useful to expose a data item that the script
  environment may usefully store and then use later with a future call to an
  action handler.

  The INWScriptActions::CreateEngineStructure API, provided by the user of the
  script VM, creates a default-initialized engine structure of the given engine
  structure type.

  The script VM is entirely agnostic to the implementation of a particular type
  of engine structure.  There is support for up to 9 engine structure types to
  be defined and exposed to the script environment.


The script VM also supports the concept of a "script situation".  A script
situation, referred to as the "action" type in the NWScript compiler, is a copy
of the script VM's internal state that is snapshotted when a call to an engine
action handler that takes an "action"-typed parameter is made.

The script situation can be used to call back to a specific section of script
code at a later time, even after the script VM has returned control back to the
user.  Script situations are useful for packaging deferred calls to a
particular section of script code.  As an example, the NWN2 implementation of
NWScript has a "DelayCommand" engine action handler, which allows a section of
script code to be queued for later execution.

Script situations are not passed as standard arguments to action handlers.
Instead, the action handler must know a-priori that it expects to receive a
script situation (action) argument type.  Then, the action handler may retrieve
a reference to the last saved script situation with a call to the
NWScriptVM::GetSavedState API.

It is important to make a copy of the saved state object before control returns
or it may be overwritten later.  The saved state object maintains a copy of all
relevant data on the virtual machine stack (including references to the
script program code and any engine structures that were active).  By default,
if the saved state object is not copied, it will be deleted when the outermost
call to NWScriptVM::ExecuteScript returns control to the user.

The script VM allows a script situation to be activated later, effectively
calling back into the "middle" of a script.  This operation is performed by
invoking the NWScriptVM::ExecuteScriptSituation API.


Two manifest object id values may be associated with a particular execution of
a script entry point symbol:

- The invalid object id represents no object.  It is recommended that the value
  0x7F000000 be used for this parameter for compatibility purposes.  The script
  language refers to this constant by name of OBJECT_INVALID.

- The self object id represents the object whose context a script call is being
  executed in.  The script language refers to this constant by name of
  OBJECT_SELF.

The values of these constants is set by the user on each call to ExecuteScript.


A NWScript action handler may abort a recursive script by calling the
NWScriptVM::AbortScript function.  This terminates the entire script call chain
once control returns to the NWScriptVM.


If any script in a script call chain encounters an error, such as an illegal
stack reference, the script call chain is aborted as though AbortScript were
called by the user.


Verbose debug output is made to the user with the aid of the
NWScriptVM::SetDebugLevel API.  Debug output is routed through the
IDebugTextOut interface implementation that is provided by the user.
