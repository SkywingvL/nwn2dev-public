/*++

Copyright (c) Ken Johnson (Skywing). All rights reserved.

Module Name:

	NWScriptStubActions.cpp

Abstract:

	This module houses the implementation of stub actions that are not yet
	implemented.  Stub routines abort the script program if they are invoked.

--*/

#include "Precomp.h"
#include "NWScriptHost.h"
#include "../NWN2DataLib/NWScriptReader.h"

//
// Note that NWScriptActionDefs.h is not included here because we will want to
// comment out some of the stubs as they are implemented.
//

//
// Declare the generic stub action template.  The stub action will terminate
// execution of the script when invoked (and optionally log an error message).
//

#define DECLARE_NSS_HANDLER( Name, Ordinal )                   \
	void                                                       \
	NWScriptHost::OnAction_##Name(                             \
	    __in NWScriptVM & ScriptVM,                            \
	    __in NWScriptStack & VMStack,                          \
	    __in NWSCRIPT_ACTION ActionId,                         \
	    __in size_t NumArguments                               \
	    )                                                      \
	                                                           \
	{                                                          \
	    ScriptVM.AbortScript( );                               \
	                                                           \
	    m_JITScriptAborted = true;                             \
	                                                           \
	    VMStack;                                               \
	    ActionId;                                              \
	    NumArguments;                                          \
	                                                           \
	    if (ScriptVM.IsDebugLevel( NWScriptVM::EDL_Errors ))   \
		{                                                      \
	        m_TextOut->WriteText(                              \
	            "NWSCRIPTHOST: Unimplmented action %s/%lu.\n", \
	             #Name,                                        \
	             Ordinal                                       \
	             );                                            \
		}                                                      \
	                                                           \
	                                                           \
	    C_ASSERT( Ordinal < MAX_ACTION_ID );                   \
	}                                                          \

// int Random(int nMaxInteger);
// DECLARE_NSS_HANDLER( Random, 0 );
// void PrintString(string sString);
// DECLARE_NSS_HANDLER( PrintString, 1 );
// void PrintFloat(float fFloat, int nWidth=18, int nDecimals=9);
// DECLARE_NSS_HANDLER( PrintFloat, 2 );
// string FloatToString(float fFloat, int nWidth=18, int nDecimals=9);
// DECLARE_NSS_HANDLER( FloatToString, 3 );
// void PrintInteger(int nInteger);
// DECLARE_NSS_HANDLER( PrintInteger, 4 );
// void PrintObject(object oObject);
// DECLARE_NSS_HANDLER( PrintObject, 5 );
// void AssignCommand(object oActionSubject,action aActionToAssign);
// DECLARE_NSS_HANDLER( AssignCommand, 6 );
// void DelayCommand(float fSeconds, action aActionToDelay);
// DECLARE_NSS_HANDLER( DelayCommand, 7 );
// void ExecuteScript(string sScript, object oTarget);
// DECLARE_NSS_HANDLER( ExecuteScript, 8 );
// void ClearAllActions(int nClearCombatState=FALSE);
DECLARE_NSS_HANDLER( ClearAllActions, 9 );
// void SetFacing(float fDirection, int bLockToThisOrientation = FALSE);
DECLARE_NSS_HANDLER( SetFacing, 10 );
// void SetCalendar(int nYear,int nMonth, int nDay);
DECLARE_NSS_HANDLER( SetCalendar, 11 );
// void SetTime(int nHour,int nMinute,int nSecond,int nMillisecond);
DECLARE_NSS_HANDLER( SetTime, 12 );
// int GetCalendarYear();
DECLARE_NSS_HANDLER( GetCalendarYear, 13 );
// int GetCalendarMonth();
DECLARE_NSS_HANDLER( GetCalendarMonth, 14 );
// int GetCalendarDay();
DECLARE_NSS_HANDLER( GetCalendarDay, 15 );
// int GetTimeHour();
DECLARE_NSS_HANDLER( GetTimeHour, 16 );
// int GetTimeMinute();
DECLARE_NSS_HANDLER( GetTimeMinute, 17 );
// int GetTimeSecond();
DECLARE_NSS_HANDLER( GetTimeSecond, 18 );
// int GetTimeMillisecond();
DECLARE_NSS_HANDLER( GetTimeMillisecond, 19 );
// void ActionRandomWalk();
DECLARE_NSS_HANDLER( ActionRandomWalk, 20 );
// void ActionMoveToLocation(location lDestination, int bRun=FALSE);
DECLARE_NSS_HANDLER( ActionMoveToLocation, 21 );
// void ActionMoveToObject(object oMoveTo, int bRun=FALSE, float fRange=1.0f);
DECLARE_NSS_HANDLER( ActionMoveToObject, 22 );
// void ActionMoveAwayFromObject(object oFleeFrom, int bRun=FALSE, float fMoveAwayRange=40.0f);
DECLARE_NSS_HANDLER( ActionMoveAwayFromObject, 23 );
// object GetArea(object oTarget);
DECLARE_NSS_HANDLER( GetArea, 24 );
// object GetEnteringObject();
DECLARE_NSS_HANDLER( GetEnteringObject, 25 );
// object GetExitingObject();
DECLARE_NSS_HANDLER( GetExitingObject, 26 );
// vector GetPosition(object oTarget);
DECLARE_NSS_HANDLER( GetPosition, 27 );
// float GetFacing(object oTarget);
DECLARE_NSS_HANDLER( GetFacing, 28 );
// object GetItemPossessor(object oItem);
DECLARE_NSS_HANDLER( GetItemPossessor, 29 );
// object GetItemPossessedBy(object oCreature, string sItemTag);
DECLARE_NSS_HANDLER( GetItemPossessedBy, 30 );
// object CreateItemOnObject(string sItemTemplate, object oTarget=OBJECT_SELF, int nStackSize=1, string sNewTag="", int bDisplayFeedback=1);
DECLARE_NSS_HANDLER( CreateItemOnObject, 31 );
// void ActionEquipItem(object oItem, int nInventorySlot);
DECLARE_NSS_HANDLER( ActionEquipItem, 32 );
// void ActionUnequipItem(object oItem);
DECLARE_NSS_HANDLER( ActionUnequipItem, 33 );
// void ActionPickUpItem(object oItem);
DECLARE_NSS_HANDLER( ActionPickUpItem, 34 );
// void ActionPutDownItem(object oItem);
DECLARE_NSS_HANDLER( ActionPutDownItem, 35 );
// object GetLastAttacker(object oAttackee=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLastAttacker, 36 );
// void ActionAttack(object oAttackee, int bPassive=FALSE);
DECLARE_NSS_HANDLER( ActionAttack, 37 );
// object GetNearestCreature(int nFirstCriteriaType, int nFirstCriteriaValue, object oTarget=OBJECT_SELF, int nNth=1, int nSecondCriteriaType=-1, int nSecondCriteriaValue=-1, int nThirdCriteriaType=-1,  int nThirdCriteriaValue=-1 );
DECLARE_NSS_HANDLER( GetNearestCreature, 38 );
// void ActionSpeakString(string sStringToSpeak, int nTalkVolume=TALKVOLUME_TALK);
DECLARE_NSS_HANDLER( ActionSpeakString, 39 );
// void ActionPlayAnimation(int nAnimation, float fSpeed=1.0, float fDurationSeconds=0.0);
DECLARE_NSS_HANDLER( ActionPlayAnimation, 40 );
// float GetDistanceToObject(object oObject);
DECLARE_NSS_HANDLER( GetDistanceToObject, 41 );
// int GetIsObjectValid(object oObject);
// DECLARE_NSS_HANDLER( GetIsObjectValid, 42 );
// void ActionOpenDoor(object oDoor);
DECLARE_NSS_HANDLER( ActionOpenDoor, 43 );
// void ActionCloseDoor(object oDoor);
DECLARE_NSS_HANDLER( ActionCloseDoor, 44 );
// void SetCameraFacing(float fDirection, float fDistance = -1.0f, float fPitch = -1.0, int nTransitionType=CAMERA_TRANSITION_TYPE_SNAP);
DECLARE_NSS_HANDLER( SetCameraFacing, 45 );
// void PlaySound(string sSoundName, int bPlayAs2D=FALSE);
DECLARE_NSS_HANDLER( PlaySound, 46 );
// object GetSpellTargetObject();
DECLARE_NSS_HANDLER( GetSpellTargetObject, 47 );
// void ActionCastSpellAtObject(int nSpell, object oTarget, int nMetaMagic=METAMAGIC_ANY, int bCheat=FALSE, int nDomainLevel=0, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT, int bInstantSpell=FALSE);
DECLARE_NSS_HANDLER( ActionCastSpellAtObject, 48 );
// int GetCurrentHitPoints(object oObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetCurrentHitPoints, 49 );
// int GetMaxHitPoints(object oObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetMaxHitPoints, 50 );
// int GetLocalInt(object oObject, string sVarName);
DECLARE_NSS_HANDLER( GetLocalInt, 51 );
// float GetLocalFloat(object oObject, string sVarName);
DECLARE_NSS_HANDLER( GetLocalFloat, 52 );
// string GetLocalString(object oObject, string sVarName);
DECLARE_NSS_HANDLER( GetLocalString, 53 );
// object GetLocalObject(object oObject, string sVarName);
DECLARE_NSS_HANDLER( GetLocalObject, 54 );
// void SetLocalInt(object oObject, string sVarName, int nValue);
DECLARE_NSS_HANDLER( SetLocalInt, 55 );
// void SetLocalFloat(object oObject, string sVarName, float fValue);
DECLARE_NSS_HANDLER( SetLocalFloat, 56 );
// void SetLocalString(object oObject, string sVarName, string sValue);
DECLARE_NSS_HANDLER( SetLocalString, 57 );
// void SetLocalObject(object oObject, string sVarName, object oValue);
DECLARE_NSS_HANDLER( SetLocalObject, 58 );
// int GetStringLength(string sString);
// DECLARE_NSS_HANDLER( GetStringLength, 59 );
// string GetStringUpperCase(string sString);
// DECLARE_NSS_HANDLER( GetStringUpperCase, 60 );
// string GetStringLowerCase(string sString);
// DECLARE_NSS_HANDLER( GetStringLowerCase, 61 );
// string GetStringRight(string sString, int nCount);
// DECLARE_NSS_HANDLER( GetStringRight, 62 );
// string GetStringLeft(string sString, int nCount);
// DECLARE_NSS_HANDLER( GetStringLeft, 63 );
// string InsertString(string sDestination, string sString, int nPosition);
// DECLARE_NSS_HANDLER( InsertString, 64 );
// string GetSubString(string sString, int nStart, int nCount);
// DECLARE_NSS_HANDLER( GetSubString, 65 );
// int FindSubString(string sString, string sSubString, int nStart = 0);
// DECLARE_NSS_HANDLER( FindSubString, 66 );
// float fabs(float fValue);
// DECLARE_NSS_HANDLER( fabs, 67 );
// float cos(float fValue);
// DECLARE_NSS_HANDLER( cos, 68 );
// float sin(float fValue);
// DECLARE_NSS_HANDLER( sin, 69 );
// float tan(float fValue);
// DECLARE_NSS_HANDLER( tan, 70 );
// float acos(float fValue);
// DECLARE_NSS_HANDLER( acos, 71 );
// float asin(float fValue);
// DECLARE_NSS_HANDLER( asin, 72 );
// float atan(float fValue);
// DECLARE_NSS_HANDLER( atan, 73 );
// float log(float fValue);
// DECLARE_NSS_HANDLER( log, 74 );
// float pow(float fValue, float fExponent);
// DECLARE_NSS_HANDLER( pow, 75 );
// float sqrt(float fValue);
// DECLARE_NSS_HANDLER( sqrt, 76 );
// int abs(int nValue);
// DECLARE_NSS_HANDLER( abs, 77 );
// effect EffectHeal(int nDamageToHeal);
DECLARE_NSS_HANDLER( EffectHeal, 78 );
// effect EffectDamage(int nDamageAmount, int nDamageType=DAMAGE_TYPE_MAGICAL, int nDamagePower=DAMAGE_POWER_NORMAL, int nIgnoreResistances=FALSE);
DECLARE_NSS_HANDLER( EffectDamage, 79 );
// effect EffectAbilityIncrease(int nAbilityToIncrease, int nModifyBy);
DECLARE_NSS_HANDLER( EffectAbilityIncrease, 80 );
// effect EffectDamageResistance(int nDamageType, int nAmount, int nLimit=0);
DECLARE_NSS_HANDLER( EffectDamageResistance, 81 );
// effect EffectResurrection();
DECLARE_NSS_HANDLER( EffectResurrection, 82 );
// effect EffectSummonCreature(string sCreatureResref, int nVisualEffectId=VFX_NONE, float fDelaySeconds=0.0f, int nUseAppearAnimation=0);
DECLARE_NSS_HANDLER( EffectSummonCreature, 83 );
// int GetCasterLevel(object oCreature);
DECLARE_NSS_HANDLER( GetCasterLevel, 84 );
// effect GetFirstEffect(object oCreature);
DECLARE_NSS_HANDLER( GetFirstEffect, 85 );
// effect GetNextEffect(object oCreature);
DECLARE_NSS_HANDLER( GetNextEffect, 86 );
// void RemoveEffect(object oCreature, effect eEffect);
DECLARE_NSS_HANDLER( RemoveEffect, 87 );
// int GetIsEffectValid(effect eEffect);
DECLARE_NSS_HANDLER( GetIsEffectValid, 88 );
// int GetEffectDurationType(effect eEffect);
DECLARE_NSS_HANDLER( GetEffectDurationType, 89 );
// int GetEffectSubType(effect eEffect);
DECLARE_NSS_HANDLER( GetEffectSubType, 90 );
// object GetEffectCreator(effect eEffect);
DECLARE_NSS_HANDLER( GetEffectCreator, 91 );
// string IntToString(int nInteger);
// DECLARE_NSS_HANDLER( IntToString, 92 );
// object GetFirstObjectInArea(object oArea=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetFirstObjectInArea, 93 );
// object GetNextObjectInArea(object oArea=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetNextObjectInArea, 94 );
// int d2(int nNumDice=1);
// DECLARE_NSS_HANDLER( d2, 95 );
// int d3(int nNumDice=1);
// DECLARE_NSS_HANDLER( d3, 96 );
// int d4(int nNumDice=1);
// DECLARE_NSS_HANDLER( d4, 97 );
// int d6(int nNumDice=1);
// DECLARE_NSS_HANDLER( d6, 98 );
// int d8(int nNumDice=1);
// DECLARE_NSS_HANDLER( d8, 99 );
// int d10(int nNumDice=1);
// DECLARE_NSS_HANDLER( d10, 100 );
// int d12(int nNumDice=1);
// DECLARE_NSS_HANDLER( d12, 101 );
// int d20(int nNumDice=1);
// DECLARE_NSS_HANDLER( d20, 102 );
// int d100(int nNumDice=1);
// DECLARE_NSS_HANDLER( d100, 103 );
// float VectorMagnitude(vector vVector);
// DECLARE_NSS_HANDLER( VectorMagnitude, 104 );
// int GetMetaMagicFeat();
DECLARE_NSS_HANDLER( GetMetaMagicFeat, 105 );
// int GetObjectType(object oTarget);
DECLARE_NSS_HANDLER( GetObjectType, 106 );
// int GetRacialType(object oCreature);
DECLARE_NSS_HANDLER( GetRacialType, 107 );
// int FortitudeSave(object oCreature, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
DECLARE_NSS_HANDLER( FortitudeSave, 108 );
// int ReflexSave(object oCreature, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
DECLARE_NSS_HANDLER( ReflexSave, 109 );
// int WillSave(object oCreature, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
DECLARE_NSS_HANDLER( WillSave, 110 );
// int GetSpellSaveDC();
DECLARE_NSS_HANDLER( GetSpellSaveDC, 111 );
// effect MagicalEffect(effect eEffect);
DECLARE_NSS_HANDLER( MagicalEffect, 112 );
// effect SupernaturalEffect(effect eEffect);
DECLARE_NSS_HANDLER( SupernaturalEffect, 113 );
// effect ExtraordinaryEffect(effect eEffect);
DECLARE_NSS_HANDLER( ExtraordinaryEffect, 114 );
// effect EffectACIncrease(int nValue, int nModifyType=AC_DODGE_BONUS, int nDamageType=AC_VS_DAMAGE_TYPE_ALL, int bVsSpiritsOnly=FALSE);
DECLARE_NSS_HANDLER( EffectACIncrease, 115 );
// int GetAC(object oObject, int nForFutureUse=0);
DECLARE_NSS_HANDLER( GetAC, 116 );
// effect EffectSavingThrowIncrease(int nSave, int nValue, int nSaveType=SAVING_THROW_TYPE_ALL, int bVsSpiritsOnly=FALSE);
DECLARE_NSS_HANDLER( EffectSavingThrowIncrease, 117 );
// effect EffectAttackIncrease(int nBonus, int nModifierType=ATTACK_BONUS_MISC);
DECLARE_NSS_HANDLER( EffectAttackIncrease, 118 );
// effect EffectDamageReduction(int nAmount, int nDRSubType=DAMAGE_POWER_NORMAL, int nLimit=0, int nDRType=DR_TYPE_MAGICBONUS);
DECLARE_NSS_HANDLER( EffectDamageReduction, 119 );
// effect EffectDamageIncrease(int nBonus, int nDamageType=DAMAGE_TYPE_MAGICAL, int nVersusRace=-1);
DECLARE_NSS_HANDLER( EffectDamageIncrease, 120 );
// float RoundsToSeconds(int nRounds);
// DECLARE_NSS_HANDLER( RoundsToSeconds, 121 );
// float HoursToSeconds(int nHours);
// DECLARE_NSS_HANDLER( HoursToSeconds, 122 );
// float TurnsToSeconds(int nTurns);
// DECLARE_NSS_HANDLER( TurnsToSeconds, 123 );
// int GetLawChaosValue(object oCreature);
DECLARE_NSS_HANDLER( GetLawChaosValue, 124 );
// int GetGoodEvilValue(object oCreature);
DECLARE_NSS_HANDLER( GetGoodEvilValue, 125 );
// int GetAlignmentLawChaos(object oCreature);
DECLARE_NSS_HANDLER( GetAlignmentLawChaos, 126 );
// int GetAlignmentGoodEvil(object oCreature);
DECLARE_NSS_HANDLER( GetAlignmentGoodEvil, 127 );
// object GetFirstObjectInShape(int nShape, float fSize, location lTarget, int bLineOfSight=FALSE, int nObjectFilter=OBJECT_TYPE_CREATURE, vector vOrigin=[0.0,0.0,0.0]);
DECLARE_NSS_HANDLER( GetFirstObjectInShape, 128 );
// object GetNextObjectInShape(int nShape, float fSize, location lTarget, int bLineOfSight=FALSE, int nObjectFilter=OBJECT_TYPE_CREATURE, vector vOrigin=[0.0,0.0,0.0]);
DECLARE_NSS_HANDLER( GetNextObjectInShape, 129 );
// effect EffectEntangle();
DECLARE_NSS_HANDLER( EffectEntangle, 130 );
// void SignalEvent(object oObject, event evToRun);
DECLARE_NSS_HANDLER( SignalEvent, 131 );
// event EventUserDefined(int nUserDefinedEventNumber);
DECLARE_NSS_HANDLER( EventUserDefined, 132 );
// effect EffectDeath(int nSpectacularDeath=FALSE, int nDisplayFeedback=TRUE, int nIgnoreDeathImmunity=FALSE, int bPurgeEffects=TRUE);
DECLARE_NSS_HANDLER( EffectDeath, 133 );
// effect EffectKnockdown();
DECLARE_NSS_HANDLER( EffectKnockdown, 134 );
// void ActionGiveItem(object oItem, object oGiveTo, int bDisplayFeedback=TRUE);
DECLARE_NSS_HANDLER( ActionGiveItem, 135 );
// void ActionTakeItem(object oItem, object oTakeFrom, int bDisplayFeedback=TRUE);
DECLARE_NSS_HANDLER( ActionTakeItem, 136 );
// vector VectorNormalize(vector vVector);
// DECLARE_NSS_HANDLER( VectorNormalize, 137 );
// effect EffectCurse(int nStrMod=1, int nDexMod=1, int nConMod=1, int nIntMod=1, int nWisMod=1, int nChaMod=1);
DECLARE_NSS_HANDLER( EffectCurse, 138 );
// int GetAbilityScore(object oCreature, int nAbilityType, int nBaseAttribute=FALSE);
DECLARE_NSS_HANDLER( GetAbilityScore, 139 );
// int GetIsDead(object oCreature, int bIgnoreDying=FALSE);
DECLARE_NSS_HANDLER( GetIsDead, 140 );
// void PrintVector(vector vVector, int bPrepend);
// DECLARE_NSS_HANDLER( PrintVector, 141 );
// vector Vector(float x=0.0f, float y=0.0f, float z=0.0f);
// DECLARE_NSS_HANDLER( Vector, 142 );
// void SetFacingPoint(vector vTarget, int bLockToThisOrientation = FALSE);
DECLARE_NSS_HANDLER( SetFacingPoint, 143 );
// vector AngleToVector(float fAngle);
// DECLARE_NSS_HANDLER( AngleToVector, 144 );
// float VectorToAngle(vector vVector);
// DECLARE_NSS_HANDLER( VectorToAngle, 145 );
// int TouchAttackMelee(object oTarget, int bDisplayFeedback=TRUE, int nBonus=0);
DECLARE_NSS_HANDLER( TouchAttackMelee, 146 );
// int TouchAttackRanged(object oTarget, int bDisplayFeedback=TRUE, int nBonus=0);
DECLARE_NSS_HANDLER( TouchAttackRanged, 147 );
// effect EffectParalyze(int nSaveDC=-1, int nSave=SAVING_THROW_WILL, int bSaveEveryRound = TRUE);
DECLARE_NSS_HANDLER( EffectParalyze, 148 );
// effect EffectSpellImmunity(int nImmunityToSpell=SPELL_ALL_SPELLS);
DECLARE_NSS_HANDLER( EffectSpellImmunity, 149 );
// effect EffectDeaf();
DECLARE_NSS_HANDLER( EffectDeaf, 150 );
// float GetDistanceBetween(object oObjectA, object oObjectB);
DECLARE_NSS_HANDLER( GetDistanceBetween, 151 );
// void SetLocalLocation(object oObject, string sVarName, location lValue);
DECLARE_NSS_HANDLER( SetLocalLocation, 152 );
// location GetLocalLocation(object oObject, string sVarName);
DECLARE_NSS_HANDLER( GetLocalLocation, 153 );
// effect EffectSleep();
DECLARE_NSS_HANDLER( EffectSleep, 154 );
// object GetItemInSlot(int nInventorySlot, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetItemInSlot, 155 );
// effect EffectCharmed();
DECLARE_NSS_HANDLER( EffectCharmed, 156 );
// effect EffectConfused();
DECLARE_NSS_HANDLER( EffectConfused, 157 );
// effect EffectFrightened();
DECLARE_NSS_HANDLER( EffectFrightened, 158 );
// effect EffectDominated();
DECLARE_NSS_HANDLER( EffectDominated, 159 );
// effect EffectDazed();
DECLARE_NSS_HANDLER( EffectDazed, 160 );
// effect EffectStunned();
DECLARE_NSS_HANDLER( EffectStunned, 161 );
// void SetCommandable(int bCommandable, object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( SetCommandable, 162 );
// int GetCommandable(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetCommandable, 163 );
// effect EffectRegenerate(int nAmount, float fIntervalSeconds);
DECLARE_NSS_HANDLER( EffectRegenerate, 164 );
// effect EffectMovementSpeedIncrease(int nPercentChange);
DECLARE_NSS_HANDLER( EffectMovementSpeedIncrease, 165 );
// int GetHitDice(object oCreature);
DECLARE_NSS_HANDLER( GetHitDice, 166 );
// void ActionForceFollowObject(object oFollow, float fFollowDistance=0.5f, int iFollowPosition = 0);
DECLARE_NSS_HANDLER( ActionForceFollowObject, 167 );
// string GetTag(object oObject);
DECLARE_NSS_HANDLER( GetTag, 168 );
// int ResistSpell(object oCaster, object oTarget);
DECLARE_NSS_HANDLER( ResistSpell, 169 );
// int GetEffectType(effect eEffect);
DECLARE_NSS_HANDLER( GetEffectType, 170 );
// effect EffectAreaOfEffect(int nAreaEffectId, string sOnEnterScript="", string sHeartbeatScript="", string sOnExitScript="", string sEffectTag="" );
DECLARE_NSS_HANDLER( EffectAreaOfEffect, 171 );
// int GetFactionEqual(object oFirstObject, object oSecondObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetFactionEqual, 172 );
// void ChangeFaction(object oObjectToChangeFaction, object oMemberOfFactionToJoin);
DECLARE_NSS_HANDLER( ChangeFaction, 173 );
// int GetIsListening(object oObject);
DECLARE_NSS_HANDLER( GetIsListening, 174 );
// void SetListening(object oObject, int bValue);
DECLARE_NSS_HANDLER( SetListening, 175 );
// void SetListenPattern(object oObject, string sPattern, int nNumber=0);
DECLARE_NSS_HANDLER( SetListenPattern, 176 );
// int TestStringAgainstPattern(string sPattern, string sStringToTest);
DECLARE_NSS_HANDLER( TestStringAgainstPattern, 177 );
// string GetMatchedSubstring(int nString);
DECLARE_NSS_HANDLER( GetMatchedSubstring, 178 );
// int GetMatchedSubstringsCount();
DECLARE_NSS_HANDLER( GetMatchedSubstringsCount, 179 );
// effect EffectVisualEffect(int nVisualEffectId, int nMissEffect=FALSE);
DECLARE_NSS_HANDLER( EffectVisualEffect, 180 );
// object GetFactionWeakestMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
DECLARE_NSS_HANDLER( GetFactionWeakestMember, 181 );
// object GetFactionStrongestMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
DECLARE_NSS_HANDLER( GetFactionStrongestMember, 182 );
// object GetFactionMostDamagedMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
DECLARE_NSS_HANDLER( GetFactionMostDamagedMember, 183 );
// object GetFactionLeastDamagedMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
DECLARE_NSS_HANDLER( GetFactionLeastDamagedMember, 184 );
// int GetFactionGold(object oFactionMember);
DECLARE_NSS_HANDLER( GetFactionGold, 185 );
// int GetFactionAverageReputation(object oSourceFactionMember, object oTarget);
DECLARE_NSS_HANDLER( GetFactionAverageReputation, 186 );
// int GetFactionAverageGoodEvilAlignment(object oFactionMember);
DECLARE_NSS_HANDLER( GetFactionAverageGoodEvilAlignment, 187 );
// int GetFactionAverageLawChaosAlignment(object oFactionMember);
DECLARE_NSS_HANDLER( GetFactionAverageLawChaosAlignment, 188 );
// int GetFactionAverageLevel(object oFactionMember);
DECLARE_NSS_HANDLER( GetFactionAverageLevel, 189 );
// int GetFactionAverageXP(object oFactionMember);
DECLARE_NSS_HANDLER( GetFactionAverageXP, 190 );
// int GetFactionMostFrequentClass(object oFactionMember);
DECLARE_NSS_HANDLER( GetFactionMostFrequentClass, 191 );
// object GetFactionWorstAC(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
DECLARE_NSS_HANDLER( GetFactionWorstAC, 192 );
// object GetFactionBestAC(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
DECLARE_NSS_HANDLER( GetFactionBestAC, 193 );
// void ActionSit(object oChair);
DECLARE_NSS_HANDLER( ActionSit, 194 );
// int GetListenPatternNumber();
DECLARE_NSS_HANDLER( GetListenPatternNumber, 195 );
// void ActionJumpToObject(object oToJumpTo, int bWalkStraightLineToPoint=TRUE);
DECLARE_NSS_HANDLER( ActionJumpToObject, 196 );
// object GetWaypointByTag(string sWaypointTag);
DECLARE_NSS_HANDLER( GetWaypointByTag, 197 );
// object GetTransitionTarget(object oTransition);
DECLARE_NSS_HANDLER( GetTransitionTarget, 198 );
// effect EffectLinkEffects(effect eChildEffect, effect eParentEffect );
DECLARE_NSS_HANDLER( EffectLinkEffects, 199 );
// object GetObjectByTag(string sTag, int nNth=0);
DECLARE_NSS_HANDLER( GetObjectByTag, 200 );
// void AdjustAlignment(object oSubject, int nAlignment, int nShift);
DECLARE_NSS_HANDLER( AdjustAlignment, 201 );
// void ActionWait(float fSeconds);
DECLARE_NSS_HANDLER( ActionWait, 202 );
// void SetAreaTransitionBMP(int nPredefinedAreaTransition, string sCustomAreaTransitionBMP="");
DECLARE_NSS_HANDLER( SetAreaTransitionBMP, 203 );
// void ActionStartConversation(object oObjectToConverseWith, string sDialogResRef="", int bPrivateConversation=FALSE, int bPlayHello=TRUE, int bIgnoreStartDistance=FALSE, int bDisableCutsceneBars=FALSE);
DECLARE_NSS_HANDLER( ActionStartConversation, 204 );
// void ActionPauseConversation();
DECLARE_NSS_HANDLER( ActionPauseConversation, 205 );
// void ActionResumeConversation();
DECLARE_NSS_HANDLER( ActionResumeConversation, 206 );
// effect EffectBeam(int nBeamVisualEffect, object oEffector, int nBodyPart, int bMissEffect=FALSE);
DECLARE_NSS_HANDLER( EffectBeam, 207 );
// int GetReputation(object oSource, object oTarget);
DECLARE_NSS_HANDLER( GetReputation, 208 );
// void AdjustReputation(object oTarget, object oSourceFactionMember, int nAdjustment);
DECLARE_NSS_HANDLER( AdjustReputation, 209 );
// object GetSittingCreature(object oChair);
DECLARE_NSS_HANDLER( GetSittingCreature, 210 );
// object GetGoingToBeAttackedBy(object oTarget);
DECLARE_NSS_HANDLER( GetGoingToBeAttackedBy, 211 );
// effect EffectSpellResistanceIncrease(int nValue, int nUses = -1 );
DECLARE_NSS_HANDLER( EffectSpellResistanceIncrease, 212 );
// location GetLocation(object oObject);
DECLARE_NSS_HANDLER( GetLocation, 213 );
// void ActionJumpToLocation(location lLocation);
DECLARE_NSS_HANDLER( ActionJumpToLocation, 214 );
// location Location(object oArea, vector vPosition, float fOrientation);
DECLARE_NSS_HANDLER( Location, 215 );
// void ApplyEffectAtLocation(int nDurationType, effect eEffect, location lLocation, float fDuration=0.0f);
DECLARE_NSS_HANDLER( ApplyEffectAtLocation, 216 );
// int GetIsPC(object oCreature);
DECLARE_NSS_HANDLER( GetIsPC, 217 );
// float FeetToMeters(float fFeet);
// DECLARE_NSS_HANDLER( FeetToMeters, 218 );
// float YardsToMeters(float fYards);
// DECLARE_NSS_HANDLER( YardsToMeters, 219 );
// void ApplyEffectToObject(int nDurationType, effect eEffect, object oTarget, float fDuration=0.0f);
DECLARE_NSS_HANDLER( ApplyEffectToObject, 220 );
// void SpeakString(string sStringToSpeak, int nTalkVolume=TALKVOLUME_TALK);
DECLARE_NSS_HANDLER( SpeakString, 221 );
// location GetSpellTargetLocation();
DECLARE_NSS_HANDLER( GetSpellTargetLocation, 222 );
// vector GetPositionFromLocation(location lLocation);
DECLARE_NSS_HANDLER( GetPositionFromLocation, 223 );
// object GetAreaFromLocation(location lLocation);
DECLARE_NSS_HANDLER( GetAreaFromLocation, 224 );
// float GetFacingFromLocation(location lLocation);
DECLARE_NSS_HANDLER( GetFacingFromLocation, 225 );
// object GetNearestCreatureToLocation(int nFirstCriteriaType, int nFirstCriteriaValue,  location lLocation, int nNth=1, int nSecondCriteriaType=-1, int nSecondCriteriaValue=-1, int nThirdCriteriaType=-1,  int nThirdCriteriaValue=-1 );
DECLARE_NSS_HANDLER( GetNearestCreatureToLocation, 226 );
// object GetNearestObject(int nObjectType=OBJECT_TYPE_ALL, object oTarget=OBJECT_SELF, int nNth=1);
DECLARE_NSS_HANDLER( GetNearestObject, 227 );
// object GetNearestObjectToLocation(int nObjectType, location lLocation, int nNth=1);
DECLARE_NSS_HANDLER( GetNearestObjectToLocation, 228 );
// object GetNearestObjectByTag(string sTag, object oTarget=OBJECT_SELF, int nNth=1);
DECLARE_NSS_HANDLER( GetNearestObjectByTag, 229 );
// float IntToFloat(int nInteger);
// DECLARE_NSS_HANDLER( IntToFloat, 230 );
// int FloatToInt(float fFloat);
// DECLARE_NSS_HANDLER( FloatToInt, 231 );
// int StringToInt(string sNumber);
// DECLARE_NSS_HANDLER( StringToInt, 232 );
// float StringToFloat(string sNumber);
// DECLARE_NSS_HANDLER( StringToFloat, 233 );
// void   ActionCastSpellAtLocation(int nSpell, location lTargetLocation, int nMetaMagic=METAMAGIC_ANY, int bCheat=FALSE, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT, int bInstantSpell=FALSE, int nDomainLevel=0);
DECLARE_NSS_HANDLER(   ActionCastSpellAtLocation, 234 );
// int GetIsEnemy(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsEnemy, 235 );
// int GetIsFriend(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsFriend, 236 );
// int GetIsNeutral(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsNeutral, 237 );
// object GetPCSpeaker();
DECLARE_NSS_HANDLER( GetPCSpeaker, 238 );
// string GetStringByStrRef(int nStrRef, int nGender=GENDER_MALE);
// DECLARE_NSS_HANDLER( GetStringByStrRef, 239 );
// void ActionSpeakStringByStrRef(int nStrRef, int nTalkVolume=TALKVOLUME_TALK);
DECLARE_NSS_HANDLER( ActionSpeakStringByStrRef, 240 );
// void DestroyObject(object oDestroy, float fDelay=0.0f, int nDisplayFeedback=TRUE);
DECLARE_NSS_HANDLER( DestroyObject, 241 );
// object GetModule();
DECLARE_NSS_HANDLER( GetModule, 242 );
// object CreateObject(int nObjectType, string sTemplate, location lLocation, int bUseAppearAnimation=FALSE, string sNewTag="");
DECLARE_NSS_HANDLER( CreateObject, 243 );
// event EventSpellCastAt(object oCaster, int nSpell, int bHarmful=TRUE);
DECLARE_NSS_HANDLER( EventSpellCastAt, 244 );
// object GetLastSpellCaster();
DECLARE_NSS_HANDLER( GetLastSpellCaster, 245 );
// int GetLastSpell();
DECLARE_NSS_HANDLER( GetLastSpell, 246 );
// int GetUserDefinedEventNumber();
DECLARE_NSS_HANDLER( GetUserDefinedEventNumber, 247 );
// int GetSpellId();
DECLARE_NSS_HANDLER( GetSpellId, 248 );
// string RandomName();
DECLARE_NSS_HANDLER( RandomName, 249 );
// effect EffectPoison(int nPoisonType);
DECLARE_NSS_HANDLER( EffectPoison, 250 );
// effect EffectDisease(int nDiseaseType);
DECLARE_NSS_HANDLER( EffectDisease, 251 );
// effect EffectSilence();
DECLARE_NSS_HANDLER( EffectSilence, 252 );
// string GetName(object oObject);
DECLARE_NSS_HANDLER( GetName, 253 );
// object GetLastSpeaker();
DECLARE_NSS_HANDLER( GetLastSpeaker, 254 );
// int BeginConversation(string sResRef="", object oObjectToDialog=OBJECT_INVALID, int bPreventHello=FALSE);
DECLARE_NSS_HANDLER( BeginConversation, 255 );
// object GetLastPerceived();
DECLARE_NSS_HANDLER( GetLastPerceived, 256 );
// int GetLastPerceptionHeard();
DECLARE_NSS_HANDLER( GetLastPerceptionHeard, 257 );
// int GetLastPerceptionInaudible();
DECLARE_NSS_HANDLER( GetLastPerceptionInaudible, 258 );
// int GetLastPerceptionSeen();
DECLARE_NSS_HANDLER( GetLastPerceptionSeen, 259 );
// object GetLastClosedBy();
DECLARE_NSS_HANDLER( GetLastClosedBy, 260 );
// int GetLastPerceptionVanished();
DECLARE_NSS_HANDLER( GetLastPerceptionVanished, 261 );
// object GetFirstInPersistentObject(object oPersistentObject=OBJECT_SELF, int nResidentObjectType=OBJECT_TYPE_CREATURE, int nPersistentZone=PERSISTENT_ZONE_ACTIVE);
DECLARE_NSS_HANDLER( GetFirstInPersistentObject, 262 );
// object GetNextInPersistentObject(object oPersistentObject=OBJECT_SELF, int nResidentObjectType=OBJECT_TYPE_CREATURE, int nPersistentZone=PERSISTENT_ZONE_ACTIVE);
DECLARE_NSS_HANDLER( GetNextInPersistentObject, 263 );
// object GetAreaOfEffectCreator(object oAreaOfEffectObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetAreaOfEffectCreator, 264 );
// void DeleteLocalInt(object oObject, string sVarName);
DECLARE_NSS_HANDLER( DeleteLocalInt, 265 );
// void DeleteLocalFloat(object oObject, string sVarName);
DECLARE_NSS_HANDLER( DeleteLocalFloat, 266 );
// void DeleteLocalString(object oObject, string sVarName);
DECLARE_NSS_HANDLER( DeleteLocalString, 267 );
// void DeleteLocalObject(object oObject, string sVarName);
DECLARE_NSS_HANDLER( DeleteLocalObject, 268 );
// void DeleteLocalLocation(object oObject, string sVarName);
DECLARE_NSS_HANDLER( DeleteLocalLocation, 269 );
// effect EffectHaste();
DECLARE_NSS_HANDLER( EffectHaste, 270 );
// effect EffectSlow();
DECLARE_NSS_HANDLER( EffectSlow, 271 );
// string ObjectToString(object oObject);
// DECLARE_NSS_HANDLER( ObjectToString, 272 );
// effect EffectImmunity(int nImmunityType);
DECLARE_NSS_HANDLER( EffectImmunity, 273 );
// int GetIsImmune(object oCreature, int nImmunityType, object oVersus=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetIsImmune, 274 );
// effect EffectDamageImmunityIncrease(int nDamageType, int nPercentImmunity);
DECLARE_NSS_HANDLER( EffectDamageImmunityIncrease, 275 );
// int  GetEncounterActive(object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER(  GetEncounterActive, 276 );
// void SetEncounterActive(int nNewValue, object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER( SetEncounterActive, 277 );
// int GetEncounterSpawnsMax(object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetEncounterSpawnsMax, 278 );
// void SetEncounterSpawnsMax(int nNewValue, object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER( SetEncounterSpawnsMax, 279 );
// int  GetEncounterSpawnsCurrent(object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER(  GetEncounterSpawnsCurrent, 280 );
// void SetEncounterSpawnsCurrent(int nNewValue, object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER( SetEncounterSpawnsCurrent, 281 );
// object GetModuleItemAcquired();
DECLARE_NSS_HANDLER( GetModuleItemAcquired, 282 );
// object GetModuleItemAcquiredFrom();
DECLARE_NSS_HANDLER( GetModuleItemAcquiredFrom, 283 );
// void SetCustomToken(int nCustomTokenNumber, string sTokenValue);
DECLARE_NSS_HANDLER( SetCustomToken, 284 );
// int GetHasFeat(int nFeat, object oCreature=OBJECT_SELF, int nIgnoreUses=FALSE);
DECLARE_NSS_HANDLER( GetHasFeat, 285 );
// int GetHasSkill(int nSkill, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetHasSkill, 286 );
// void ActionUseFeat(int nFeat, object oTarget);
DECLARE_NSS_HANDLER( ActionUseFeat, 287 );
// int ActionUseSkill(int nSkill, object oTarget, int nSubSkill=0, object oItemUsed=OBJECT_INVALID );
DECLARE_NSS_HANDLER( ActionUseSkill, 288 );
// int GetObjectSeen(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetObjectSeen, 289 );
// int GetObjectHeard(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetObjectHeard, 290 );
// object GetLastPlayerDied();
DECLARE_NSS_HANDLER( GetLastPlayerDied, 291 );
// object GetModuleItemLost();
DECLARE_NSS_HANDLER( GetModuleItemLost, 292 );
// object GetModuleItemLostBy();
DECLARE_NSS_HANDLER( GetModuleItemLostBy, 293 );
// void ActionDoCommand(action aActionToDo);
DECLARE_NSS_HANDLER( ActionDoCommand, 294 );
// event EventConversation();
DECLARE_NSS_HANDLER( EventConversation, 295 );
// void SetEncounterDifficulty(int nEncounterDifficulty, object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER( SetEncounterDifficulty, 296 );
// int GetEncounterDifficulty(object oEncounter=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetEncounterDifficulty, 297 );
// float GetDistanceBetweenLocations(location lLocationA, location lLocationB);
DECLARE_NSS_HANDLER( GetDistanceBetweenLocations, 298 );
// int GetReflexAdjustedDamage(int nDamage, object oTarget, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetReflexAdjustedDamage, 299 );
// void PlayAnimation(int nAnimation, float fSpeed=1.0, float fSeconds=0.0);
DECLARE_NSS_HANDLER( PlayAnimation, 300 );
// talent TalentSpell(int nSpell);
DECLARE_NSS_HANDLER( TalentSpell, 301 );
// talent TalentFeat(int nFeat);
DECLARE_NSS_HANDLER( TalentFeat, 302 );
// talent TalentSkill(int nSkill);
DECLARE_NSS_HANDLER( TalentSkill, 303 );
// int GetHasSpellEffect(int nSpell, object oObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetHasSpellEffect, 304 );
// int GetEffectSpellId(effect eSpellEffect);
DECLARE_NSS_HANDLER( GetEffectSpellId, 305 );
// int GetCreatureHasTalent(talent tTalent, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetCreatureHasTalent, 306 );
// talent GetCreatureTalentRandom(int nCategory, object oCreature=OBJECT_SELF, int iExcludedTalentsFlag = 0);
DECLARE_NSS_HANDLER( GetCreatureTalentRandom, 307 );
// talent GetCreatureTalentBest(int nCategory, int nCRMax, object oCreature=OBJECT_SELF, int iExcludedTalentsFlag = 0);
DECLARE_NSS_HANDLER( GetCreatureTalentBest, 308 );
// void ActionUseTalentOnObject(talent tChosenTalent, object oTarget);
DECLARE_NSS_HANDLER( ActionUseTalentOnObject, 309 );
// void ActionUseTalentAtLocation(talent tChosenTalent, location lTargetLocation);
DECLARE_NSS_HANDLER( ActionUseTalentAtLocation, 310 );
// int GetGoldPieceValue(object oItem);
DECLARE_NSS_HANDLER( GetGoldPieceValue, 311 );
// int GetIsPlayableRacialType(object oCreature);
DECLARE_NSS_HANDLER( GetIsPlayableRacialType, 312 );
// void JumpToLocation(location lDestination);
DECLARE_NSS_HANDLER( JumpToLocation, 313 );
// effect EffectTemporaryHitpoints(int nHitPoints);
DECLARE_NSS_HANDLER( EffectTemporaryHitpoints, 314 );
// int GetSkillRank(int nSkill, object oTarget=OBJECT_SELF, int bBaseOnly=FALSE );
DECLARE_NSS_HANDLER( GetSkillRank, 315 );
// object GetAttackTarget(object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetAttackTarget, 316 );
// int GetLastAttackType(object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLastAttackType, 317 );
// int GetLastAttackMode(object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLastAttackMode, 318 );
// object GetMaster(object oAssociate=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetMaster, 319 );
// int GetIsInCombat(object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsInCombat, 320 );
// int GetLastAssociateCommand(object oAssociate=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLastAssociateCommand, 321 );
// void GiveGoldToCreature(object oCreature, int nGP, int bDisplayFeedback=TRUE );
DECLARE_NSS_HANDLER( GiveGoldToCreature, 322 );
// void SetIsDestroyable(int bDestroyable, int bRaiseable=TRUE, int bSelectableWhenDead=FALSE);
DECLARE_NSS_HANDLER( SetIsDestroyable, 323 );
// void SetLocked(object oTarget, int bLocked);
DECLARE_NSS_HANDLER( SetLocked, 324 );
// int GetLocked(object oTarget);
DECLARE_NSS_HANDLER( GetLocked, 325 );
// object GetClickingObject();
DECLARE_NSS_HANDLER( GetClickingObject, 326 );
// void SetAssociateListenPatterns( object oTarget=OBJECT_SELF );
DECLARE_NSS_HANDLER( SetAssociateListenPatterns, 327 );
// object GetLastWeaponUsed(object oCreature);
DECLARE_NSS_HANDLER( GetLastWeaponUsed, 328 );
// void ActionInteractObject(object oPlaceable);
DECLARE_NSS_HANDLER( ActionInteractObject, 329 );
// object GetLastUsedBy();
DECLARE_NSS_HANDLER( GetLastUsedBy, 330 );
// int GetAbilityModifier(int nAbility, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetAbilityModifier, 331 );
// int GetIdentified(object oItem);
DECLARE_NSS_HANDLER( GetIdentified, 332 );
// void SetIdentified(object oItem, int bIdentified);
DECLARE_NSS_HANDLER( SetIdentified, 333 );
// void SummonAnimalCompanion(object oMaster=OBJECT_SELF, string sResRef = "");
DECLARE_NSS_HANDLER( SummonAnimalCompanion, 334 );
// void SummonFamiliar(object oMaster=OBJECT_SELF, string sResRef = "");
DECLARE_NSS_HANDLER( SummonFamiliar, 335 );
// object GetBlockingDoor();
DECLARE_NSS_HANDLER( GetBlockingDoor, 336 );
// int GetIsDoorActionPossible(object oTargetDoor, int nDoorAction);
DECLARE_NSS_HANDLER( GetIsDoorActionPossible, 337 );
// void DoDoorAction(object oTargetDoor, int nDoorAction);
DECLARE_NSS_HANDLER( DoDoorAction, 338 );
// object GetFirstItemInInventory(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetFirstItemInInventory, 339 );
// object GetNextItemInInventory(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetNextItemInInventory, 340 );
// int GetClassByPosition(int nClassPosition, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetClassByPosition, 341 );
// int GetLevelByPosition(int nClassPosition, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLevelByPosition, 342 );
// int GetLevelByClass(int nClassType, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLevelByClass, 343 );
// int GetDamageDealtByType(int nDamageType);
DECLARE_NSS_HANDLER( GetDamageDealtByType, 344 );
// int GetTotalDamageDealt();
DECLARE_NSS_HANDLER( GetTotalDamageDealt, 345 );
// object GetLastDamager(object oObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLastDamager, 346 );
// object GetLastDisarmed();
DECLARE_NSS_HANDLER( GetLastDisarmed, 347 );
// object GetLastDisturbed();
DECLARE_NSS_HANDLER( GetLastDisturbed, 348 );
// object GetLastLocked();
DECLARE_NSS_HANDLER( GetLastLocked, 349 );
// object GetLastUnlocked();
DECLARE_NSS_HANDLER( GetLastUnlocked, 350 );
// effect EffectSkillIncrease(int nSkill, int nValue);
DECLARE_NSS_HANDLER( EffectSkillIncrease, 351 );
// int GetInventoryDisturbType();
DECLARE_NSS_HANDLER( GetInventoryDisturbType, 352 );
// object GetInventoryDisturbItem();
DECLARE_NSS_HANDLER( GetInventoryDisturbItem, 353 );
// object GetHenchman(object oMaster=OBJECT_SELF,int nNth=1);
DECLARE_NSS_HANDLER( GetHenchman, 354 );
// effect VersusAlignmentEffect(effect eEffect, int nLawChaos=ALIGNMENT_ALL, int nGoodEvil=ALIGNMENT_ALL);
DECLARE_NSS_HANDLER( VersusAlignmentEffect, 355 );
// effect VersusRacialTypeEffect(effect eEffect, int nRacialType);
DECLARE_NSS_HANDLER( VersusRacialTypeEffect, 356 );
// effect VersusTrapEffect(effect eEffect);
DECLARE_NSS_HANDLER( VersusTrapEffect, 357 );
// int GetGender(object oCreature);
DECLARE_NSS_HANDLER( GetGender, 358 );
// int GetIsTalentValid(talent tTalent);
DECLARE_NSS_HANDLER( GetIsTalentValid, 359 );
// void ActionMoveAwayFromLocation(location lMoveAwayFrom, int bRun=FALSE, float fMoveAwayRange=40.0f);
DECLARE_NSS_HANDLER( ActionMoveAwayFromLocation, 360 );
// object GetAttemptedAttackTarget();
DECLARE_NSS_HANDLER( GetAttemptedAttackTarget, 361 );
// int GetTypeFromTalent(talent tTalent);
DECLARE_NSS_HANDLER( GetTypeFromTalent, 362 );
// int GetIdFromTalent(talent tTalent);
DECLARE_NSS_HANDLER( GetIdFromTalent, 363 );
// object GetAssociate(int nAssociateType, object oMaster=OBJECT_SELF, int nTh=1);
DECLARE_NSS_HANDLER( GetAssociate, 364 );
// void AddHenchman(object oMaster, object oHenchman=OBJECT_SELF);
DECLARE_NSS_HANDLER( AddHenchman, 365 );
// void RemoveHenchman(object oMaster, object oHenchman=OBJECT_SELF);
DECLARE_NSS_HANDLER( RemoveHenchman, 366 );
// void AddJournalQuestEntry(string szPlotID, int nState, object oCreature, int bAllPartyMembers=TRUE, int bAllPlayers=FALSE, int bAllowOverrideHigher=FALSE);
DECLARE_NSS_HANDLER( AddJournalQuestEntry, 367 );
// void RemoveJournalQuestEntry(string szPlotID, object oCreature, int bAllPartyMembers=TRUE, int bAllPlayers=FALSE);
DECLARE_NSS_HANDLER( RemoveJournalQuestEntry, 368 );
// string GetPCPublicCDKey(object oPlayer);
DECLARE_NSS_HANDLER( GetPCPublicCDKey, 369 );
// string GetPCIPAddress(object oPlayer);
DECLARE_NSS_HANDLER( GetPCIPAddress, 370 );
// string GetPCPlayerName(object oPlayer);
DECLARE_NSS_HANDLER( GetPCPlayerName, 371 );
// void SetPCLike(object oPlayer, object oTarget);
DECLARE_NSS_HANDLER( SetPCLike, 372 );
// void SetPCDislike(object oPlayer, object oTarget);
DECLARE_NSS_HANDLER( SetPCDislike, 373 );
// void SendMessageToPC(object oPlayer, string szMessage);
DECLARE_NSS_HANDLER( SendMessageToPC, 374 );
// object GetAttemptedSpellTarget();
DECLARE_NSS_HANDLER( GetAttemptedSpellTarget, 375 );
// object GetLastOpenedBy();
DECLARE_NSS_HANDLER( GetLastOpenedBy, 376 );
// int GetHasSpell(int nSpell, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetHasSpell, 377 );
// void OpenStore(object oStore, object oPC, int nBonusMarkUp=0, int nBonusMarkDown=0);
DECLARE_NSS_HANDLER( OpenStore, 378 );
// effect EffectTurned();
DECLARE_NSS_HANDLER( EffectTurned, 379 );
// object GetFirstFactionMember(object oMemberOfFaction, int bPCOnly=TRUE);
DECLARE_NSS_HANDLER( GetFirstFactionMember, 380 );
// object GetNextFactionMember(object oMemberOfFaction, int bPCOnly=TRUE);
DECLARE_NSS_HANDLER( GetNextFactionMember, 381 );
// void ActionForceMoveToLocation(location lDestination, int bRun=FALSE, float fTimeout=30.0f);
DECLARE_NSS_HANDLER( ActionForceMoveToLocation, 382 );
// void ActionForceMoveToObject(object oMoveTo, int bRun=FALSE, float fRange=1.0f, float fTimeout=30.0f);
DECLARE_NSS_HANDLER( ActionForceMoveToObject, 383 );
// int GetJournalQuestExperience(string szPlotID);
DECLARE_NSS_HANDLER( GetJournalQuestExperience, 384 );
// void JumpToObject(object oToJumpTo, int nWalkStraightLineToPoint=1);
DECLARE_NSS_HANDLER( JumpToObject, 385 );
// void SetMapPinEnabled(object oMapPin, int nEnabled);
DECLARE_NSS_HANDLER( SetMapPinEnabled, 386 );
// effect EffectHitPointChangeWhenDying(float fHitPointChangePerRound);
DECLARE_NSS_HANDLER( EffectHitPointChangeWhenDying, 387 );
// void PopUpGUIPanel(object oPC, int nGUIPanel);
DECLARE_NSS_HANDLER( PopUpGUIPanel, 388 );
// void ClearPersonalReputation(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( ClearPersonalReputation, 389 );
// void SetIsTemporaryFriend(object oTarget, object oSource=OBJECT_SELF, int bDecays=FALSE, float fDurationInSeconds=180.0f);
DECLARE_NSS_HANDLER( SetIsTemporaryFriend, 390 );
// void SetIsTemporaryEnemy(object oTarget, object oSource=OBJECT_SELF, int bDecays=FALSE, float fDurationInSeconds=180.0f);
DECLARE_NSS_HANDLER( SetIsTemporaryEnemy, 391 );
// void SetIsTemporaryNeutral(object oTarget, object oSource=OBJECT_SELF, int bDecays=FALSE, float fDurationInSeconds=180.0f);
DECLARE_NSS_HANDLER( SetIsTemporaryNeutral, 392 );
// void GiveXPToCreature(object oCreature, int nXpAmount);
DECLARE_NSS_HANDLER( GiveXPToCreature, 393 );
// void SetXP(object oCreature, int nXpAmount);
DECLARE_NSS_HANDLER( SetXP, 394 );
// int GetXP(object oCreature);
DECLARE_NSS_HANDLER( GetXP, 395 );
// string IntToHexString(int nInteger);
// DECLARE_NSS_HANDLER( IntToHexString, 396 );
// int GetBaseItemType(object oItem);
DECLARE_NSS_HANDLER( GetBaseItemType, 397 );
// int GetItemHasItemProperty(object oItem, int nProperty);
DECLARE_NSS_HANDLER( GetItemHasItemProperty, 398 );
// void ActionEquipMostDamagingMelee(object oVersus=OBJECT_INVALID, int bOffHand=FALSE);
DECLARE_NSS_HANDLER( ActionEquipMostDamagingMelee, 399 );
// void ActionEquipMostDamagingRanged(object oVersus=OBJECT_INVALID);
DECLARE_NSS_HANDLER( ActionEquipMostDamagingRanged, 400 );
// int GetItemACValue(object oItem);
DECLARE_NSS_HANDLER( GetItemACValue, 401 );
// void ActionRest(int bIgnoreNoRestFlag=0);
DECLARE_NSS_HANDLER( ActionRest, 402 );
// void ExploreAreaForPlayer(object oArea, object oPlayer, int nExplored=TRUE);
DECLARE_NSS_HANDLER( ExploreAreaForPlayer, 403 );
// void ActionEquipMostEffectiveArmor();
DECLARE_NSS_HANDLER( ActionEquipMostEffectiveArmor, 404 );
// int GetIsDay();
DECLARE_NSS_HANDLER( GetIsDay, 405 );
// int GetIsNight();
DECLARE_NSS_HANDLER( GetIsNight, 406 );
// int GetIsDawn();
DECLARE_NSS_HANDLER( GetIsDawn, 407 );
// int GetIsDusk();
DECLARE_NSS_HANDLER( GetIsDusk, 408 );
// int GetIsEncounterCreature(object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsEncounterCreature, 409 );
// object GetLastPlayerDying();
DECLARE_NSS_HANDLER( GetLastPlayerDying, 410 );
// location GetStartingLocation();
DECLARE_NSS_HANDLER( GetStartingLocation, 411 );
// void ChangeToStandardFaction(object oCreatureToChange, int nStandardFaction);
DECLARE_NSS_HANDLER( ChangeToStandardFaction, 412 );
// void SoundObjectPlay(object oSound);
DECLARE_NSS_HANDLER( SoundObjectPlay, 413 );
// void SoundObjectStop(object oSound);
DECLARE_NSS_HANDLER( SoundObjectStop, 414 );
// void SoundObjectSetVolume(object oSound, int nVolume);
DECLARE_NSS_HANDLER( SoundObjectSetVolume, 415 );
// void SoundObjectSetPosition(object oSound, vector vPosition);
DECLARE_NSS_HANDLER( SoundObjectSetPosition, 416 );
// void SpeakOneLinerConversation(string sDialogResRef="", object oTokenTarget=OBJECT_INVALID, int nTalkVolume=TALKVOLUME_TALK);
DECLARE_NSS_HANDLER( SpeakOneLinerConversation, 417 );
// int GetGold(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetGold, 418 );
// object GetLastRespawnButtonPresser();
DECLARE_NSS_HANDLER( GetLastRespawnButtonPresser, 419 );
// int GetIsDM(object oCreature);
DECLARE_NSS_HANDLER( GetIsDM, 420 );
// void PlayVoiceChat(int nVoiceChatID, object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( PlayVoiceChat, 421 );
// int GetIsWeaponEffective(object oVersus=OBJECT_INVALID, int bOffHand=FALSE);
DECLARE_NSS_HANDLER( GetIsWeaponEffective, 422 );
// int GetLastSpellHarmful();
DECLARE_NSS_HANDLER( GetLastSpellHarmful, 423 );
// event EventActivateItem(object oItem, location lTarget, object oTarget=OBJECT_INVALID);
DECLARE_NSS_HANDLER( EventActivateItem, 424 );
// void MusicBackgroundPlay(object oArea);
DECLARE_NSS_HANDLER( MusicBackgroundPlay, 425 );
// void MusicBackgroundStop(object oArea);
DECLARE_NSS_HANDLER( MusicBackgroundStop, 426 );
// void MusicBackgroundSetDelay(object oArea, int nDelay);
DECLARE_NSS_HANDLER( MusicBackgroundSetDelay, 427 );
// void MusicBackgroundChangeDay(object oArea, int nTrack);
DECLARE_NSS_HANDLER( MusicBackgroundChangeDay, 428 );
// void MusicBackgroundChangeNight(object oArea, int nTrack);
DECLARE_NSS_HANDLER( MusicBackgroundChangeNight, 429 );
// void MusicBattlePlay(object oArea);
DECLARE_NSS_HANDLER( MusicBattlePlay, 430 );
// void MusicBattleStop(object oArea);
DECLARE_NSS_HANDLER( MusicBattleStop, 431 );
// void MusicBattleChange(object oArea, int nTrack);
DECLARE_NSS_HANDLER( MusicBattleChange, 432 );
// void AmbientSoundPlay(object oArea);
DECLARE_NSS_HANDLER( AmbientSoundPlay, 433 );
// void AmbientSoundStop(object oArea);
DECLARE_NSS_HANDLER( AmbientSoundStop, 434 );
// void AmbientSoundChangeDay(object oArea, int nTrack);
DECLARE_NSS_HANDLER( AmbientSoundChangeDay, 435 );
// void AmbientSoundChangeNight(object oArea, int nTrack);
DECLARE_NSS_HANDLER( AmbientSoundChangeNight, 436 );
// object GetLastKiller();
DECLARE_NSS_HANDLER( GetLastKiller, 437 );
// object GetSpellCastItem();
DECLARE_NSS_HANDLER( GetSpellCastItem, 438 );
// object GetItemActivated();
DECLARE_NSS_HANDLER( GetItemActivated, 439 );
// object GetItemActivator();
DECLARE_NSS_HANDLER( GetItemActivator, 440 );
// location GetItemActivatedTargetLocation();
DECLARE_NSS_HANDLER( GetItemActivatedTargetLocation, 441 );
// object GetItemActivatedTarget();
DECLARE_NSS_HANDLER( GetItemActivatedTarget, 442 );
// int GetIsOpen(object oObject);
DECLARE_NSS_HANDLER( GetIsOpen, 443 );
// void TakeGoldFromCreature(int nAmount, object oCreatureToTakeFrom, int bDestroy=FALSE, int bDisplayFeedback=TRUE);
DECLARE_NSS_HANDLER( TakeGoldFromCreature, 444 );
// int IsInConversation(object oObject);
DECLARE_NSS_HANDLER( IsInConversation, 445 );
// effect EffectAbilityDecrease(int nAbility, int nModifyBy);
DECLARE_NSS_HANDLER( EffectAbilityDecrease, 446 );
// effect EffectAttackDecrease(int nPenalty, int nModifierType=ATTACK_BONUS_MISC);
DECLARE_NSS_HANDLER( EffectAttackDecrease, 447 );
// effect EffectDamageDecrease(int nPenalty, int nDamageType=DAMAGE_TYPE_MAGICAL);
DECLARE_NSS_HANDLER( EffectDamageDecrease, 448 );
// effect EffectDamageImmunityDecrease(int nDamageType, int nPercentImmunity);
DECLARE_NSS_HANDLER( EffectDamageImmunityDecrease, 449 );
// effect EffectACDecrease(int nValue, int nModifyType=AC_DODGE_BONUS, int nDamageType=AC_VS_DAMAGE_TYPE_ALL);
DECLARE_NSS_HANDLER( EffectACDecrease, 450 );
// effect EffectMovementSpeedDecrease(int nPercentChange);
DECLARE_NSS_HANDLER( EffectMovementSpeedDecrease, 451 );
// effect EffectSavingThrowDecrease(int nSave, int nValue, int nSaveType=SAVING_THROW_TYPE_ALL);
DECLARE_NSS_HANDLER( EffectSavingThrowDecrease, 452 );
// effect EffectSkillDecrease(int nSkill, int nValue);
DECLARE_NSS_HANDLER( EffectSkillDecrease, 453 );
// effect EffectSpellResistanceDecrease(int nValue);
DECLARE_NSS_HANDLER( EffectSpellResistanceDecrease, 454 );
// int GetPlotFlag(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetPlotFlag, 455 );
// void SetPlotFlag(object oTarget, int nPlotFlag);
DECLARE_NSS_HANDLER( SetPlotFlag, 456 );
// effect EffectInvisibility(int nInvisibilityType);
DECLARE_NSS_HANDLER( EffectInvisibility, 457 );
// effect EffectConcealment(int nPercentage, int nMissType=MISS_CHANCE_TYPE_NORMAL);
DECLARE_NSS_HANDLER( EffectConcealment, 458 );
// effect EffectDarkness();
DECLARE_NSS_HANDLER( EffectDarkness, 459 );
// effect EffectDispelMagicAll(int nCasterLevel, action aOnDispelEffect );
DECLARE_NSS_HANDLER( EffectDispelMagicAll, 460 );
// effect EffectUltravision();
DECLARE_NSS_HANDLER( EffectUltravision, 461 );
// effect EffectNegativeLevel(int nNumLevels, int bHPBonus=FALSE);
DECLARE_NSS_HANDLER( EffectNegativeLevel, 462 );
// effect EffectPolymorph(int nPolymorphSelection, int nLocked=FALSE, int bWildshape=FALSE);
DECLARE_NSS_HANDLER( EffectPolymorph, 463 );
// effect EffectSanctuary(int nDifficultyClass);
DECLARE_NSS_HANDLER( EffectSanctuary, 464 );
// effect EffectTrueSeeing();
DECLARE_NSS_HANDLER( EffectTrueSeeing, 465 );
// effect EffectSeeInvisible();
DECLARE_NSS_HANDLER( EffectSeeInvisible, 466 );
// effect EffectTimeStop();
DECLARE_NSS_HANDLER( EffectTimeStop, 467 );
// effect EffectBlindness();
DECLARE_NSS_HANDLER( EffectBlindness, 468 );
// int GetIsReactionTypeFriendly(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsReactionTypeFriendly, 469 );
// int GetIsReactionTypeNeutral(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsReactionTypeNeutral, 470 );
// int GetIsReactionTypeHostile(object oTarget, object oSource=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsReactionTypeHostile, 471 );
// effect EffectSpellLevelAbsorption(int nMaxSpellLevelAbsorbed, int nTotalSpellLevelsAbsorbed=0, int nSpellSchool=SPELL_SCHOOL_GENERAL );
DECLARE_NSS_HANDLER( EffectSpellLevelAbsorption, 472 );
// effect EffectDispelMagicBest(int nCasterLevel, action aOnDispelEffect );
DECLARE_NSS_HANDLER( EffectDispelMagicBest, 473 );
// void ActivatePortal(object oTarget, string sIPaddress="", string sPassword="", string sWaypointTag="", int bSeemless=FALSE);
DECLARE_NSS_HANDLER( ActivatePortal, 474 );
// int GetNumStackedItems(object oItem);
DECLARE_NSS_HANDLER( GetNumStackedItems, 475 );
// void SurrenderToEnemies();
DECLARE_NSS_HANDLER( SurrenderToEnemies, 476 );
// effect EffectMissChance(int nPercentage, int nMissChanceType=MISS_CHANCE_TYPE_NORMAL);
DECLARE_NSS_HANDLER( EffectMissChance, 477 );
// int GetTurnResistanceHD(object oUndead=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetTurnResistanceHD, 478 );
// int GetCreatureSize(object oCreature);
DECLARE_NSS_HANDLER( GetCreatureSize, 479 );
// effect EffectDisappearAppear(location lLocation, int nAnimation=1);
DECLARE_NSS_HANDLER( EffectDisappearAppear, 480 );
// effect EffectDisappear(int nAnimation=1);
DECLARE_NSS_HANDLER( EffectDisappear, 481 );
// effect EffectAppear(int nAnimation=1);
DECLARE_NSS_HANDLER( EffectAppear, 482 );
// void ActionUnlockObject(object oTarget);
DECLARE_NSS_HANDLER( ActionUnlockObject, 483 );
// void ActionLockObject(object oTarget);
DECLARE_NSS_HANDLER( ActionLockObject, 484 );
// effect EffectModifyAttacks(int nAttacks);
DECLARE_NSS_HANDLER( EffectModifyAttacks, 485 );
// object GetLastTrapDetected(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLastTrapDetected, 486 );
// effect EffectDamageShield(int nDamageAmount, int nRandomAmount, int nDamageType);
DECLARE_NSS_HANDLER( EffectDamageShield, 487 );
// object GetNearestTrapToObject(object oTarget=OBJECT_SELF, int nTrapDetected=TRUE);
DECLARE_NSS_HANDLER( GetNearestTrapToObject, 488 );
// string GetDeity(object oCreature);
DECLARE_NSS_HANDLER( GetDeity, 489 );
// int GetSubRace(object oTarget);
DECLARE_NSS_HANDLER( GetSubRace, 490 );
// int GetFortitudeSavingThrow(object oTarget);
DECLARE_NSS_HANDLER( GetFortitudeSavingThrow, 491 );
// int GetWillSavingThrow(object oTarget);
DECLARE_NSS_HANDLER( GetWillSavingThrow, 492 );
// int GetReflexSavingThrow(object oTarget);
DECLARE_NSS_HANDLER( GetReflexSavingThrow, 493 );
// float GetChallengeRating(object oCreature);
DECLARE_NSS_HANDLER( GetChallengeRating, 494 );
// int GetAge(object oCreature);
DECLARE_NSS_HANDLER( GetAge, 495 );
// int GetMovementRate(object oCreature);
DECLARE_NSS_HANDLER( GetMovementRate, 496 );
// int GetAnimalCompanionCreatureType(object oCreature);
DECLARE_NSS_HANDLER( GetAnimalCompanionCreatureType, 497 );
// int GetFamiliarCreatureType(object oCreature);
DECLARE_NSS_HANDLER( GetFamiliarCreatureType, 498 );
// string GetAnimalCompanionName(object oTarget);
DECLARE_NSS_HANDLER( GetAnimalCompanionName, 499 );
// string GetFamiliarName(object oCreature);
DECLARE_NSS_HANDLER( GetFamiliarName, 500 );
// void ActionCastFakeSpellAtObject(int nSpell, object oTarget, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT);
DECLARE_NSS_HANDLER( ActionCastFakeSpellAtObject, 501 );
// void ActionCastFakeSpellAtLocation(int nSpell, location lTarget, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT);
DECLARE_NSS_HANDLER( ActionCastFakeSpellAtLocation, 502 );
// void RemoveSummonedAssociate(object oMaster, object oAssociate=OBJECT_SELF);
DECLARE_NSS_HANDLER( RemoveSummonedAssociate, 503 );
// void SetCameraMode(object oPlayer, int nCameraMode);
DECLARE_NSS_HANDLER( SetCameraMode, 504 );
// int GetIsResting(object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsResting, 505 );
// object GetLastPCRested();
DECLARE_NSS_HANDLER( GetLastPCRested, 506 );
// void SetWeather(object oTarget, int nWeatherType, int nPower = WEATHER_POWER_MEDIUM);
DECLARE_NSS_HANDLER( SetWeather, 507 );
// int GetLastRestEventType();
DECLARE_NSS_HANDLER( GetLastRestEventType, 508 );
// void StartNewModule(string sModuleName, string sWaypoint = "");
DECLARE_NSS_HANDLER( StartNewModule, 509 );
// effect EffectSwarm(int nLooping, string sCreatureTemplate1, string sCreatureTemplate2="", string sCreatureTemplate3="", string sCreatureTemplate4="");
DECLARE_NSS_HANDLER( EffectSwarm, 510 );
// int GetWeaponRanged(object oItem);
DECLARE_NSS_HANDLER( GetWeaponRanged, 511 );
// void DoSinglePlayerAutoSave();
// DECLARE_NSS_HANDLER( DoSinglePlayerAutoSave, 512 );
// int GetGameDifficulty();
// DECLARE_NSS_HANDLER( GetGameDifficulty, 513 );
// void SetTileMainLightColor(location lTileLocation, int nMainLight1Color, int nMainLight2Color);
DECLARE_NSS_HANDLER( SetTileMainLightColor, 514 );
// void SetTileSourceLightColor(location lTileLocation, int nSourceLight1Color, int nSourceLight2Color);
DECLARE_NSS_HANDLER( SetTileSourceLightColor, 515 );
// void RecomputeStaticLighting(object oArea);
DECLARE_NSS_HANDLER( RecomputeStaticLighting, 516 );
// int GetTileMainLight1Color(location lTile);
DECLARE_NSS_HANDLER( GetTileMainLight1Color, 517 );
// int GetTileMainLight2Color(location lTile);
DECLARE_NSS_HANDLER( GetTileMainLight2Color, 518 );
// int GetTileSourceLight1Color(location lTile);
DECLARE_NSS_HANDLER( GetTileSourceLight1Color, 519 );
// int GetTileSourceLight2Color(location lTile);
DECLARE_NSS_HANDLER( GetTileSourceLight2Color, 520 );
// void SetPanelButtonFlash(object oPlayer, int nButton, int nEnableFlash);
DECLARE_NSS_HANDLER( SetPanelButtonFlash, 521 );
// int GetCurrentAction(object oObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetCurrentAction, 522 );
// void SetStandardFactionReputation(int nStandardFaction, int nNewReputation, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( SetStandardFactionReputation, 523 );
// int GetStandardFactionReputation(int nStandardFaction, object oCreature=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetStandardFactionReputation, 524 );
// void FloatingTextStrRefOnCreature(int nStrRefToDisplay, object oCreatureToFloatAbove, int bBroadcastToFaction=TRUE, float fDuration=5.0,
DECLARE_NSS_HANDLER( FloatingTextStrRefOnCreature, 525 );
// void FloatingTextStringOnCreature(string sStringToDisplay, object oCreatureToFloatAbove, int bBroadcastToFaction=TRUE, float fDuration=5.0,
DECLARE_NSS_HANDLER( FloatingTextStringOnCreature, 526 );
// int GetTrapDisarmable(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapDisarmable, 527 );
// int GetTrapDetectable(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapDetectable, 528 );
// int GetTrapDetectedBy(object oTrapObject, object oCreature);
DECLARE_NSS_HANDLER( GetTrapDetectedBy, 529 );
// int GetTrapFlagged(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapFlagged, 530 );
// int GetTrapBaseType(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapBaseType, 531 );
// int GetTrapOneShot(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapOneShot, 532 );
// object GetTrapCreator(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapCreator, 533 );
// string GetTrapKeyTag(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapKeyTag, 534 );
// int GetTrapDisarmDC(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapDisarmDC, 535 );
// int GetTrapDetectDC(object oTrapObject);
DECLARE_NSS_HANDLER( GetTrapDetectDC, 536 );
// int GetLockKeyRequired(object oObject);
DECLARE_NSS_HANDLER( GetLockKeyRequired, 537 );
// string GetLockKeyTag(object oObject);
DECLARE_NSS_HANDLER( GetLockKeyTag, 538 );
// int GetLockLockable(object oObject);
DECLARE_NSS_HANDLER( GetLockLockable, 539 );
// int GetLockUnlockDC(object oObject);
DECLARE_NSS_HANDLER( GetLockUnlockDC, 540 );
// int GetLockLockDC(object oObject);
DECLARE_NSS_HANDLER( GetLockLockDC, 541 );
// object GetPCLevellingUp();
DECLARE_NSS_HANDLER( GetPCLevellingUp, 542 );
// int GetHasFeatEffect(int nFeat, object oObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetHasFeatEffect, 543 );
// void SetPlaceableIllumination(object oPlaceable=OBJECT_SELF, int bIlluminate=TRUE);
DECLARE_NSS_HANDLER( SetPlaceableIllumination, 544 );
// int GetPlaceableIllumination(object oPlaceable=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetPlaceableIllumination, 545 );
// int GetIsPlaceableObjectActionPossible(object oPlaceable, int nPlaceableAction);
DECLARE_NSS_HANDLER( GetIsPlaceableObjectActionPossible, 546 );
// void DoPlaceableObjectAction(object oPlaceable, int nPlaceableAction);
DECLARE_NSS_HANDLER( DoPlaceableObjectAction, 547 );
// object GetFirstPC(int bOwnedCharacter=TRUE);
DECLARE_NSS_HANDLER( GetFirstPC, 548 );
// object GetNextPC(int bOwnedCharacter=TRUE);
DECLARE_NSS_HANDLER( GetNextPC, 549 );
// int SetTrapDetectedBy(object oTrap, object oDetector);
DECLARE_NSS_HANDLER( SetTrapDetectedBy, 550 );
// int GetIsTrapped(object oObject);
DECLARE_NSS_HANDLER( GetIsTrapped, 551 );
// effect EffectTurnResistanceDecrease(int nHitDice);
DECLARE_NSS_HANDLER( EffectTurnResistanceDecrease, 552 );
// effect EffectTurnResistanceIncrease(int nHitDice);
DECLARE_NSS_HANDLER( EffectTurnResistanceIncrease, 553 );
// void PopUpDeathGUIPanel(object oPC, int bRespawnButtonEnabled=TRUE, int bWaitForHelpButtonEnabled=TRUE, int nHelpStringReference=0, string sHelpString="");
DECLARE_NSS_HANDLER( PopUpDeathGUIPanel, 554 );
// void SetTrapDisabled(object oTrap);
DECLARE_NSS_HANDLER( SetTrapDisabled, 555 );
// object GetLastHostileActor(object oVictim=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetLastHostileActor, 556 );
// void ExportAllCharacters();
DECLARE_NSS_HANDLER( ExportAllCharacters, 557 );
// // int MusicBackgroundGetDayTrack(object oArea);
DECLARE_NSS_HANDLER( MusicBackgroundGetDayTrack, 558 );
// int MusicBackgroundGetNightTrack(object oArea);
DECLARE_NSS_HANDLER( MusicBackgroundGetNightTrack, 559 );
// void WriteTimestampedLogEntry(string sLogEntry);
// DECLARE_NSS_HANDLER( WriteTimestampedLogEntry, 560 );
// string GetModuleName();
// DECLARE_NSS_HANDLER( GetModuleName, 561 );
// object GetFactionLeader(object oMemberOfFaction);
DECLARE_NSS_HANDLER( GetFactionLeader, 562 );
// void SendMessageToAllDMs(string szMessage);
DECLARE_NSS_HANDLER( SendMessageToAllDMs, 563 );
// void EndGame(string sEndMovie);
// DECLARE_NSS_HANDLER( EndGame, 564 );
// void BootPC(object oPlayer);
DECLARE_NSS_HANDLER( BootPC, 565 );
// void ActionCounterSpell(object oCounterSpellTarget);
DECLARE_NSS_HANDLER( ActionCounterSpell, 566 );
// void AmbientSoundSetDayVolume(object oArea, int nVolume);
DECLARE_NSS_HANDLER( AmbientSoundSetDayVolume, 567 );
// void AmbientSoundSetNightVolume(object oArea, int nVolume);
DECLARE_NSS_HANDLER( AmbientSoundSetNightVolume, 568 );
// int MusicBackgroundGetBattleTrack(object oArea);
DECLARE_NSS_HANDLER( MusicBackgroundGetBattleTrack, 569 );
// int GetHasInventory(object oObject);
DECLARE_NSS_HANDLER( GetHasInventory, 570 );
// float GetStrRefSoundDuration(int nStrRef);
DECLARE_NSS_HANDLER( GetStrRefSoundDuration, 571 );
// void AddToParty(object oPC, object oPartyLeader);
DECLARE_NSS_HANDLER( AddToParty, 572 );
// void RemoveFromParty(object oPC);
DECLARE_NSS_HANDLER( RemoveFromParty, 573 );
// int GetStealthMode(object oCreature);
DECLARE_NSS_HANDLER( GetStealthMode, 574 );
// int GetDetectMode(object oCreature);
DECLARE_NSS_HANDLER( GetDetectMode, 575 );
// int GetDefensiveCastingMode(object oCreature);
DECLARE_NSS_HANDLER( GetDefensiveCastingMode, 576 );
// int GetAppearanceType(object oCreature);
DECLARE_NSS_HANDLER( GetAppearanceType, 577 );
// void SpawnScriptDebugger();
// DECLARE_NSS_HANDLER( SpawnScriptDebugger, 578 );
// int GetModuleItemAcquiredStackSize();
DECLARE_NSS_HANDLER( GetModuleItemAcquiredStackSize, 579 );
// void DecrementRemainingFeatUses(object oCreature, int nFeat);
DECLARE_NSS_HANDLER( DecrementRemainingFeatUses, 580 );
// void DecrementRemainingSpellUses(object oCreature, int nSpell);
DECLARE_NSS_HANDLER( DecrementRemainingSpellUses, 581 );
// string GetResRef(object oObject);
DECLARE_NSS_HANDLER( GetResRef, 582 );
// effect EffectPetrify();
DECLARE_NSS_HANDLER( EffectPetrify, 583 );
// object CopyItem(object oItem, object oTargetInventory=OBJECT_INVALID, int bCopyVars=FALSE);
DECLARE_NSS_HANDLER( CopyItem, 584 );
// effect EffectCutsceneParalyze();
DECLARE_NSS_HANDLER( EffectCutsceneParalyze, 585 );
// int GetDroppableFlag(object oItem);
DECLARE_NSS_HANDLER( GetDroppableFlag, 586 );
// int GetUseableFlag(object oObject=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetUseableFlag, 587 );
// int GetStolenFlag(object oStolen);
DECLARE_NSS_HANDLER( GetStolenFlag, 588 );
// void SetCampaignFloat(string sCampaignName, string sVarName, float flFloat, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( SetCampaignFloat, 589 );
// void SetCampaignInt(string sCampaignName, string sVarName, int nInt, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( SetCampaignInt, 590 );
// void SetCampaignVector(string sCampaignName, string sVarName, vector vVector, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( SetCampaignVector, 591 );
// void SetCampaignLocation(string sCampaignName, string sVarName, location locLocation, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( SetCampaignLocation, 592 );
// void SetCampaignString(string sCampaignName, string sVarName, string sString, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( SetCampaignString, 593 );
// void DestroyCampaignDatabase(string sCampaignName);
DECLARE_NSS_HANDLER( DestroyCampaignDatabase, 594 );
// float GetCampaignFloat(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetCampaignFloat, 595 );
// int GetCampaignInt(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetCampaignInt, 596 );
// vector GetCampaignVector(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetCampaignVector, 597 );
// location GetCampaignLocation(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetCampaignLocation, 598 );
// string GetCampaignString(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( GetCampaignString, 599 );
// object CopyObject(object oSource, location locLocation, object oOwner = OBJECT_INVALID, string sNewTag = "");
DECLARE_NSS_HANDLER( CopyObject, 600 );
// void DeleteCampaignVariable(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( DeleteCampaignVariable, 601 );
// int StoreCampaignObject(string sCampaignName, string sVarName, object oObject, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( StoreCampaignObject, 602 );
// object RetrieveCampaignObject(string sCampaignName, string sVarName, location locLocation, object oOwner = OBJECT_INVALID, object oPlayer=OBJECT_INVALID);
DECLARE_NSS_HANDLER( RetrieveCampaignObject, 603 );
// effect EffectCutsceneDominated();
DECLARE_NSS_HANDLER( EffectCutsceneDominated, 604 );
// int GetItemStackSize(object oItem);
DECLARE_NSS_HANDLER( GetItemStackSize, 605 );
// void SetItemStackSize(object oItem, int nSize, int bDisplayFeedback=TRUE);
DECLARE_NSS_HANDLER( SetItemStackSize, 606 );
// int GetItemCharges(object oItem);
DECLARE_NSS_HANDLER( GetItemCharges, 607 );
// void SetItemCharges(object oItem, int nCharges);
DECLARE_NSS_HANDLER( SetItemCharges, 608 );
// void AddItemProperty(int nDurationType, itemproperty ipProperty, object oItem, float fDuration=0.0f);
DECLARE_NSS_HANDLER( AddItemProperty, 609 );
// void RemoveItemProperty(object oItem, itemproperty ipProperty);
DECLARE_NSS_HANDLER( RemoveItemProperty, 610 );
// int GetIsItemPropertyValid(itemproperty ipProperty);
DECLARE_NSS_HANDLER( GetIsItemPropertyValid, 611 );
// itemproperty GetFirstItemProperty(object oItem);
DECLARE_NSS_HANDLER( GetFirstItemProperty, 612 );
// itemproperty GetNextItemProperty(object oItem);
DECLARE_NSS_HANDLER( GetNextItemProperty, 613 );
// int GetItemPropertyType(itemproperty ip);
DECLARE_NSS_HANDLER( GetItemPropertyType, 614 );
// int GetItemPropertyDurationType(itemproperty ip);
DECLARE_NSS_HANDLER( GetItemPropertyDurationType, 615 );
// itemproperty ItemPropertyAbilityBonus(int nAbility, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyAbilityBonus, 616 );
// itemproperty ItemPropertyACBonus(int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyACBonus, 617 );
// itemproperty ItemPropertyACBonusVsAlign(int nAlignGroup, int nACBonus);
DECLARE_NSS_HANDLER( ItemPropertyACBonusVsAlign, 618 );
// itemproperty ItemPropertyACBonusVsDmgType(int nDamageType, int nACBonus);
DECLARE_NSS_HANDLER( ItemPropertyACBonusVsDmgType, 619 );
// itemproperty ItemPropertyACBonusVsRace(int nRace, int nACBonus);
DECLARE_NSS_HANDLER( ItemPropertyACBonusVsRace, 620 );
// itemproperty ItemPropertyACBonusVsSAlign(int nAlign, int nACBonus);
DECLARE_NSS_HANDLER( ItemPropertyACBonusVsSAlign, 621 );
// itemproperty ItemPropertyEnhancementBonus(int nEnhancementBonus);
DECLARE_NSS_HANDLER( ItemPropertyEnhancementBonus, 622 );
// itemproperty ItemPropertyEnhancementBonusVsAlign(int nAlignGroup, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyEnhancementBonusVsAlign, 623 );
// itemproperty ItemPropertyEnhancementBonusVsRace(int nRace, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyEnhancementBonusVsRace, 624 );
// itemproperty ItemPropertyEnhancementBonusVsSAlign(int nAlign, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyEnhancementBonusVsSAlign, 625 );
// itemproperty ItemPropertyEnhancementPenalty(int nPenalty);
DECLARE_NSS_HANDLER( ItemPropertyEnhancementPenalty, 626 );
// itemproperty ItemPropertyWeightReduction(int nReduction);
DECLARE_NSS_HANDLER( ItemPropertyWeightReduction, 627 );
// itemproperty ItemPropertyBonusFeat(int nFeat);
DECLARE_NSS_HANDLER( ItemPropertyBonusFeat, 628 );
// itemproperty ItemPropertyBonusLevelSpell(int nClass, int nSpellLevel);
DECLARE_NSS_HANDLER( ItemPropertyBonusLevelSpell, 629 );
// itemproperty ItemPropertyCastSpell(int nSpell, int nNumUses);
DECLARE_NSS_HANDLER( ItemPropertyCastSpell, 630 );
// itemproperty ItemPropertyDamageBonus(int nDamageType, int nDamage);
DECLARE_NSS_HANDLER( ItemPropertyDamageBonus, 631 );
// itemproperty ItemPropertyDamageBonusVsAlign(int nAlignGroup, int nDamageType, int nDamage);
DECLARE_NSS_HANDLER( ItemPropertyDamageBonusVsAlign, 632 );
// itemproperty ItemPropertyDamageBonusVsRace(int nRace, int nDamageType, int nDamage);
DECLARE_NSS_HANDLER( ItemPropertyDamageBonusVsRace, 633 );
// itemproperty ItemPropertyDamageBonusVsSAlign(int nAlign, int nDamageType, int nDamage);
DECLARE_NSS_HANDLER( ItemPropertyDamageBonusVsSAlign, 634 );
// itemproperty ItemPropertyDamageImmunity(int nDamageType, int nImmuneBonus);
DECLARE_NSS_HANDLER( ItemPropertyDamageImmunity, 635 );
// itemproperty ItemPropertyDamagePenalty(int nPenalty);
DECLARE_NSS_HANDLER( ItemPropertyDamagePenalty, 636 );
// itemproperty ItemPropertyDamageReduction(int nAmount, int nDRSubType, int nLimit=0, int nDRType=DR_TYPE_MAGICBONUS);
DECLARE_NSS_HANDLER( ItemPropertyDamageReduction, 637 );
// itemproperty ItemPropertyDamageResistance(int nDamageType, int nHPResist);
DECLARE_NSS_HANDLER( ItemPropertyDamageResistance, 638 );
// itemproperty ItemPropertyDamageVulnerability(int nDamageType, int nVulnerability);
DECLARE_NSS_HANDLER( ItemPropertyDamageVulnerability, 639 );
// itemproperty ItemPropertyDarkvision();
DECLARE_NSS_HANDLER( ItemPropertyDarkvision, 640 );
// itemproperty ItemPropertyDecreaseAbility(int nAbility, int nModifier);
DECLARE_NSS_HANDLER( ItemPropertyDecreaseAbility, 641 );
// itemproperty ItemPropertyDecreaseAC(int nModifierType, int nPenalty);
DECLARE_NSS_HANDLER( ItemPropertyDecreaseAC, 642 );
// itemproperty ItemPropertyDecreaseSkill(int nSkill, int nPenalty);
DECLARE_NSS_HANDLER( ItemPropertyDecreaseSkill, 643 );
// itemproperty ItemPropertyContainerReducedWeight(int nContainerType);
DECLARE_NSS_HANDLER( ItemPropertyContainerReducedWeight, 644 );
// itemproperty ItemPropertyExtraMeleeDamageType(int nDamageType);
DECLARE_NSS_HANDLER( ItemPropertyExtraMeleeDamageType, 645 );
// itemproperty ItemPropertyExtraRangeDamageType(int nDamageType);
DECLARE_NSS_HANDLER( ItemPropertyExtraRangeDamageType, 646 );
// itemproperty ItemPropertyHaste();
DECLARE_NSS_HANDLER( ItemPropertyHaste, 647 );
// itemproperty ItemPropertyHolyAvenger();
DECLARE_NSS_HANDLER( ItemPropertyHolyAvenger, 648 );
// itemproperty ItemPropertyImmunityMisc(int nImmunityType);
DECLARE_NSS_HANDLER( ItemPropertyImmunityMisc, 649 );
// itemproperty ItemPropertyImprovedEvasion();
DECLARE_NSS_HANDLER( ItemPropertyImprovedEvasion, 650 );
// itemproperty ItemPropertyBonusSpellResistance(int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyBonusSpellResistance, 651 );
// itemproperty ItemPropertyBonusSavingThrowVsX(int nBonusType, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyBonusSavingThrowVsX, 652 );
// itemproperty ItemPropertyBonusSavingThrow(int nBaseSaveType, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyBonusSavingThrow, 653 );
// itemproperty ItemPropertyKeen();
DECLARE_NSS_HANDLER( ItemPropertyKeen, 654 );
// itemproperty ItemPropertyLight(int nBrightness, int nColor);
DECLARE_NSS_HANDLER( ItemPropertyLight, 655 );
// itemproperty ItemPropertyMaxRangeStrengthMod(int nModifier);
DECLARE_NSS_HANDLER( ItemPropertyMaxRangeStrengthMod, 656 );
// itemproperty ItemPropertyNoDamage();
DECLARE_NSS_HANDLER( ItemPropertyNoDamage, 657 );
// itemproperty ItemPropertyOnHitProps(int nProperty, int nSaveDC, int nSpecial=0);
DECLARE_NSS_HANDLER( ItemPropertyOnHitProps, 658 );
// itemproperty ItemPropertyReducedSavingThrowVsX(int nBaseSaveType, int nPenalty);
DECLARE_NSS_HANDLER( ItemPropertyReducedSavingThrowVsX, 659 );
// itemproperty ItemPropertyReducedSavingThrow(int nBonusType, int nPenalty);
DECLARE_NSS_HANDLER( ItemPropertyReducedSavingThrow, 660 );
// itemproperty ItemPropertyRegeneration(int nRegenAmount);
DECLARE_NSS_HANDLER( ItemPropertyRegeneration, 661 );
// itemproperty ItemPropertySkillBonus(int nSkill, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertySkillBonus, 662 );
// itemproperty ItemPropertySpellImmunitySpecific(int nSpell);
DECLARE_NSS_HANDLER( ItemPropertySpellImmunitySpecific, 663 );
// itemproperty ItemPropertySpellImmunitySchool(int nSchool);
DECLARE_NSS_HANDLER( ItemPropertySpellImmunitySchool, 664 );
// itemproperty ItemPropertyThievesTools(int nModifier);
DECLARE_NSS_HANDLER( ItemPropertyThievesTools, 665 );
// itemproperty ItemPropertyAttackBonus(int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyAttackBonus, 666 );
// itemproperty ItemPropertyAttackBonusVsAlign(int nAlignGroup, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyAttackBonusVsAlign, 667 );
// itemproperty ItemPropertyAttackBonusVsRace(int nRace, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyAttackBonusVsRace, 668 );
// itemproperty ItemPropertyAttackBonusVsSAlign(int nAlignment, int nBonus);
DECLARE_NSS_HANDLER( ItemPropertyAttackBonusVsSAlign, 669 );
// itemproperty ItemPropertyAttackPenalty(int nPenalty);
DECLARE_NSS_HANDLER( ItemPropertyAttackPenalty, 670 );
// itemproperty ItemPropertyUnlimitedAmmo(int nAmmoDamage=IP_CONST_UNLIMITEDAMMO_BASIC);
DECLARE_NSS_HANDLER( ItemPropertyUnlimitedAmmo, 671 );
// itemproperty ItemPropertyLimitUseByAlign(int nAlignGroup);
DECLARE_NSS_HANDLER( ItemPropertyLimitUseByAlign, 672 );
// itemproperty ItemPropertyLimitUseByClass(int nClass);
DECLARE_NSS_HANDLER( ItemPropertyLimitUseByClass, 673 );
// itemproperty ItemPropertyLimitUseByRace(int nRace);
DECLARE_NSS_HANDLER( ItemPropertyLimitUseByRace, 674 );
// itemproperty ItemPropertyLimitUseBySAlign(int nAlignment);
DECLARE_NSS_HANDLER( ItemPropertyLimitUseBySAlign, 675 );
// itemproperty ItemPropertyBonusHitpoints(int nBonusType);
DECLARE_NSS_HANDLER( ItemPropertyBonusHitpoints, 676 );
// itemproperty ItemPropertyVampiricRegeneration(int nRegenAmount);
DECLARE_NSS_HANDLER( ItemPropertyVampiricRegeneration, 677 );
// itemproperty ItemPropertyTrap(int nTrapLevel, int nTrapType);
DECLARE_NSS_HANDLER( ItemPropertyTrap, 678 );
// itemproperty ItemPropertyTrueSeeing();
DECLARE_NSS_HANDLER( ItemPropertyTrueSeeing, 679 );
// itemproperty ItemPropertyOnMonsterHitProperties(int nProperty, int nSpecial=0);
DECLARE_NSS_HANDLER( ItemPropertyOnMonsterHitProperties, 680 );
// itemproperty ItemPropertyTurnResistance(int nModifier);
DECLARE_NSS_HANDLER( ItemPropertyTurnResistance, 681 );
// itemproperty ItemPropertyMassiveCritical(int nDamage);
DECLARE_NSS_HANDLER( ItemPropertyMassiveCritical, 682 );
// itemproperty ItemPropertyFreeAction();
DECLARE_NSS_HANDLER( ItemPropertyFreeAction, 683 );
// itemproperty ItemPropertyMonsterDamage(int nDamage);
DECLARE_NSS_HANDLER( ItemPropertyMonsterDamage, 684 );
// itemproperty ItemPropertyImmunityToSpellLevel(int nLevel);
DECLARE_NSS_HANDLER( ItemPropertyImmunityToSpellLevel, 685 );
// itemproperty ItemPropertySpecialWalk(int nWalkType=0);
DECLARE_NSS_HANDLER( ItemPropertySpecialWalk, 686 );
// itemproperty ItemPropertyHealersKit(int nModifier);
DECLARE_NSS_HANDLER( ItemPropertyHealersKit, 687 );
// itemproperty ItemPropertyWeightIncrease(int nWeight);
DECLARE_NSS_HANDLER( ItemPropertyWeightIncrease, 688 );
// int GetIsSkillSuccessful(object oTarget, int nSkill, int nDifficulty, int bDisplayFeedback=TRUE);
DECLARE_NSS_HANDLER( GetIsSkillSuccessful, 689 );
// effect EffectSpellFailure(int nPercent=100, int nSpellSchool=SPELL_SCHOOL_GENERAL);
DECLARE_NSS_HANDLER( EffectSpellFailure, 690 );
// void SpeakStringByStrRef(int nStrRef, int nTalkVolume=TALKVOLUME_TALK);
DECLARE_NSS_HANDLER( SpeakStringByStrRef, 691 );
// void SetCutsceneMode(object oCreature, int nInCutscene=TRUE);
DECLARE_NSS_HANDLER( SetCutsceneMode, 692 );
// object GetLastPCToCancelCutscene();
DECLARE_NSS_HANDLER( GetLastPCToCancelCutscene, 693 );
// float GetDialogSoundLength(int nStrRef);
DECLARE_NSS_HANDLER( GetDialogSoundLength, 694 );
// void FadeFromBlack(object oCreature, float fSpeed=FADE_SPEED_MEDIUM);
DECLARE_NSS_HANDLER( FadeFromBlack, 695 );
// void FadeToBlack(object oCreature, float fSpeed=FADE_SPEED_MEDIUM, float fFailsafe=5.0, int nColor=0);
DECLARE_NSS_HANDLER( FadeToBlack, 696 );
// void StopFade(object oCreature);
DECLARE_NSS_HANDLER( StopFade, 697 );
// void BlackScreen(object oCreature, int nColor=0);
DECLARE_NSS_HANDLER( BlackScreen, 698 );
// int GetBaseAttackBonus(object oCreature);
DECLARE_NSS_HANDLER( GetBaseAttackBonus, 699 );
// void SetImmortal(object oCreature, int bImmortal);
DECLARE_NSS_HANDLER( SetImmortal, 700 );
// void OpenInventory(object oCreature, object oPlayer);
DECLARE_NSS_HANDLER( OpenInventory, 701 );
// void StoreCameraFacing();
DECLARE_NSS_HANDLER( StoreCameraFacing, 702 );
// void RestoreCameraFacing();
DECLARE_NSS_HANDLER( RestoreCameraFacing, 703 );
// int LevelUpHenchman(object oCreature, int nClass = CLASS_TYPE_INVALID, int bReadyAllSpells = FALSE, int nPackage = PACKAGE_INVALID);
DECLARE_NSS_HANDLER( LevelUpHenchman, 704 );
// void SetDroppableFlag(object oItem, int bDroppable);
DECLARE_NSS_HANDLER( SetDroppableFlag, 705 );
// int GetWeight(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetWeight, 706 );
// object GetModuleItemAcquiredBy();
DECLARE_NSS_HANDLER( GetModuleItemAcquiredBy, 707 );
// int GetImmortal(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetImmortal, 708 );
// void DoWhirlwindAttack(int bDisplayFeedback=TRUE, int bImproved=FALSE);
DECLARE_NSS_HANDLER( DoWhirlwindAttack, 709 );
// string Get2DAString(string s2DA, string sColumn, int nRow);
// DECLARE_NSS_HANDLER( Get2DAString, 710 );
// effect EffectEthereal();
DECLARE_NSS_HANDLER( EffectEthereal, 711 );
// int GetAILevel(object oTarget=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetAILevel, 712 );
// void SetAILevel(object oTarget, int nAILevel);
DECLARE_NSS_HANDLER( SetAILevel, 713 );
// int GetIsPossessedFamiliar(object oCreature);
DECLARE_NSS_HANDLER( GetIsPossessedFamiliar, 714 );
// void UnpossessFamiliar(object oCreature);
DECLARE_NSS_HANDLER( UnpossessFamiliar, 715 );
// int GetIsAreaInterior( object oArea = OBJECT_INVALID );
DECLARE_NSS_HANDLER( GetIsAreaInterior, 716 );
// void SendMessageToPCByStrRef(object oPlayer, int nStrRef);
DECLARE_NSS_HANDLER( SendMessageToPCByStrRef, 717 );
// void IncrementRemainingFeatUses(object oCreature, int nFeat);
DECLARE_NSS_HANDLER( IncrementRemainingFeatUses, 718 );
// void ExportSingleCharacter(object oPlayer);
DECLARE_NSS_HANDLER( ExportSingleCharacter, 719 );
// void PlaySoundByStrRef(int nStrRef, int nRunAsAction = TRUE );
DECLARE_NSS_HANDLER( PlaySoundByStrRef, 720 );
// void SetSubRace(object oCreature, string sSubRace);
DECLARE_NSS_HANDLER( SetSubRace, 721 );
// void SetDeity(object oCreature, string sDeity);
DECLARE_NSS_HANDLER( SetDeity, 722 );
// int GetIsDMPossessed(object oCreature);
DECLARE_NSS_HANDLER( GetIsDMPossessed, 723 );
// int GetWeather(object oArea, int nWeatherType);
DECLARE_NSS_HANDLER( GetWeather, 724 );
// int GetIsAreaNatural(object oArea);
DECLARE_NSS_HANDLER( GetIsAreaNatural, 725 );
// int GetIsAreaAboveGround(object oArea);
DECLARE_NSS_HANDLER( GetIsAreaAboveGround, 726 );
// object GetPCItemLastEquipped();
DECLARE_NSS_HANDLER( GetPCItemLastEquipped, 727 );
// object GetPCItemLastEquippedBy();
DECLARE_NSS_HANDLER( GetPCItemLastEquippedBy, 728 );
// object GetPCItemLastUnequipped();
DECLARE_NSS_HANDLER( GetPCItemLastUnequipped, 729 );
// object GetPCItemLastUnequippedBy();
DECLARE_NSS_HANDLER( GetPCItemLastUnequippedBy, 730 );
// object CopyItemAndModify(object oItem, int nType, int nIndex, int nNewValue, int bCopyVars=FALSE);
DECLARE_NSS_HANDLER( CopyItemAndModify, 731 );
// int GetItemAppearance(object oItem, int nType, int nIndex);
DECLARE_NSS_HANDLER( GetItemAppearance, 732 );
// itemproperty ItemPropertyOnHitCastSpell(int nSpell, int nLevel);
DECLARE_NSS_HANDLER( ItemPropertyOnHitCastSpell, 733 );
// int GetItemPropertySubType(itemproperty iProperty);
DECLARE_NSS_HANDLER( GetItemPropertySubType, 734 );
// int GetActionMode(object oCreature, int nMode);
DECLARE_NSS_HANDLER( GetActionMode, 735 );
// void SetActionMode(object oCreature, int nMode, int nStatus);
DECLARE_NSS_HANDLER( SetActionMode, 736 );
// int GetArcaneSpellFailure(object oCreature);
DECLARE_NSS_HANDLER( GetArcaneSpellFailure, 737 );
// void ActionExamine(object oExamine);
DECLARE_NSS_HANDLER( ActionExamine, 738 );
// itemproperty ItemPropertyVisualEffect(int nEffect);
DECLARE_NSS_HANDLER( ItemPropertyVisualEffect, 739 );
// void SetLootable( object oCreature, int bLootable );
DECLARE_NSS_HANDLER( SetLootable, 740 );
// int GetLootable( object oCreature );
DECLARE_NSS_HANDLER( GetLootable, 741 );
// float GetCutsceneCameraMoveRate( object oCreature );
DECLARE_NSS_HANDLER( GetCutsceneCameraMoveRate, 742 );
// void SetCutsceneCameraMoveRate( object oCreature, float fRate );
DECLARE_NSS_HANDLER( SetCutsceneCameraMoveRate, 743 );
// int GetItemCursedFlag(object oItem);
DECLARE_NSS_HANDLER( GetItemCursedFlag, 744 );
// void SetItemCursedFlag(object oItem, int nCursed);
DECLARE_NSS_HANDLER( SetItemCursedFlag, 745 );
// void SetMaxHenchmen( int nNumHenchmen );
DECLARE_NSS_HANDLER( SetMaxHenchmen, 746 );
// int GetMaxHenchmen();
DECLARE_NSS_HANDLER( GetMaxHenchmen, 747 );
// int GetAssociateType( object oAssociate );
DECLARE_NSS_HANDLER( GetAssociateType, 748 );
// int GetSpellResistance( object oCreature );
DECLARE_NSS_HANDLER( GetSpellResistance, 749 );
// void DayToNight(object oPlayer, float fTransitionTime=0.0f);
DECLARE_NSS_HANDLER( DayToNight, 750 );
// void NightToDay(object oPlayer, float fTransitionTime=0.0f);
DECLARE_NSS_HANDLER( NightToDay, 751 );
// int LineOfSightObject( object oSource, object oTarget );
DECLARE_NSS_HANDLER( LineOfSightObject, 752 );
// int LineOfSightVector( vector vSource, vector vTarget );
DECLARE_NSS_HANDLER( LineOfSightVector, 753 );
// int GetLastSpellCastClass();
DECLARE_NSS_HANDLER( GetLastSpellCastClass, 754 );
// void SetBaseAttackBonus( int nBaseAttackBonus, object oCreature = OBJECT_SELF );
DECLARE_NSS_HANDLER( SetBaseAttackBonus, 755 );
// void RestoreBaseAttackBonus( object oCreature = OBJECT_SELF );
DECLARE_NSS_HANDLER( RestoreBaseAttackBonus, 756 );
// effect EffectCutsceneGhost();
DECLARE_NSS_HANDLER( EffectCutsceneGhost, 757 );
// itemproperty ItemPropertyArcaneSpellFailure(int nModLevel);
DECLARE_NSS_HANDLER( ItemPropertyArcaneSpellFailure, 758 );
// int GetStoreGold(object oidStore);
DECLARE_NSS_HANDLER( GetStoreGold, 759 );
// void SetStoreGold(object oidStore, int nGold);
DECLARE_NSS_HANDLER( SetStoreGold, 760 );
// int GetStoreMaxBuyPrice(object oidStore);
DECLARE_NSS_HANDLER( GetStoreMaxBuyPrice, 761 );
// void SetStoreMaxBuyPrice(object oidStore, int nMaxBuy);
DECLARE_NSS_HANDLER( SetStoreMaxBuyPrice, 762 );
// int GetStoreIdentifyCost(object oidStore);
DECLARE_NSS_HANDLER( GetStoreIdentifyCost, 763 );
// void SetStoreIdentifyCost(object oidStore, int nCost);
DECLARE_NSS_HANDLER( SetStoreIdentifyCost, 764 );
// void SetCreatureAppearanceType(object oCreature, int nAppearanceType);
DECLARE_NSS_HANDLER( SetCreatureAppearanceType, 765 );
// int GetCreatureStartingPackage(object oCreature);
DECLARE_NSS_HANDLER( GetCreatureStartingPackage, 766 );
// effect EffectCutsceneImmobilize();
DECLARE_NSS_HANDLER( EffectCutsceneImmobilize, 767 );
// int GetIsInSubArea(object oCreature, object oSubArea=OBJECT_SELF);
DECLARE_NSS_HANDLER( GetIsInSubArea, 768 );
// int GetItemPropertyCostTable(itemproperty iProp);
DECLARE_NSS_HANDLER( GetItemPropertyCostTable, 769 );
// int GetItemPropertyCostTableValue(itemproperty iProp);
DECLARE_NSS_HANDLER( GetItemPropertyCostTableValue, 770 );
// int GetItemPropertyParam1(itemproperty iProp);
DECLARE_NSS_HANDLER( GetItemPropertyParam1, 771 );
// int GetItemPropertyParam1Value(itemproperty iProp);
DECLARE_NSS_HANDLER( GetItemPropertyParam1Value, 772 );
// int GetIsCreatureDisarmable(object oCreature);
DECLARE_NSS_HANDLER( GetIsCreatureDisarmable, 773 );
// void SetStolenFlag(object oItem, int nStolenFlag);
DECLARE_NSS_HANDLER( SetStolenFlag, 774 );
// void ForceRest(object oCreature);
DECLARE_NSS_HANDLER( ForceRest, 775 );
// void SetCameraHeight(object oPlayer, float fHeight=0.0f);
DECLARE_NSS_HANDLER( SetCameraHeight, 776 );
// int SetGlobalInt(string sName, int nValue);
DECLARE_NSS_HANDLER( SetGlobalInt, 777 );
// int SetGlobalBool(string sName, int bValue);
DECLARE_NSS_HANDLER( SetGlobalBool, 778 );
// int SetGlobalString(string sName, string sValue);
DECLARE_NSS_HANDLER( SetGlobalString, 779 );
// int SetGlobalFloat(string sName, float fValue);
DECLARE_NSS_HANDLER( SetGlobalFloat, 780 );
// int GetGlobalInt(string sName);
DECLARE_NSS_HANDLER( GetGlobalInt, 781 );
// int GetGlobalBool(string sName);
DECLARE_NSS_HANDLER( GetGlobalBool, 782 );
// string GetGlobalString(string sName);
DECLARE_NSS_HANDLER( GetGlobalString, 783 );
// float GetGlobalFloat(string sName);
DECLARE_NSS_HANDLER( GetGlobalFloat, 784 );
// int SaveGlobalVariables(string sSaveName="");
DECLARE_NSS_HANDLER( SaveGlobalVariables, 785 );
// int LoadGlobalVariables(string sLoadName="");
DECLARE_NSS_HANDLER( LoadGlobalVariables, 786 );
// void MountObject(object oMountingObject, object oObjectToMount);
DECLARE_NSS_HANDLER( MountObject, 787 );
// void DismountObject(object oDismountingObject, object oObjectToDismount);
DECLARE_NSS_HANDLER( DismountObject, 788 );
// int GetJournalEntry(string szPlotID, object oObjectJournal);
DECLARE_NSS_HANDLER( GetJournalEntry, 789 );
// effect EffectNWN2ParticleEffect();
DECLARE_NSS_HANDLER( EffectNWN2ParticleEffect, 790 );
// effect EffectNWN2ParticleEffectFile( string sDefinitionFile );
DECLARE_NSS_HANDLER( EffectNWN2ParticleEffectFile, 791 );
// effect EffectNWN2SpecialEffectFile( string sFileName, object oTarget=OBJECT_INVALID, vector vTargetPosition=[0.0,0.0,0.0]  );
DECLARE_NSS_HANDLER( EffectNWN2SpecialEffectFile, 792 );
// int GetSpellLevel(int nSpellID);
DECLARE_NSS_HANDLER( GetSpellLevel, 793 );
// void RemoveSEFFromObject( object oObject, string sSEFName );
DECLARE_NSS_HANDLER( RemoveSEFFromObject, 794 );
// void ActionPauseCutscene( int nTimeoutSecs, int bPurgeCutsceneActionsOnTimeout=FALSE );
DECLARE_NSS_HANDLER( ActionPauseCutscene, 795 );
// void AssignCutsceneActionToObject( object oObject, action aAction );
DECLARE_NSS_HANDLER( AssignCutsceneActionToObject, 796 );
// int GetCharBackground( object oCreature );
DECLARE_NSS_HANDLER( GetCharBackground, 797 );
// void SetTrapActive( object oTrap, int bActive );
DECLARE_NSS_HANDLER( SetTrapActive, 798 );
// void SetOrientOnDialog( object oCreature, int bActive );
DECLARE_NSS_HANDLER( SetOrientOnDialog, 799 );
// effect EffectDetectUndead();
DECLARE_NSS_HANDLER( EffectDetectUndead, 800 );
// effect EffectLowLightVision();
DECLARE_NSS_HANDLER( EffectLowLightVision, 801 );
// effect EffectSetScale( float fScaleX, float fScaleY=-1.0, float fScaleZ=-1.0 );
DECLARE_NSS_HANDLER( EffectSetScale, 802 );
// effect EffectShareDamage( object oHelper, int nAmtShared=50, int nAmtCasterShared=50 );
DECLARE_NSS_HANDLER( EffectShareDamage, 803 );
// effect EffectAssayResistance( object oTarget );
DECLARE_NSS_HANDLER( EffectAssayResistance, 804 );
// effect EffectSeeTrueHPs();
DECLARE_NSS_HANDLER( EffectSeeTrueHPs, 805 );
// int GetNumCutsceneActionsPending();
DECLARE_NSS_HANDLER( GetNumCutsceneActionsPending, 806 );
// effect EffectDamageOverTime(int nAmount, float fIntervalSeconds, int nDamageType=DAMAGE_TYPE_MAGICAL, int nIgnoreResistances=FALSE);
DECLARE_NSS_HANDLER( EffectDamageOverTime, 807 );
// effect EffectAbsorbDamage(int nACTest);
DECLARE_NSS_HANDLER( EffectAbsorbDamage, 808 );
// effect EffectHideousBlow(int nMetamagic);
DECLARE_NSS_HANDLER( EffectHideousBlow, 809 );
// effect EffectMesmerize( int nBreakFlags, float fBreakDist = 0.0f );
DECLARE_NSS_HANDLER( EffectMesmerize, 810 );
// int GetSpellFeatId();
DECLARE_NSS_HANDLER( GetSpellFeatId, 811 );
// void SetFog( object oTarget, int nFogType, int nColor, float fFogStart, float fFogEnd, float fFarClipPlaneDistance);
DECLARE_NSS_HANDLER( SetFog, 812 );
// effect EffectDarkVision();
DECLARE_NSS_HANDLER( EffectDarkVision, 813 );
// void DebugPostString( object oTarget, string sMesg, int nX, int nY, float fDuration, int nColor=4294901760 );
DECLARE_NSS_HANDLER( DebugPostString, 814 );
// int GetHasAnySpellEffect( object oObject );
DECLARE_NSS_HANDLER( GetHasAnySpellEffect, 815 );
// effect EffectArmorCheckPenaltyIncrease( object oTarget, int nPenaltyAmt );
DECLARE_NSS_HANDLER( EffectArmorCheckPenaltyIncrease, 816 );
// effect EffectDisintegrate( object oTarget );
DECLARE_NSS_HANDLER( EffectDisintegrate, 817 );
// effect EffectHealOnZeroHP( object oTarget, int nDmgToHeal );
DECLARE_NSS_HANDLER( EffectHealOnZeroHP, 818 );
// effect EffectBreakEnchantment( int nLevel );
DECLARE_NSS_HANDLER( EffectBreakEnchantment, 819 );
// object GetFirstEnteringPC();
DECLARE_NSS_HANDLER( GetFirstEnteringPC, 820 );
// object GetNextEnteringPC();
DECLARE_NSS_HANDLER( GetNextEnteringPC, 821 );
// int AddRosterMemberByTemplate( string sRosterName, string sTemplate );
DECLARE_NSS_HANDLER( AddRosterMemberByTemplate, 822 );
// int AddRosterMemberByCharacter( string sRosterName, object oCharacter );
DECLARE_NSS_HANDLER( AddRosterMemberByCharacter, 823 );
// int RemoveRosterMember( string sRosterName );
DECLARE_NSS_HANDLER( RemoveRosterMember, 824 );
// int GetIsRosterMemberAvailable( string sRosterName );
DECLARE_NSS_HANDLER( GetIsRosterMemberAvailable, 825 );
// int GetIsRosterMemberSelectable( string sRosterName );
DECLARE_NSS_HANDLER( GetIsRosterMemberSelectable, 826 );
// int SetIsRosterMemberSelectable( string sRosterName, int bSelectable );
DECLARE_NSS_HANDLER( SetIsRosterMemberSelectable, 827 );
// object GetObjectFromRosterName( string sRosterName );
DECLARE_NSS_HANDLER( GetObjectFromRosterName, 828 );
// string GetRosterNameFromObject( object oCreature );
DECLARE_NSS_HANDLER( GetRosterNameFromObject, 829 );
// object SpawnRosterMember( string sRosterName, location lLocation );
DECLARE_NSS_HANDLER( SpawnRosterMember, 830 );
// int DespawnRosterMember( string sRosterName );
DECLARE_NSS_HANDLER( DespawnRosterMember, 831 );
// int AddRosterMemberToParty( string sRosterName, object oPC );
DECLARE_NSS_HANDLER( AddRosterMemberToParty, 832 );
// void RemoveRosterMemberFromParty( string sRosterName, object oPC, int bDespawnNPC=TRUE );
DECLARE_NSS_HANDLER( RemoveRosterMemberFromParty, 833 );
// string GetFirstRosterMember();
DECLARE_NSS_HANDLER( GetFirstRosterMember, 834 );
// string GetNextRosterMember();
DECLARE_NSS_HANDLER( GetNextRosterMember, 835 );
// void SpawnSpellProjectile( object oSource, object oTaget, location lSource, location lTarget, int nSpellID, int nProjectilePathType );
DECLARE_NSS_HANDLER( SpawnSpellProjectile, 836 );
// void SpawnItemProjectile( object oSource, object oTaget, location lSource, location lTarget, int nBaseItemID, int nProjectilePathType, int nAttackType, int nDamageTypeFlag );
DECLARE_NSS_HANDLER( SpawnItemProjectile, 837 );
// int GetIsOwnedByPlayer( object oCreature );
DECLARE_NSS_HANDLER( GetIsOwnedByPlayer, 838 );
// object SetOwnersControlledCompanion( object oCurrentCreature, object oTargetCreature=OBJECT_INVALID );
DECLARE_NSS_HANDLER( SetOwnersControlledCompanion, 839 );
// void SetCreatureScriptsToSet( object oCreature, int nScriptSet );
DECLARE_NSS_HANDLER( SetCreatureScriptsToSet, 840 );
// float GetProjectileTravelTime( location lSource, location lTarget, int nProjectilePathType, int nSpellID=-1 );
DECLARE_NSS_HANDLER( GetProjectileTravelTime, 841 );
// void SetRosterNPCPartyLimit( int nLimit );
DECLARE_NSS_HANDLER( SetRosterNPCPartyLimit, 842 );
// int GetRosterNPCPartyLimit();
DECLARE_NSS_HANDLER( GetRosterNPCPartyLimit, 843 );
// int SetIsRosterMemberCampaignNPC( string sRosterName, int nCampaignNPC );
DECLARE_NSS_HANDLER( SetIsRosterMemberCampaignNPC, 844 );
// int GetIsRosterMemberCampaignNPC( string sRosterName );
DECLARE_NSS_HANDLER( GetIsRosterMemberCampaignNPC, 845 );
// int GetIsRosterMember( object oMember );
DECLARE_NSS_HANDLER( GetIsRosterMember, 846 );
// void ShowWorldMap( string sWorldMap, object oPlayer, string sTag);
DECLARE_NSS_HANDLER( ShowWorldMap, 847 );
// void TriggerEncounter(object oEncounter, object oPlayer, int iCRFlag, float fCR);
DECLARE_NSS_HANDLER( TriggerEncounter, 848 );
// int GetIsSinglePlayer();
// DECLARE_NSS_HANDLER( GetIsSinglePlayer, 849 );
// void DisplayGuiScreen( object oPlayer, string sScreenName, int bModal, string sFileName = "", int bOverrideOptions = FALSE);
DECLARE_NSS_HANDLER( DisplayGuiScreen, 850 );
// effect EffectOnDispel( float fDelay, action aOnDispelEffect );
DECLARE_NSS_HANDLER( EffectOnDispel, 851 );
// void LoadNewModule(string sModuleName, string sWaypoint = "");
DECLARE_NSS_HANDLER( LoadNewModule, 852 );
// void SetScriptHidden( object oCreature, int bHidden, int bDisableUI=TRUE );
DECLARE_NSS_HANDLER( SetScriptHidden, 853 );
// void SetIsCompanionPossessionBlocked( object oCreature, int bBlocked );
DECLARE_NSS_HANDLER( SetIsCompanionPossessionBlocked, 854 );
// void SetEventHandler( object oObject, int iEventID, string sScriptName );
DECLARE_NSS_HANDLER( SetEventHandler, 855 );
// string GetEventHandler( object oObject, int iEventID );
DECLARE_NSS_HANDLER( GetEventHandler, 856 );
// int GetIsPartyTransition( object oObject );
DECLARE_NSS_HANDLER( GetIsPartyTransition, 857 );
// void JumpPartyToArea( object oPartyMember, object oDestination );
DECLARE_NSS_HANDLER( JumpPartyToArea, 858 );
// int GetNumActions( object oObject );
DECLARE_NSS_HANDLER( GetNumActions, 859 );
// void DisplayMessageBox( object oPC, int nMessageStrRef,
DECLARE_NSS_HANDLER( DisplayMessageBox, 860 );
// int StringCompare( string sString1, string sString2, int nCaseSensitive=FALSE );
// DECLARE_NSS_HANDLER( StringCompare, 861 );
// int CharToASCII( string sString );
// DECLARE_NSS_HANDLER( CharToASCII, 862 );
// object GetOwnedCharacter( object oControlled );
DECLARE_NSS_HANDLER( GetOwnedCharacter, 863 );
// object GetControlledCharacter( object oCreature );
DECLARE_NSS_HANDLER( GetControlledCharacter, 864 );
// int FeatAdd( object oCreature, int iFeatId, int bCheckRequirements, int bFeedback=FALSE, int bNotice=FALSE );
DECLARE_NSS_HANDLER( FeatAdd, 865 );
// void FeatRemove( object oCreature, int iFeatIds );
DECLARE_NSS_HANDLER( FeatRemove, 866 );
// void SetCanTalkToNonPlayerOwnedCreatures( object oObject, int bCanTalk );
DECLARE_NSS_HANDLER( SetCanTalkToNonPlayerOwnedCreatures, 867 );
// int GetCanTalkToNonPlayerOwnedCreatures( object oObject );
DECLARE_NSS_HANDLER( GetCanTalkToNonPlayerOwnedCreatures, 868 );
// void SetLevelUpPackage( object oCreature, int nPackage );
DECLARE_NSS_HANDLER( SetLevelUpPackage, 869 );
// int GetLevelUpPackage( object oCreature );
DECLARE_NSS_HANDLER( GetLevelUpPackage, 870 );
// void SetCombatOverrides( object oCreature, object oTarget, int nOnHandAttacks, int nOffHandAttacks, int nAttackResult, int nMinDamage, int nMaxDamage, int bSuppressBroadcastAOO, int bSuppressMakeAOO, int bIgnoreTargetReaction, int bSuppressFeedbackText );
DECLARE_NSS_HANDLER( SetCombatOverrides, 871 );
// void ClearCombatOverrides( object oCreature );
DECLARE_NSS_HANDLER( ClearCombatOverrides, 872 );
// void ResetCreatureLevelForXP( object oTargetCreature, int nExperience, int bUseXPMods );
DECLARE_NSS_HANDLER( ResetCreatureLevelForXP, 873 );
// location CalcPointAwayFromPoint( location lPoint, location lAwayFromPoint, float fDistance, float fAngularVariance, int bComputeDistFromStart );
DECLARE_NSS_HANDLER( CalcPointAwayFromPoint, 874 );
// location CalcSafeLocation( object oCreature, location lTestPosition, float fSearchRadius, int bWalkStraighLineRequired, int bIgnoreTestPosition );
DECLARE_NSS_HANDLER( CalcSafeLocation, 875 );
// int GetTotalLevels( object oCreature, int bIncludeNegativeLevels );
DECLARE_NSS_HANDLER( GetTotalLevels, 876 );
// void ResetFeatUses( object oCreature, int nFeatID, int bResetDailyUses, int bResetLastUseTime );
DECLARE_NSS_HANDLER( ResetFeatUses, 877 );
// void SetNWN2Fog( object oTarget, int nFogType, int nColor, float fFogStart, float fFogEnd);
DECLARE_NSS_HANDLER( SetNWN2Fog, 878 );
// void ResetNWN2Fog(object oTarget, int nFogType);
DECLARE_NSS_HANDLER( ResetNWN2Fog, 879 );
// effect EffectBonusHitpoints( int nHitpoints );
DECLARE_NSS_HANDLER( EffectBonusHitpoints, 880 );
// void SetGUIObjectHidden( object oPlayer, string sScreenName, string sUIObjectName, int bHidden );
DECLARE_NSS_HANDLER( SetGUIObjectHidden, 881 );
// void CloseGUIScreen( object oPlayer, string sScreenName );
DECLARE_NSS_HANDLER( CloseGUIScreen, 882 );
// int FiredFromPartyTransition();
DECLARE_NSS_HANDLER( FiredFromPartyTransition, 883 );
// int GetScriptHidden( object oObject );
DECLARE_NSS_HANDLER( GetScriptHidden, 884 );
// string GetNodeSpeaker();
DECLARE_NSS_HANDLER( GetNodeSpeaker, 885 );
// void SetLocalGUIVariable( object oPlayer, string sScreenName, int nVarIndex, string sVarValue );
DECLARE_NSS_HANDLER( SetLocalGUIVariable, 886 );
// void SetGUIObjectDisabled( object oPlayer, string sScreenName, string sUIObjectName, int bDisabled );
DECLARE_NSS_HANDLER( SetGUIObjectDisabled, 887 );
// void SetGUIObjectText( object oPlayer, string sScreenName, string sUIObjectName, int nStrRef, string sText );
DECLARE_NSS_HANDLER( SetGUIObjectText, 888 );
// int GetIsCompanionPossessionBlocked( object oCreature );
DECLARE_NSS_HANDLER( GetIsCompanionPossessionBlocked, 889 );
// effect EffectBardSongSinging( int nSpellId );
DECLARE_NSS_HANDLER( EffectBardSongSinging, 890 );
// effect EffectJarring();
DECLARE_NSS_HANDLER( EffectJarring, 891 );
// int GetEffectInteger( effect eTest, int nIdx );
DECLARE_NSS_HANDLER( GetEffectInteger, 892 );
// void RefreshSpellEffectDurations( object oTarget, int nSpellId, float fDuration );
DECLARE_NSS_HANDLER( RefreshSpellEffectDurations, 893 );
// effect SetEffectSpellId( effect eTest, int nSpellId );
DECLARE_NSS_HANDLER( SetEffectSpellId, 894 );
// effect EffectBABMinimum( int nBABMin );
DECLARE_NSS_HANDLER( EffectBABMinimum, 895 );
// int GetTRUEBaseAttackBonus( object oTarget );
DECLARE_NSS_HANDLER( GetTRUEBaseAttackBonus, 896 );
// void SetFirstName(object oTarget, string sFirstName);
DECLARE_NSS_HANDLER( SetFirstName, 897 );
// void SetLastName(object oTarget, string sLastName);
DECLARE_NSS_HANDLER( SetLastName, 898 );
// void SetDescription(object oTarget, string sDescription);
DECLARE_NSS_HANDLER( SetDescription, 899 );
// string GetFirstName(object oTarget);
DECLARE_NSS_HANDLER( GetFirstName, 900 );
// string GetLastName(object oTarget);
DECLARE_NSS_HANDLER( GetLastName, 901 );
// string GetDescription(object oTarget);
DECLARE_NSS_HANDLER( GetDescription, 902 );
// int IsInMultiplayerConversation( object oObject );
DECLARE_NSS_HANDLER( IsInMultiplayerConversation, 903 );
// int PlayCustomAnimation( object oObject, string sAnimationName, int nLooping, float fSpeed = 1.0f );
DECLARE_NSS_HANDLER( PlayCustomAnimation, 904 );
// effect EffectMaxDamage();
DECLARE_NSS_HANDLER( EffectMaxDamage, 905 );
// void DisplayInputBox( object oPC, int nMessageStrRef,
DECLARE_NSS_HANDLER( DisplayInputBox, 906 );
// int SetWeaponVisibility( object oObject, int nVisibile, int nType=0 );
DECLARE_NSS_HANDLER( SetWeaponVisibility, 907 );
// void SetLookAtTarget( object oObject, vector vTarget, int nType=0 );
DECLARE_NSS_HANDLER( SetLookAtTarget, 908 );
// int GetBumpState(object oCreature);
DECLARE_NSS_HANDLER( GetBumpState, 909 );
// void SetBumpState(object oCreature, int nBumpState);
DECLARE_NSS_HANDLER( SetBumpState, 910 );
// int GetOnePartyMode();
// DECLARE_NSS_HANDLER( GetOnePartyMode, 911 );
// object GetPrimaryPlayer();
DECLARE_NSS_HANDLER( GetPrimaryPlayer, 912 );
// effect EffectArcaneSpellFailure(int nPercent);
DECLARE_NSS_HANDLER( EffectArcaneSpellFailure, 913 );
// void SpawnBloodHit( object oCreature, int bCriticalHit, object oAttacker );
DECLARE_NSS_HANDLER( SpawnBloodHit, 914 );
// object GetFirstArea();
DECLARE_NSS_HANDLER( GetFirstArea, 915 );
// object GetNextArea();
DECLARE_NSS_HANDLER( GetNextArea, 916 );
// int GetArmorRank(object oItem);
DECLARE_NSS_HANDLER( GetArmorRank, 917 );
// int GetWeaponType(object oItem);
DECLARE_NSS_HANDLER( GetWeaponType, 918 );
// object GetPlayerCurrentTarget( object oCreature );
DECLARE_NSS_HANDLER( GetPlayerCurrentTarget, 919 );
// effect EffectWildshape();
DECLARE_NSS_HANDLER( EffectWildshape, 920 );
// int GetEncumbranceState( object oCreature );
DECLARE_NSS_HANDLER( GetEncumbranceState, 921 );
// void PackCampaignDatabase(string sCampaignName);
// DECLARE_NSS_HANDLER( PackCampaignDatabase, 922 );
// void UnlinkDoor( object oDoor );
DECLARE_NSS_HANDLER( UnlinkDoor, 923 );
// object GetPlayerCreatureExamineTarget( object oCreature );
DECLARE_NSS_HANDLER( GetPlayerCreatureExamineTarget, 924 );
// void Clear2DACache(string s2DAName="");
// DECLARE_NSS_HANDLER( Clear2DACache, 925 );
// int NWNXGetInt( string sPlugin, string sFunction, string sParam1, int nParam2 );
// DECLARE_NSS_HANDLER( NWNXGetInt, 926 );
// float NWNXGetFloat( string sPlugin, string sFunction, string sParam1, int nParam2 );
// DECLARE_NSS_HANDLER( NWNXGetFloat, 927 );
// string NWNXGetString( string sPlugin, string sFunction, string sParam1, int nParam2 );
// DECLARE_NSS_HANDLER( NWNXGetString, 928 );
// void NWNXSetInt( string sPlugin, string sFunction, string sParam1, int nParam2, int nValue );
// DECLARE_NSS_HANDLER( NWNXSetInt, 929 );
// void NWNXSetFloat( string sPlugin, string sFunction, string sParam1, int nParam2, float fValue );
// DECLARE_NSS_HANDLER( NWNXSetFloat, 930 );
// void NWNXSetString( string sPlugin, string sFunction, string sParam1, int nParam2, string sValue );
// DECLARE_NSS_HANDLER( NWNXSetString, 931 );
// effect EffectEffectIcon(int nEffectIconId);
DECLARE_NSS_HANDLER( EffectEffectIcon, 932 );
// void SetGUIProgressBarPosition( object oPlayer, string sScreenName, string sUIObjectName, float fPosition );
DECLARE_NSS_HANDLER( SetGUIProgressBarPosition, 933 );
// void SetGUITexture( object oPlayer, string sScreenName, string sUIObjectName, string sTexture );
DECLARE_NSS_HANDLER( SetGUITexture, 934 );
// effect EffectRescue( int nSpellId );
DECLARE_NSS_HANDLER( EffectRescue, 935 );
// object IntToObject( int nInt );
// DECLARE_NSS_HANDLER( IntToObject, 936 );
// int ObjectToInt( object oObj );
// DECLARE_NSS_HANDLER( ObjectToInt, 937 );
// object StringToObject( string sString );
// DECLARE_NSS_HANDLER( StringToObject, 938 );
// int GetIsSpirit( object oCreature );
DECLARE_NSS_HANDLER( GetIsSpirit, 939 );
// effect EffectDetectSpirits();
DECLARE_NSS_HANDLER( EffectDetectSpirits, 940 );
// effect EffectDamageReductionNegated();
DECLARE_NSS_HANDLER( EffectDamageReductionNegated, 941 );
// effect EffectConcealmentNegated();
DECLARE_NSS_HANDLER( EffectConcealmentNegated, 942 );
// int GetInfiniteFlag( object oItem );
DECLARE_NSS_HANDLER( GetInfiniteFlag, 943 );
// string GetKeyRequiredFeedbackMessage( object oObject );
DECLARE_NSS_HANDLER( GetKeyRequiredFeedbackMessage, 944 );
// void SetKeyRequiredFeedbackMessage( object oObject, string sFeedback );
DECLARE_NSS_HANDLER( SetKeyRequiredFeedbackMessage, 945 );
// void SetInfiniteFlag( object oItem, int bInfinite=TRUE );
DECLARE_NSS_HANDLER( SetInfiniteFlag, 946 );
// int GetPickpocketableFlag( object oItem );
DECLARE_NSS_HANDLER( GetPickpocketableFlag, 947 );
// void SetPickpocketableFlag( object oItem, int bPickpocketable );
DECLARE_NSS_HANDLER( SetPickpocketableFlag, 948 );
// int GetTrapActive( object oObject );
DECLARE_NSS_HANDLER( GetTrapActive, 949 );
// void SetWillSavingThrow( object oObject, int nNewWillSave );
DECLARE_NSS_HANDLER( SetWillSavingThrow, 950 );
// void SetReflexSavingThrow( object oObject, int nNewReflexSave );
DECLARE_NSS_HANDLER( SetReflexSavingThrow, 951 );
// void SetFortitudeSavingThrow( object oObject, int nNewFortSave );
DECLARE_NSS_HANDLER( SetFortitudeSavingThrow, 952 );
// void SetLockKeyRequired( object oObject, int nKeyRequired=TRUE );
DECLARE_NSS_HANDLER( SetLockKeyRequired, 953 );
// void SetLockKeyTag( object oObject, string sKeyTag );
DECLARE_NSS_HANDLER( SetLockKeyTag, 954 );
// void SetLockLockDC( object oObject, int nNewLockDC );
DECLARE_NSS_HANDLER( SetLockLockDC, 955 );
// void SetLockUnlockDC( object oObject, int nNewLockDC );
DECLARE_NSS_HANDLER( SetLockUnlockDC, 956 );
// void SetLockLockable( object oObject, int nLockable=TRUE );
DECLARE_NSS_HANDLER( SetLockLockable, 957 );
// void SetHardness( int nHardness, object oObject );
DECLARE_NSS_HANDLER( SetHardness, 958 );
// int GetHardness( object oObject );
DECLARE_NSS_HANDLER( GetHardness, 959 );
// int GetModuleXPScale();
DECLARE_NSS_HANDLER( GetModuleXPScale, 960 );
// void SetModuleXPScale( int nXPScale );
DECLARE_NSS_HANDLER( SetModuleXPScale, 961 );
// void SetTrapDetectable( object oTrap, int nDetectable=TRUE );
DECLARE_NSS_HANDLER( SetTrapDetectable, 962 );
// void SetTrapDetectDC( object oTrap, int nDetectDC );
DECLARE_NSS_HANDLER( SetTrapDetectDC, 963 );
// void SetTrapDisarmable( object oTrap, int nDisarmable=TRUE );
DECLARE_NSS_HANDLER( SetTrapDisarmable, 964 );
// void SetTrapDisarmDC( object oTrap, int nDisarmDC );
DECLARE_NSS_HANDLER( SetTrapDisarmDC, 965 );
// void SetTrapKeyTag( object oTrap, string sKeyTag );
DECLARE_NSS_HANDLER( SetTrapKeyTag, 966 );
// void SetTrapOneShot( object oTrap, int nOneShot=TRUE );
DECLARE_NSS_HANDLER( SetTrapOneShot, 967 );
// object CreateTrapAtLocation( int nTrapType, location lLocation, float fSize=2.0f,
DECLARE_NSS_HANDLER( CreateTrapAtLocation, 968 );
// void CreateTrapOnObject( int nTrapType, object oObject, int nFaction=STANDARD_FACTION_HOSTILE,
DECLARE_NSS_HANDLER( CreateTrapOnObject, 969 );
// int GetAreaSize( int nAreaDimension, object oArea=OBJECT_INVALID );
DECLARE_NSS_HANDLER( GetAreaSize, 970 );
// int GetTrapRecoverable( object oTrap );
DECLARE_NSS_HANDLER( GetTrapRecoverable, 971 );
// void SetTrapRecoverable( object oTrap, int nRecoverable=TRUE );
DECLARE_NSS_HANDLER( SetTrapRecoverable, 972 );
// void SetUseableFlag( object oPlaceable, int nUseableFlag );
DECLARE_NSS_HANDLER( SetUseableFlag, 973 );
// object GetPlaceableLastClickedBy();
DECLARE_NSS_HANDLER( GetPlaceableLastClickedBy, 974 );
// void SetRenderWaterInArea( object oArea, int bRender );
DECLARE_NSS_HANDLER( SetRenderWaterInArea, 975 );
// effect EffectInsane();
DECLARE_NSS_HANDLER( EffectInsane, 976 );
// void SetPlayerGUIHidden( object oPlayer, int bHidden );
DECLARE_NSS_HANDLER( SetPlayerGUIHidden, 977 );
// string GetSelectedMapPointTag();
DECLARE_NSS_HANDLER( GetSelectedMapPointTag, 978 );
// void SetNoticeText( object oPlayer, string sText );
DECLARE_NSS_HANDLER( SetNoticeText, 979 );
// void SetLightActive( object oLight, int bActive );
DECLARE_NSS_HANDLER( SetLightActive, 980 );
// effect EffectSummonCopy(object oSource, int nVisualEffectId=VFX_NONE, float fDelaySeconds=0.0f, string sNewTag="", int nNewHP=0, string sScript="");
DECLARE_NSS_HANDLER( EffectSummonCopy, 981 );
// int GetPolymorphLocked(object oCreature);
DECLARE_NSS_HANDLER( GetPolymorphLocked, 982 );
// void SetSoundSet( object oCreature, int nSoundSet );
DECLARE_NSS_HANDLER( SetSoundSet, 983 );
// void SetScale( object oObject, float fX, float fY, float fZ );
DECLARE_NSS_HANDLER( SetScale, 984 );
// float GetScale( object oObject, int nAxis );
DECLARE_NSS_HANDLER( GetScale, 985 );
// int GetNum2DARows( string s2DAName );
// DECLARE_NSS_HANDLER( GetNum2DARows, 986 );
// int GetNum2DAColumns( string s2DAName );
// DECLARE_NSS_HANDLER( GetNum2DAColumns, 987 );
// void SetCustomHeartbeat( object oTarget, int nMSeconds );
DECLARE_NSS_HANDLER( SetCustomHeartbeat, 988 );
// int GetCustomHeartbeat( object oTarget );
DECLARE_NSS_HANDLER( GetCustomHeartbeat, 989 );
// void SetScrollBarRanges( object oPlayer, string sScreenName, string sScrollBarName, int nMinSize, int nMaxSize, int nMinValue, int nMaxValue );
DECLARE_NSS_HANDLER( SetScrollBarRanges, 990 );
// void ClearListBox( object oPlayer, string sScreenName, string sListBox );
DECLARE_NSS_HANDLER( ClearListBox, 991 );
// void AddListBoxRow( object oPlayer, string sScreenName, string sListBox, string sRowName, string sTextFields, string sTextures, string sVariables, string sHideUnhide );
DECLARE_NSS_HANDLER( AddListBoxRow, 992 );
// void RemoveListBoxRow( object oPlayer, string sScreenName, string sListBox, string sRowName );
DECLARE_NSS_HANDLER( RemoveListBoxRow, 993 );
// int GetItemPropActivation( object oItem );
DECLARE_NSS_HANDLER( GetItemPropActivation, 994 );
// void SetItemPropActivation( object oItem, int nPref );
DECLARE_NSS_HANDLER( SetItemPropActivation, 995 );
// void ModifyListBoxRow( object oPlayer, string sScreenName, string sListBox, string sRowName, string sTextFields, string sTextures, string sVariables, string sHideUnhide );
DECLARE_NSS_HANDLER( ModifyListBoxRow, 996 );
// void SetFactionLeader( object oNewLeader );
DECLARE_NSS_HANDLER( SetFactionLeader, 997 );
// object GetFirstSubArea( object oArea, vector vPosition );
DECLARE_NSS_HANDLER( GetFirstSubArea, 998 );
// object GetNextSubArea( object oArea );
DECLARE_NSS_HANDLER( GetNextSubArea, 999 );
// float GetMovementRateFactor( object oCreature );
DECLARE_NSS_HANDLER( GetMovementRateFactor, 1000 );
// void SetMovementRateFactor( object oCreature, float fFactor );
DECLARE_NSS_HANDLER( SetMovementRateFactor, 1001 );
// string GetBicFileName( object oPC );
DECLARE_NSS_HANDLER( GetBicFileName, 1002 );
// int GetCollision(object oTarget);
DECLARE_NSS_HANDLER( GetCollision, 1003 );
// void SetCollision(object oTarget, int bCollision);
DECLARE_NSS_HANDLER( SetCollision, 1004 );
// int GetItemIcon(object oTarget);
DECLARE_NSS_HANDLER( GetItemIcon, 1005 );
// string GetVariableName(object oTarget, int nPosition);
DECLARE_NSS_HANDLER( GetVariableName, 1006 );
// int GetVariableType(object oTarget, int nPosition);
DECLARE_NSS_HANDLER( GetVariableType, 1007 );
// int GetAreaOfEffectDuration( object oAreaOfEffectObject=OBJECT_SELF );
DECLARE_NSS_HANDLER( GetAreaOfEffectDuration, 1008 );
// int GetIsPlayerCreated( object oCreature );
DECLARE_NSS_HANDLER( GetIsPlayerCreated, 1009 );
// string GetPartyName();
// DECLARE_NSS_HANDLER( GetPartyName, 1010 );
// string GetPartyMotto();
// DECLARE_NSS_HANDLER( GetPartyMotto, 1011 );
// int GetIsOverlandMap(object oArea);
DECLARE_NSS_HANDLER( GetIsOverlandMap, 1012 );
// int SetUnrestrictedLevelUp(object oCreature);
DECLARE_NSS_HANDLER( SetUnrestrictedLevelUp, 1013 );
// int GetSoundFileDuration( string sSoundFile );
// DECLARE_NSS_HANDLER( GetSoundFileDuration, 1014 );
// int GetPartyMembersDyingFlag();
DECLARE_NSS_HANDLER( GetPartyMembersDyingFlag, 1015 );
// void SetListBoxRowSelected( object oPlayer, string sScreenName, string sListBox, string sRowName );
DECLARE_NSS_HANDLER( SetListBoxRowSelected, 1016 );
// int GetTalkTableLanguage();
// DECLARE_NSS_HANDLER( GetTalkTableLanguage, 1017 );
// void SetScrollBarValue( object oPlayer, string sScreenName, string sScrollBarName, int nValue );
DECLARE_NSS_HANDLER( SetScrollBarValue, 1018 );
// void SetPause( int bState );
DECLARE_NSS_HANDLER( SetPause, 1019 );
// int GetPause();
DECLARE_NSS_HANDLER( GetPause, 1020 );
// int GetAreaOfEffectSpellId( object oAreaOfEffectObject=OBJECT_SELF );
DECLARE_NSS_HANDLER( GetAreaOfEffectSpellId, 1021 );
// void SetGlobalGUIVariable( object oPlayer, int nVarIndex, string sVarValue );
DECLARE_NSS_HANDLER( SetGlobalGUIVariable, 1022 );
// object CreateInstancedAreaFromSource(object oArea);
DECLARE_NSS_HANDLER( CreateInstancedAreaFromSource, 1023 );
// int GetVariableValueInt(object oObject, int nIndex);
DECLARE_NSS_HANDLER( GetVariableValueInt, 1024 );
// string GetVariableValueString(object oObject, int nIndex);
DECLARE_NSS_HANDLER( GetVariableValueString, 1025 );
// float  GetVariableValueFloat(object oObject, int nIndex);
DECLARE_NSS_HANDLER(  GetVariableValueFloat, 1026 );
// location GetVariableValueLocation(object oObject, int nIndex);
DECLARE_NSS_HANDLER( GetVariableValueLocation, 1027 );
// object GetVariableValueObject(object oObject, int nIndex);
DECLARE_NSS_HANDLER( GetVariableValueObject, 1028 );
// int GetVariableCount(object oObject);
DECLARE_NSS_HANDLER( GetVariableCount, 1029 );
// void SetBaseAbilityScore(object oCreature, int nAbilityType, int nScore);
DECLARE_NSS_HANDLER( SetBaseAbilityScore, 1030 );
// void SetBaseSkillRank(object oCreature, int nSkill, int nRank, int bTrackWithLevel = TRUE);
DECLARE_NSS_HANDLER( SetBaseSkillRank, 1031 );
// void SendChatMessage(object oSender, object oReceiver, int nChannel, string sMessage, int bInvokeCallback = FALSE);
DECLARE_NSS_HANDLER( SendChatMessage, 1032 );
// int GetIsLocationValid(location lLocation);
DECLARE_NSS_HANDLER( GetIsLocationValid, 1033 );
// int GetSurfaceMaterialsAtLocation(location lLocation);
DECLARE_NSS_HANDLER( GetSurfaceMaterialsAtLocation, 1034 );
// int GetSpellKnown(object oCreature, int nSpell) ;
DECLARE_NSS_HANDLER( GetSpellKnown, 1035 );
// int GetItemBaseMaterialType(object oItem);
DECLARE_NSS_HANDLER( GetItemBaseMaterialType, 1036 );
// void SetItemBaseMaterialType(object oItem, int nMaterialType);
DECLARE_NSS_HANDLER( SetItemBaseMaterialType, 1037 );
// void SetSpellKnown(object oCreature, int nClassPosition, int nSpell, int bKnown = TRUE, int bTrackWithLevel = TRUE);
DECLARE_NSS_HANDLER( SetSpellKnown, 1038 );
// int GetLimboCreatureCount();
DECLARE_NSS_HANDLER( GetLimboCreatureCount, 1039 );
// object GetCreatureInLimbo(int nTh = 0);
DECLARE_NSS_HANDLER( GetCreatureInLimbo, 1040 );
// void SendCreatureToLimbo(object oCreature);
DECLARE_NSS_HANDLER( SendCreatureToLimbo, 1041 );
// void AddScriptParameterInt(int nParam);
DECLARE_NSS_HANDLER( AddScriptParameterInt, 1042 );
// void AddScriptParameterString(string sParam);
DECLARE_NSS_HANDLER( AddScriptParameterString, 1043 );
// void AddScriptParameterFloat(float fParam);
DECLARE_NSS_HANDLER( AddScriptParameterFloat, 1044 );
// void AddScriptParameterObject(object oParam);
DECLARE_NSS_HANDLER( AddScriptParameterObject, 1045 );
// int  ExecuteScriptEnhanced(string sScript, object oTarget, int bClearParams = TRUE);
DECLARE_NSS_HANDLER(  ExecuteScriptEnhanced, 1046 );
// void  ClearScriptParams();
DECLARE_NSS_HANDLER(  ClearScriptParams, 1047 );
// void SetSkillPointsRemaining(object oPC, int nPoints);
DECLARE_NSS_HANDLER( SetSkillPointsRemaining, 1048 );
// int GetSkillPointsRemaining(object oPC);
DECLARE_NSS_HANDLER( GetSkillPointsRemaining, 1049 );
// int GetCasterClassSpellSchool(object oPC, int nClassPos);
DECLARE_NSS_HANDLER( GetCasterClassSpellSchool, 1050 );
// void SetGender(object oCreature, int nGender);
DECLARE_NSS_HANDLER( SetGender, 1051 );
// void SetTag(object oObject, string sNewTag);
DECLARE_NSS_HANDLER( SetTag, 1052 );
// int GetArmorRulesType(object oItem);
DECLARE_NSS_HANDLER( GetArmorRulesType, 1053 );
// void SetArmorRulesType(object oItem, int nType);
DECLARE_NSS_HANDLER( SetArmorRulesType, 1054 );
// void SetItemIcon(object oItem, int nIcon);
DECLARE_NSS_HANDLER( SetItemIcon, 1055 );
// object GetObjectByTagAndType(string sTag, int nObjectType, int nTh);
DECLARE_NSS_HANDLER( GetObjectByTagAndType, 1056 );
// void RecallCreatureFromLimboToLocation(object oCreature, location loc);
DECLARE_NSS_HANDLER( RecallCreatureFromLimboToLocation, 1057 );

#undef DECLARE_NSS_HANDLER


